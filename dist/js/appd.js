function MainViewModel(e){var i=this;i.currencies=ko.observableArray([new Currency("EUR",1),new Currency("USD",0),new Currency("CHF",0),new Currency("GBP",0),new Currency("AUD",0),new Currency("CAD",0),new Currency("CZK",0)]),i.searchTerm=ko.observable(""),i.status=ko.observable(""),i.Rome={lat:41.9,lng:12.5},i.map=new google.maps.Map(document.getElementById("romeMap"),{zoom:13,center:i.Rome}),i.infoWindow=new google.maps.InfoWindow({zIndex:2}),i.latLngFinder=new google.maps.Geocoder,i.container=ko.observable(new LocContainer(e,i.map,i.infoWindow)),i.container().wikiGets(i.latLngFinder),i.setView=function(e){i.container().setView(e)},i.searchIt=function(){i.container().search(i.searchTerm()),console.log(i.searchTerm())},i.fixerio_update=function(){jQuery.getJSON("http://api.fixer.io/latest",function(e){for(var a=0;a<i.currencies().length;a++)"EUR"==i.currencies()[a].name()?i.currencies()[a].value(1):i.currencies()[a].value(e.rates[i.currencies()[a].name()]);i.status("Passing Ajax Request."),setTimeout(i.fixerio_update,3e5)}).fail(function(){i.status("Failing Ajax Request. Sticking to last known exchange rate")})},i.fixerio_api=function(){jQuery.getJSON("http://api.fixer.io/latest",function(e){for(var a=0;a<i.currencies().length;a++)"EUR"==i.currencies()[a].name()?i.currencies()[a].value(1):i.currencies()[a].value(e.rates[i.currencies()[a].name()]);i.status("Passing Ajax Request."),setTimeout(i.fixerio_update,3e5)}).fail(function(){i.status("Failing Ajax Request. Sticking to last known exchange rate")})},i.fixerio_api(),i.setView(0)}function initialize(){main=new MainViewModel(locationData),ko.applyBindings(main)}function initMap(){google.maps.event.addDomListener(window,"load",initialize)}function googleError(){var e=$("#romeMap");console.log("onError runs!"),e.text("<div id='googleError'><h1>Error Loading Google Maps!!!</h1><p>Please contact Jacob Bryan at jake@jakebryan.me for assistance in fixing the problem!</p></div>")}var locationData={"rome-app":[{name:"Colosseum",address:["Piazza del Colosseo, Rome, Italy"],website:"http://www.coopculture.it/en/the-colosseum.cfm",wiki:"https://en.wikipedia.org/wiki/Colosseum",type:0,keywords:["gladiator","fight","ring","games","sport"]},{name:"Pantheon, Rome",address:["Piazza della Rotonda, 00186 Roma, Italy"],website:"http://www.turismoroma.it/cosa-fare/pantheon?lang=en",wiki:"https://en.wikipedia.org/wiki/Pantheon,_Rome",type:0,keywords:["church","dome","temple"]},{name:"St. Peter's Basilica",address:["Piazza San Pietro, 00120 CittÃ  del Vaticano, Vatican City"],website:"http://www.vaticanstate.va/content/vaticanstate/en/monumenti/basilica-di-s-pietro.html",wiki:"https://en.wikipedia.org/wiki/St._Peter%27s_Basilica",type:0,keywords:["church","basilica","vatican","pope","peter","saint"]},{name:"Pyramid of Cestia",address:["Via Raffaele Persichetti, 00153 Roma, Italy"],website:"http://www.coopculture.it/en/heritage.cfm?id=59",wiki:"https://en.wikipedia.org/wiki/Pyramid_of_Cestius",type:0,keywords:["pyramid","gaius","cestius","tomb","ruins"]},{name:"Underground Basilica of Porta Maggiore",address:["Piazzale Labicano angolo via Prenestina, Via Prenestina, Roma, Italy"],website:"http://archeoroma.beniculturali.it/en/archaeological-site/underground-basilica-near-porta-maggiore",wiki:"https://en.wikipedia.org/wiki/Underground_basilica_of_Porta_Maggiore",type:0,keywords:["basilica","underground","neopythagoreans"]},{name:"Palazzo Delle Esposizioni",address:["Via Nazionale, 194, 00184 Roma, Italy"],website:"http://english.palazzoesposizioni.it/Home.aspx",wiki:"https://en.wikipedia.org/wiki/Palazzo_delle_Esposizioni",type:0,keywords:["exhibition","hall","cultural","center","museum"]},{name:"Palatine Hill",address:["Via della Salara Vecchia, 5/6, Roma, Italy"],website:"http://www.coopculture.it/en/heritage.cfm?id=4",wiki:"https://en.wikipedia.org/wiki/Palatine_Hill",type:0,keywords:["palatine","hill","forum","ruins","ancient","rome"]},{name:"Tourist Information Centers",address:["Via Giovanni Giolitti 34, Roma, Italy"],website:"http://www.turismoroma.it/info_viaggio/pit",wiki:"none",type:1,keywords:["information","center","pit","point"]},{name:"Roma Termini",address:["Roma Termini, Italy"],website:"http://www.trenitalia.com/tcom-en",wiki:"https://en.wikipedia.org/wiki/Roma_Termini_railway_station",type:3,keywords:["trains","station","choo"]},{name:"Trevi Fountain",address:["Piazza di Trevi, 00187 Roma, Italy"],website:"http://www.trevifountain.net/",wiki:"https://en.wikipedia.org/wiki/Trevi_Fountain",type:0,keywords:["trevi","fountain","wish","salvi","bracci"]}]},Location=function(e,i,a){var o=this;o.name=i.name||"",o.address=i.address||[],o.wiki=i.wiki||"",o.type=i.type||0,o.website=i.website||"",o.keywords=i.keywords||[],o.hasMarker=ko.observable(!1),o.markers=[],o.visible=ko.observable(!0),o.wikiDisplay="",o.map=e,o.info=a};Location.prototype=Object.create(Object.prototype),Location.prototype.constructor=Location,Location.prototype.setFocus=function(){var e=this;google.maps.event.trigger(e.markers[0],"click")},Location.prototype.unsetFocus=function(e){var i=this;e||google.maps.event.trigger(i.markers[0],"click"),console.log("Ran thru unset Focus")},Location.prototype.addMarker=function(e,i){var a=this;if(i==google.maps.GeocoderStatus.OK){for(var o=-1,t=-1,n=-1,r=0,s=e.length-1;s>=0;s--){var c=e[s].geometry.location_type;"ROOFTOP"==c?o=s:"GEOMETRIC_CENTER"==c?n=s:"APPROXIMATE"==c&&(t=s)}o>=0?r=o:t>=0?r=t:n>=0&&(r=n),a.markers.push(new google.maps.Marker({position:{lat:e[r].geometry.location.lat(),lng:e[r].geometry.location.lng()},draggable:!1,animation:google.maps.Animation.DROP,map:a.map,title:a.name}));var l=a.markers.length-1;return a.markers[l].addListener("click",function(){null!==a.markers[l].getAnimation()?(a.markers[l].setAnimation(null),a.info.close()):(a.markers[l].setAnimation(google.maps.Animation.BOUNCE),a.info.setContent(a.wikiDisplay),a.info.open(a.map,a.markers[l]))}),a.info.addListener("closeclick",function(){a.info.close(),a.markers[l].setAnimation(null)}),a.hasMarker(!0),0}return console.log("Error trying to access the Geocoder. Status:",i),-1},Location.prototype.isVisible=function(e){var i=this;if(i.visible(e),e)for(var a=i.markers.length-1;a>=0;a--)i.markers[a].setMap(i.map);else for(var o=i.markers.length-1;o>=0;o--)i.markers[o].setMap(null)},Location.prototype.search=function(e){var i=this,a=e.toLowerCase();if(0===a.length)return i.isVisible(!0),!0;if(i.name.toLowerCase().includes(a))return i.isVisible(!0),!0;for(var o=i.keywords.length-1;o>=0;o--)if(i.keywords[o].toLowerCase().includes(a))return i.isVisible(!0),!0;return i.isVisible(!1),!1},Location.prototype.wikiGet=function(e){var i=this,a="https://en.wikipedia.org/w/api.php";$.ajax({url:a+"?action=opensearch&search="+i.name+"&format=json",type:"GET",dataType:"jsonp"}).done(function(e){var a='<h3>%TITLE%</h3><p>%DESCRIPTION%</p><p>Find out more <a href="%WIKIURL%">here</a> at Wikipedia or <a href="%WEBURL%">here</a> at the home page.</p>';if(a=a.replace("%WEBURL%",i.website),"none"!=i.wiki){for(var o=e[3].length-1;o>=0;o--)if(e[3][o]==i.wiki){a=a.replace("%TITLE%",e[1][o]),a=a.replace("%DESCRIPTION%",e[2][o]),a=a.replace("%WIKIURL%",i.wiki),i.wikiDisplay=a;break}0===i.wikiDisplay.length&&(a=a.replace("%TITLE%",e[1][0]),a=a.replace("%DESCRIPTION%",e[2][0]),a=a.replace("%WIKIURL%",i.wiki),i.wikiDisplay=a)}else{var t='<h3>%NAME%</h3><p>Could not find any data from Wikipedia from this location but you can go to the website <a href="%WEBURL%">here</a></p>';t=t.replace("%NAME%",i.name),t=t.replace("%WEBURL%",i.website),i.wikiDisplay=t}}).fail(function(e){console.log("Failed AJAX request");var a='<h3>%NAME%</h3><p>Could not find any data from Wikipedia from this location but you can go to the website <a href="%WEBURL%">here</a></p>';a=a.replace("%NAME%",i.name),a=a.replace("%WEBURL%",i.website),i.wikiDisplay=a}).always(function(a){for(var o=i.address.length-1;o>=0;o--)e.geocode({address:i.address[o]},function(e,a){i.addMarker(e,a),"ZERO_RESULTS"==a&&console.log(e.toString())})})};var LocContainer=function(e,i,a){var o=this;o.map=i,o.locations=ko.observableArray(),e["rome-app"].forEach(function(e){o.locations.push(new Location(o.map,e,a))})};LocContainer.prototype=Object.create(Object.prototype),LocContainer.prototype.constructor=LocContainer,LocContainer.prototype.setView=function(e){for(var i=this,a=0;a<i.locations().length;a++)i.locations()[a].type==e?i.locations()[a].isVisible(!0):2===e?i.locations()[a].isVisible(!0):i.locations()[a].isVisible(!1)},LocContainer.prototype.wikiGets=function(e){for(var i=this,a=i.locations().length-1;a>=0;a--)i.locations()[a].wikiGet(e)},LocContainer.prototype.search=function(e){for(var i=this,a=i.locations().length-1;a>=0;a--)i.locations()[a].search(e)};var Currency=function(e,i){var a=this;a.name=ko.observable(e||"USD"),a.value=ko.observable(i||0)};Currency.prototype=Object.create(Object.prototype),Currency.prototype.constructor=Currency;var main;
//# sourceMappingURL=data:application/json;base64,
