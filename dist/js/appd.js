function fixerio_update(i){jQuery.getJSON("http://api.fixer.io/latest",function(e){for(var t,a="#%CURRENCY%-data",o=0;o<i.length;o++)t=a.replace("%CURRENCY%",i[o]),$(t).text(e.rates[i[o]]);setTimeout(fixerio_update,3e5,root)})}function fixerio_api(i){jQuery.getJSON("http://api.fixer.io/latest",function(e){var t=$("#currenciesTarget"),a='<tr><td>%CURRENCY%</td><td id="%CURRENCY%-data"></td></tr>',o="<tr><td>%CURRENCY%</td><td>%AMOUNT%</td></tr>",n="#%CURRENCY%-data",r=o.replace("%CURRENCY%",e.base),s=n;r=r.replace("%AMOUNT%","1.00"),t.append(r);for(var l=0;l<i.length;l++)r=a.replace("%CURRENCY%",i[l]),r=r.replace("%CURRENCY%",i[l]),s=n.replace("%CURRENCY%",i[l]),t.append(r),$(s).text(e.rates[i[l]]);setTimeout(fixerio_update,3e5,i)})}function CreateMarker(i,e){var t;t=new google.maps.Marker({map:e,position:{lat:i.geometry.location.lat(),lng:i.geometry.location.lng()},title:i.name})}function MainViewModel(i){var e=this;e.container=new LocContainer(i),e.currencies=["USD","CHF","GBP","AUD","CAD","CZK"],e.Rome={lat:41.9,lng:12.5},e.map=new google.maps.Map(document.getElementById("romeMap"),{zoom:12,center:e.Rome}),e.placeService=new google.maps.places.PlacesService(e.map)}function initialize(){var i=new MainViewModel(locationData);fixerio_api(i.currencies),ko.applyBindings(i),i.container.allVisible()}function init(){google.maps.event.addDomListener(window,"load",initialize),console.log("Runs on ready!")}var Location=function(i){this.name=ko.observable(i.name||""),this.address=ko.observableArray(i.address||[""]),this.wiki=ko.observable(i.wiki||""),this.type=ko.observable(i.type||5),this.website=ko.observable(i.website||""),this.keywords=ko.observableArray(i.keywords||[]),this.visible=ko.observable(!0)};Location.prototype=Object.create(Object.prototype),Location.prototype.constructor=Location,Location.prototype.search=function(i){if(this.name().toLowerCase().includes(i))return!0;for(var e=this.keywords().length-1;e>=0;e--)if(this.keywords()[e].toLowerCase().includes(i))return!0;return this.visible(!1),!1};var LocContainer=function(i){var e=this;e.locations=ko.observableArray(),i["rome-app"].forEach(function(i){e.locations.push(new Location(i))})};LocContainer.prototype=Object.create(Object.prototype),LocContainer.prototype.constructor=LocContainer,LocContainer.prototype.search=function(i){this.locations().forEach(function(e){e.visible&&e.search(i.toLowerCase())})},LocContainer.prototype.setTypeVisible=function(i){this.locations().forEach(function(e){e.type()!=i?e.visible(!1):e.visible(!0)}),console.log("SetTypeVisible "+String(i))},LocContainer.prototype.allVisible=function(){this.locations().forEach(function(i){i.visible(!0)}),console.log("All Visible")};var locationData={"rome-app":[{name:"Colosseum",address:["Piazza del Colosseo, Rome, Italy"],website:"http://www.coopculture.it/en/the-colosseum.cfm",wiki:"https://en.wikipedia.org/wiki/Colosseum",type:0,keywords:["gladiator","fight","ring","games","sport"]},{name:"Pantheon, Rome",address:["Piazza della Rotonda Rome, Italy"],website:"http://www.turismoroma.it/cosa-fare/pantheon?lang=en",wiki:"https://en.wikipedia.org/wiki/Pantheon,_Rome",type:0,keywords:["church","dome","temple"]},{name:"St. Peter's Basilica",address:["Piazza San Pietro, 00120 Città del Vaticano, Vatican City"],website:"http://www.vaticanstate.va/content/vaticanstate/en/monumenti/basilica-di-s-pietro.html",wiki:"https://en.wikipedia.org/wiki/St._Peter%27s_Basilica",type:0,keywords:["church","basilica","vatican","pope","peter","saint"]},{name:"Pyramid of Cestia",address:["Via Raffaele Persichetti, 00153 Roma, Italy"],website:"http://www.coopculture.it/en/heritage.cfm?id=59",wiki:"https://en.wikipedia.org/wiki/Pyramid_of_Cestius",type:0,keywords:["pyramid","gaius","cestius","tomb","ruins"]},{name:"Underground Basilica of Porta Maggiore",address:["Piazzale Labicano angolo via Prenestina, Via Prenestina, Roma, Italy"],website:"http://archeoroma.beniculturali.it/en/archaeological-site/underground-basilica-near-porta-maggiore",wiki:"https://en.wikipedia.org/wiki/Underground_basilica_of_Porta_Maggiore",type:0,keywords:["basilica","underground","neopythagoreans"]},{name:"Palazzo Delle Esposizioni",address:["Via Nazionale, 194, 00184 Roma, Italy"],website:"http://english.palazzoesposizioni.it/Home.aspx",wiki:"https://en.wikipedia.org/wiki/Palazzo_delle_Esposizioni",type:0,keywords:["exhibition","hall","cultural","center","museum"]},{name:"Palatine Hill",address:["Via della Salara Vecchia, 5/6, Roma, Italy"],website:"http://www.coopculture.it/en/heritage.cfm?id=4",wiki:"https://en.wikipedia.org/wiki/Palatine_Hill",type:0,keywords:["palatine","hill","forum","ruins","ancient","rome"]},{name:"Tourist Information Centers",address:["Via Giovanni Giolitti 34, Roma, Italy","Via di San Basilio 51, Roma, Italy","Palazzo delle Esposizioni, Roma, Italy","Via dei Fori Imperiali, Roma, Italy"],website:"http://www.turismoroma.it/info_viaggio/pit",wiki:"none",type:1,keywords:["information","center","pit","point"]},{name:"Leonardo da Vinci–Fiumicino Airport",address:["Via dell' Aeroporto di Fiumicino, 320, 00054 Fiumicino RM, Italy"],website:"http://www.adr.it/fiumicino",wiki:"https://en.wikipedia.org/wiki/Leonardo_da_Vinci%E2%80%93Fiumicino_Airport",type:3,keywords:["airport","ryanair","fiumicino","neos","alitalia","airplanes"]},{name:"Termini Station",address:["Roma Termini, Italy"],website:"http://www.trenitalia.com/tcom-en",type:3,keywords:["trains","station","choo"]},{name:"Trevi Fountain",address:["Piazza di Trevi, 00187 Roma, Italy"],website:"http://www.trevifountain.net/",wiki:"https://en.wikipedia.org/wiki/Trevi_Fountain",type:0,keywords:["trevi","fountain","wish","salvi","bracci"]}]};
function fixerio_update(e){jQuery.getJSON("http://api.fixer.io/latest",function(i){for(var a,t="#%CURRENCY%-data",o=0;o<e.length;o++)a=t.replace("%CURRENCY%",e[o]),$(a).text(i.rates[e[o]]);setTimeout(fixerio_update,3e5,e)})}function fixerio_api(e){jQuery.getJSON("http://api.fixer.io/latest",function(i){var a=$("#currenciesTarget"),t='<tr><td>%CURRENCY%</td><td id="%CURRENCY%-data"></td></tr>',o="<tr><td>%CURRENCY%</td><td>%AMOUNT%</td></tr>",r="#%CURRENCY%-data",n=o.replace("%CURRENCY%",i.base),s=r;n=n.replace("%AMOUNT%","1.00"),a.append(n);for(var p=0;p<e.length;p++)n=t.replace("%CURRENCY%",e[p]),n=n.replace("%CURRENCY%",e[p]),s=r.replace("%CURRENCY%",e[p]),a.append(n),$(s).text(i.rates[e[p]]);setTimeout(fixerio_update,3e5,e)})}function MainViewModel(e){var i=this;i.currencies=["USD","CHF","GBP","AUD","CAD","CZK"],i.Rome={lat:41.9,lng:12.5},i.map=new google.maps.Map(document.getElementById("romeMap"),{zoom:12,center:i.Rome}),i.placeService=new google.maps.places.PlacesService(i.map)}function initialize(){var e=new MainViewModel(locationData);fixerio_api(e.currencies),ko.applyBindings(e)}function initD(){google.maps.event.addDomListener(window,"load",initialize),console.log("Runs on ready!"),console.log("BUTTHEAD")}var locationData={"rome-app":[{name:"Colosseum",address:["Piazza del Colosseo, Rome, Italy"],website:"http://www.coopculture.it/en/the-colosseum.cfm",wiki:"https://en.wikipedia.org/wiki/Colosseum",type:0,keywords:["gladiator","fight","ring","games","sport"]},{name:"Pantheon, Rome",address:["Piazza della Rotonda Rome, Italy"],website:"http://www.turismoroma.it/cosa-fare/pantheon?lang=en",wiki:"https://en.wikipedia.org/wiki/Pantheon,_Rome",type:0,keywords:["church","dome","temple"]},{name:"St. Peter's Basilica",address:["Piazza San Pietro, 00120 Città del Vaticano, Vatican City"],website:"http://www.vaticanstate.va/content/vaticanstate/en/monumenti/basilica-di-s-pietro.html",wiki:"https://en.wikipedia.org/wiki/St._Peter%27s_Basilica",type:0,keywords:["church","basilica","vatican","pope","peter","saint"]},{name:"Pyramid of Cestia",address:["Via Raffaele Persichetti, 00153 Roma, Italy"],website:"http://www.coopculture.it/en/heritage.cfm?id=59",wiki:"https://en.wikipedia.org/wiki/Pyramid_of_Cestius",type:0,keywords:["pyramid","gaius","cestius","tomb","ruins"]},{name:"Underground Basilica of Porta Maggiore",address:["Piazzale Labicano angolo via Prenestina, Via Prenestina, Roma, Italy"],website:"http://archeoroma.beniculturali.it/en/archaeological-site/underground-basilica-near-porta-maggiore",wiki:"https://en.wikipedia.org/wiki/Underground_basilica_of_Porta_Maggiore",type:0,keywords:["basilica","underground","neopythagoreans"]},{name:"Palazzo Delle Esposizioni",address:["Via Nazionale, 194, 00184 Roma, Italy"],website:"http://english.palazzoesposizioni.it/Home.aspx",wiki:"https://en.wikipedia.org/wiki/Palazzo_delle_Esposizioni",type:0,keywords:["exhibition","hall","cultural","center","museum"]},{name:"Palatine Hill",address:["Via della Salara Vecchia, 5/6, Roma, Italy"],website:"http://www.coopculture.it/en/heritage.cfm?id=4",wiki:"https://en.wikipedia.org/wiki/Palatine_Hill",type:0,keywords:["palatine","hill","forum","ruins","ancient","rome"]},{name:"Tourist Information Centers",address:["Via Giovanni Giolitti 34, Roma, Italy","Via di San Basilio 51, Roma, Italy","Palazzo delle Esposizioni, Roma, Italy","Via dei Fori Imperiali, Roma, Italy"],website:"http://www.turismoroma.it/info_viaggio/pit",wiki:"none",type:1,keywords:["information","center","pit","point"]},{name:"Leonardo da Vinci–Fiumicino Airport",address:["Via dell' Aeroporto di Fiumicino, 320, 00054 Fiumicino RM, Italy"],website:"http://www.adr.it/fiumicino",wiki:"https://en.wikipedia.org/wiki/Leonardo_da_Vinci%E2%80%93Fiumicino_Airport",type:3,keywords:["airport","ryanair","fiumicino","neos","alitalia","airplanes"]},{name:"Termini Station",address:["Roma Termini, Italy"],website:"http://www.trenitalia.com/tcom-en",type:3,keywords:["trains","station","choo"]},{name:"Trevi Fountain",address:["Piazza di Trevi, 00187 Roma, Italy"],website:"http://www.trevifountain.net/",wiki:"https://en.wikipedia.org/wiki/Trevi_Fountain",type:0,keywords:["trevi","fountain","wish","salvi","bracci"]}]},Location=function(e,i){var a=this;a.name=e.name||"",a.address=e.address||[""],a.wiki=e.wiki||"",a.type=e.type||5,a.website=e.website||"",a.keywords=e.keywords||[],a.visible=!0,a.marker=i,a.wikiDisplay=""};Location.prototype=Object.create(Object.prototype),Location.prototype.constructor=Location,Location.prototype.search=function(e){var i=this;if(i.name.toLowerCase().includes(e))return i.visible(!0),!0;for(var a=i.keywords.length-1;a>=0;a--)if(i.keywords[a].toLowerCase().includes(e))return!0;return i.visible=!1,!1},Location.prototype.wikiGet=function(){var e=this,i="https://en.wikipedia.org/w/api.php",a='<h3>%TITLE%</h3><p>%DESCRIPTION</p><p>Find out more <a href="%WIKIURL%">here</a> at Wikipedia or <a href="%WEBURL%">here</a> at the home page.</p>';$.ajax({url:i+"?action=opensearch&search="+e.name+"&format=json",type:"GET",dataType:"jsonp"}).done(function(i){if(a=a.replace("%WEBURL%",e.website),"none"!=e.wiki){for(var t=i[3].length-1;t>=0;t--)if(i[3][t]==e.wiki){a=a.replace("%DESCRIPTION%",i[2][t]),a=a.replace("%WIKIURL%",e.wiki),e.wikiDisplay=a;break}}else{var o='<h3>%NAME%</h3><p>Could not find any data from Wikipedia from this location but you can go to the website <a href="%WEBURL%">here</a></p>';o=o.replace("%NAME%",e.name),o=o.replace("%WEBURL%",e.website),e.wikiDisplay=o}}).fail(function(i){var a='<h3>%NAME%</h3><p>Could not find any data from Wikipedia from this location but you can go to the website <a href="%WEBURL%">here</a></p>';a=a.replace("%NAME%",e.name),a=a.replace("%WEBURL%",e.website),e.wikiDisplay=a}).always(function(e){console.log("Complete")})};
!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=!!e&&"length"in e&&e.length,n=oe.type(e);return"function"!==n&&!oe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function r(e,t,n){if(oe.isFunction(t))return oe.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return oe.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(ge.test(t))return oe.filter(t,e,n);t=oe.filter(t,e)}return oe.grep(e,function(e){return Z.call(t,e)>-1!==n})}function i(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function o(e){var t={};return oe.each(e.match(we)||[],function(e,n){t[n]=!0}),t}function s(){G.removeEventListener("DOMContentLoaded",s),e.removeEventListener("load",s),oe.ready()}function a(){this.expando=oe.expando+a.uid++}function u(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(De,"-$&").toLowerCase(),n=e.getAttribute(r),"string"==typeof n){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:Se.test(n)?oe.parseJSON(n):n)}catch(i){}Ne.set(e,t,n)}else n=void 0;return n}function l(e,t,n,r){var i,o=1,s=20,a=r?function(){return r.cur()}:function(){return oe.css(e,t,"")},u=a(),l=n&&n[3]||(oe.cssNumber[t]?"":"px"),c=(oe.cssNumber[t]||"px"!==l&&+u)&&Ae.exec(oe.css(e,t));if(c&&c[3]!==l){l=l||c[3],n=n||[],c=+u||1;do o=o||".5",c/=o,oe.style(e,t,c+l);while(o!==(o=a()/u)&&1!==o&&--s)}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}function c(e,t){var n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&oe.nodeName(e,t)?oe.merge([e],n):n}function f(e,t){for(var n=0,r=e.length;n<r;n++)Ee.set(e[n],"globalEval",!t||Ee.get(t[n],"globalEval"))}function p(e,t,n,r,i){for(var o,s,a,u,l,p,d=t.createDocumentFragment(),h=[],g=0,m=e.length;g<m;g++)if(o=e[g],o||0===o)if("object"===oe.type(o))oe.merge(h,o.nodeType?[o]:o);else if(Re.test(o)){for(s=s||d.appendChild(t.createElement("div")),a=(Oe.exec(o)||["",""])[1].toLowerCase(),u=Pe[a]||Pe._default,s.innerHTML=u[1]+oe.htmlPrefilter(o)+u[2],p=u[0];p--;)s=s.lastChild;oe.merge(h,s.childNodes),s=d.firstChild,s.textContent=""}else h.push(t.createTextNode(o));for(d.textContent="",g=0;o=h[g++];)if(r&&oe.inArray(o,r)>-1)i&&i.push(o);else if(l=oe.contains(o.ownerDocument,o),s=c(d.appendChild(o),"script"),l&&f(s),n)for(p=0;o=s[p++];)Fe.test(o.type||"")&&n.push(o);return d}function d(){return!0}function h(){return!1}function g(){try{return G.activeElement}catch(e){}}function m(e,t,n,r,i,o){var s,a;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(a in t)m(e,a,n,r,t[a],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),i===!1)i=h;else if(!i)return this;return 1===o&&(s=i,i=function(e){return oe().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=oe.guid++)),e.each(function(){oe.event.add(this,t,i,r,n)})}function v(e,t){return oe.nodeName(e,"table")&&oe.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e:e}function y(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function x(e){var t=Xe.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function b(e,t){var n,r,i,o,s,a,u,l;if(1===t.nodeType){if(Ee.hasData(e)&&(o=Ee.access(e),s=Ee.set(t,o),l=o.events)){delete s.handle,s.events={};for(i in l)for(n=0,r=l[i].length;n<r;n++)oe.event.add(t,i,l[i][n])}Ne.hasData(e)&&(a=Ne.access(e),u=oe.extend({},a),Ne.set(t,u))}}function w(e,t){var n=t.nodeName.toLowerCase();"input"===n&&He.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function T(e,t,n,r){t=J.apply([],t);var i,o,s,a,u,l,f=0,d=e.length,h=d-1,g=t[0],m=oe.isFunction(g);if(m||d>1&&"string"==typeof g&&!re.checkClone&&_e.test(g))return e.each(function(i){var o=e.eq(i);m&&(t[0]=g.call(this,i,o.html())),T(o,t,n,r)});if(d&&(i=p(t,e[0].ownerDocument,!1,e,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=oe.map(c(i,"script"),y),a=s.length;f<d;f++)u=i,f!==h&&(u=oe.clone(u,!0,!0),a&&oe.merge(s,c(u,"script"))),n.call(e[f],u,f);if(a)for(l=s[s.length-1].ownerDocument,oe.map(s,x),f=0;f<a;f++)u=s[f],Fe.test(u.type||"")&&!Ee.access(u,"globalEval")&&oe.contains(l,u)&&(u.src?oe._evalUrl&&oe._evalUrl(u.src):oe.globalEval(u.textContent.replace(ze,"")))}return e}function C(e,t,n){for(var r,i=t?oe.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||oe.cleanData(c(r)),r.parentNode&&(n&&oe.contains(r.ownerDocument,r)&&f(c(r,"script")),r.parentNode.removeChild(r));return e}function k(e,t){var n=oe(t.createElement(e)).appendTo(t.body),r=oe.css(n[0],"display");return n.detach(),r}function E(e){var t=G,n=Ve[e];return n||(n=k(e,t),"none"!==n&&n||(Ue=(Ue||oe("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=Ue[0].contentDocument,t.write(),t.close(),n=k(e,t),Ue.detach()),Ve[e]=n),n}function N(e,t,n){var r,i,o,s,a=e.style;return n=n||Qe(e),n&&(s=n.getPropertyValue(t)||n[t],""!==s||oe.contains(e.ownerDocument,e)||(s=oe.style(e,t)),!re.pixelMarginRight()&&Ge.test(s)&&Ye.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function S(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function D(e){if(e in rt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=nt.length;n--;)if(e=nt[n]+t,e in rt)return e}function j(e,t,n){var r=Ae.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function A(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,s=0;o<4;o+=2)"margin"===n&&(s+=oe.css(e,n+Le[o],!0,i)),r?("content"===n&&(s-=oe.css(e,"padding"+Le[o],!0,i)),"margin"!==n&&(s-=oe.css(e,"border"+Le[o]+"Width",!0,i))):(s+=oe.css(e,"padding"+Le[o],!0,i),"padding"!==n&&(s+=oe.css(e,"border"+Le[o]+"Width",!0,i)));return s}function L(t,n,r){var i=!0,o="width"===n?t.offsetWidth:t.offsetHeight,s=Qe(t),a="border-box"===oe.css(t,"boxSizing",!1,s);if(G.msFullscreenElement&&e.top!==e&&t.getClientRects().length&&(o=Math.round(100*t.getBoundingClientRect()[n])),o<=0||null==o){if(o=N(t,n,s),(o<0||null==o)&&(o=t.style[n]),Ge.test(o))return o;i=a&&(re.boxSizingReliable()||o===t.style[n]),o=parseFloat(o)||0}return o+A(t,n,r||(a?"border":"content"),i,s)+"px"}function q(e,t){for(var n,r,i,o=[],s=0,a=e.length;s<a;s++)r=e[s],r.style&&(o[s]=Ee.get(r,"olddisplay"),n=r.style.display,t?(o[s]||"none"!==n||(r.style.display=""),""===r.style.display&&qe(r)&&(o[s]=Ee.access(r,"olddisplay",E(r.nodeName)))):(i=qe(r),"none"===n&&i||Ee.set(r,"olddisplay",i?n:oe.css(r,"display"))));for(s=0;s<a;s++)r=e[s],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[s]||"":"none"));return e}function H(e,t,n,r,i){return new H.prototype.init(e,t,n,r,i)}function O(){return e.setTimeout(function(){it=void 0}),it=oe.now()}function F(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)n=Le[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function P(e,t,n){for(var r,i=(W.tweeners[t]||[]).concat(W.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,t,e))return r}function R(e,t,n){var r,i,o,s,a,u,l,c,f=this,p={},d=e.style,h=e.nodeType&&qe(e),g=Ee.get(e,"fxshow");n.queue||(a=oe._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,oe.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],l=oe.css(e,"display"),c="none"===l?Ee.get(e,"olddisplay")||E(e.nodeName):l,"inline"===c&&"none"===oe.css(e,"float")&&(d.display="inline-block")),n.overflow&&(d.overflow="hidden",f.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],st.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;h=!0}p[r]=g&&g[r]||oe.style(e,r)}else l=void 0;if(oe.isEmptyObject(p))"inline"===("none"===l?E(e.nodeName):l)&&(d.display=l);else{g?"hidden"in g&&(h=g.hidden):g=Ee.access(e,"fxshow",{}),o&&(g.hidden=!h),h?oe(e).show():f.done(function(){oe(e).hide()}),f.done(function(){var t;Ee.remove(e,"fxshow");for(t in p)oe.style(e,t,p[t])});for(r in p)s=P(h?g[r]:0,r,f),r in g||(g[r]=s.start,h&&(s.end=s.start,s.start="width"===r||"height"===r?1:0))}}function M(e,t){var n,r,i,o,s;for(n in e)if(r=oe.camelCase(n),i=t[r],o=e[n],oe.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),s=oe.cssHooks[r],s&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function W(e,t,n){var r,i,o=0,s=W.prefilters.length,a=oe.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=it||O(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,s=0,u=l.tweens.length;s<u;s++)l.tweens[s].run(o);return a.notifyWith(e,[l,o,n]),o<1&&u?n:(a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:oe.extend({},t),opts:oe.extend(!0,{specialEasing:{},easing:oe.easing._default},n),originalProperties:t,originalOptions:n,startTime:it||O(),duration:n.duration,tweens:[],createTween:function(t,n){var r=oe.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return t?(a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l,t])):a.rejectWith(e,[l,t]),this}}),c=l.props;for(M(c,l.opts.specialEasing);o<s;o++)if(r=W.prefilters[o].call(l,e,c,l.opts))return oe.isFunction(r.stop)&&(oe._queueHooks(l.elem,l.opts.queue).stop=oe.proxy(r.stop,r)),r;return oe.map(c,P,l),oe.isFunction(l.opts.start)&&l.opts.start.call(e,l),oe.fx.timer(oe.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function I(e){return e.getAttribute&&e.getAttribute("class")||""}function $(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(we)||[];if(oe.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function B(e,t,n,r){function i(a){var u;return o[a]=!0,oe.each(e[a]||[],function(e,a){var l=a(t,n,r);return"string"!=typeof l||s||o[l]?s?!(u=l):void 0:(t.dataTypes.unshift(l),i(l),!1)}),u}var o={},s=e===Et;return i(t.dataTypes[0])||!o["*"]&&i("*")}function _(e,t){var n,r,i=oe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&oe.extend(!0,e,r),e}function X(e,t,n){for(var r,i,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}s||(s=i)}o=o||s}if(o)return o!==u[0]&&u.unshift(o),n[o]}function z(e,t,n,r){var i,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(s=l[u+" "+o]||l["* "+o],!s)for(i in l)if(a=i.split(" "),a[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){s===!0?s=l[i]:l[i]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&e["throws"])t=s(t);else try{t=s(t)}catch(f){return{state:"parsererror",error:s?f:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}function U(e,t,n,r){var i;if(oe.isArray(t))oe.each(t,function(t,i){n||jt.test(e)?r(e,i):U(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==oe.type(t))r(e,t);else for(i in t)U(e+"["+i+"]",t[i],n,r)}function V(e){return oe.isWindow(e)?e:9===e.nodeType&&e.defaultView}var Y=[],G=e.document,Q=Y.slice,J=Y.concat,K=Y.push,Z=Y.indexOf,ee={},te=ee.toString,ne=ee.hasOwnProperty,re={},ie="2.2.0",oe=function(e,t){return new oe.fn.init(e,t)},se=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ae=/^-ms-/,ue=/-([\da-z])/gi,le=function(e,t){return t.toUpperCase()};oe.fn=oe.prototype={jquery:ie,constructor:oe,selector:"",length:0,toArray:function(){return Q.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:Q.call(this)},pushStack:function(e){var t=oe.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return oe.each(this,e)},map:function(e){return this.pushStack(oe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(Q.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:K,sort:Y.sort,splice:Y.splice},oe.extend=oe.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||oe.isFunction(s)||(s={}),a===u&&(s=this,a--);a<u;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],r=e[t],s!==r&&(l&&r&&(oe.isPlainObject(r)||(i=oe.isArray(r)))?(i?(i=!1,o=n&&oe.isArray(n)?n:[]):o=n&&oe.isPlainObject(n)?n:{},s[t]=oe.extend(l,o,r)):void 0!==r&&(s[t]=r));return s},oe.extend({expando:"jQuery"+(ie+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===oe.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=e&&e.toString();return!oe.isArray(e)&&t-parseFloat(t)+1>=0},isPlainObject:function(e){return"object"===oe.type(e)&&!e.nodeType&&!oe.isWindow(e)&&!(e.constructor&&!ne.call(e.constructor.prototype,"isPrototypeOf"))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?ee[te.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;e=oe.trim(e),e&&(1===e.indexOf("use strict")?(t=G.createElement("script"),t.text=e,G.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(ae,"ms-").replace(ue,le)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var r,i=0;if(n(e))for(r=e.length;i<r&&t.call(e[i],i,e[i])!==!1;i++);else for(i in e)if(t.call(e[i],i,e[i])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(se,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?oe.merge(r,"string"==typeof e?[e]:e):K.call(r,e)),r},inArray:function(e,t,n){return null==t?-1:Z.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,s=e.length,a=!n;o<s;o++)r=!t(e[o],o),r!==a&&i.push(e[o]);return i},map:function(e,t,r){var i,o,s=0,a=[];if(n(e))for(i=e.length;s<i;s++)o=t(e[s],s,r),null!=o&&a.push(o);else for(s in e)o=t(e[s],s,r),null!=o&&a.push(o);return J.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),oe.isFunction(e))return r=Q.call(arguments,2),i=function(){return e.apply(t||this,r.concat(Q.call(arguments)))},i.guid=e.guid=e.guid||oe.guid++,i},now:Date.now,support:re}),"function"==typeof Symbol&&(oe.fn[Symbol.iterator]=Y[Symbol.iterator]),oe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ee["[object "+t+"]"]=t.toLowerCase()});var ce=function(e){function t(e,t,n,r){var i,o,s,a,u,l,f,d,h=t&&t.ownerDocument,g=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==g&&9!==g&&11!==g)return n;if(!r&&((t?t.ownerDocument||t:I)!==q&&L(t),t=t||q,O)){if(11!==g&&(l=ve.exec(e)))if(i=l[1]){if(9===g){if(!(s=t.getElementById(i)))return n;if(s.id===i)return n.push(s),n}else if(h&&(s=h.getElementById(i))&&M(t,s)&&s.id===i)return n.push(s),n}else{if(l[2])return K.apply(n,t.getElementsByTagName(e)),n;if((i=l[3])&&w.getElementsByClassName&&t.getElementsByClassName)return K.apply(n,t.getElementsByClassName(i)),n}if(w.qsa&&!z[e+" "]&&(!F||!F.test(e))){if(1!==g)h=t,d=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(xe,"\\$&"):t.setAttribute("id",a=W),f=E(e),o=f.length,u=pe.test(a)?"#"+a:"[id='"+a+"']";o--;)f[o]=u+" "+p(f[o]);d=f.join(","),h=ye.test(e)&&c(t.parentNode)||t}if(d)try{return K.apply(n,h.querySelectorAll(d)),n}catch(m){}finally{a===W&&t.removeAttribute("id")}}}return S(e.replace(ae,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>T.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[W]=!0,e}function i(e){var t=q.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)T.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||V)-(~e.sourceIndex||V);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function u(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function l(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function c(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function f(){}function p(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function d(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=B++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,s){var a,u,l,c=[$,o];if(s){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,s))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(l=t[W]||(t[W]={}),u=l[t.uniqueID]||(l[t.uniqueID]={}),(a=u[r])&&a[0]===$&&a[1]===o)return c[2]=a[2];if(u[r]=c,c[2]=e(t,n,s))return!0}}}function h(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function g(e,n,r){for(var i=0,o=n.length;i<o;i++)t(e,n[i],r);return r}function m(e,t,n,r,i){for(var o,s=[],a=0,u=e.length,l=null!=t;a<u;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),l&&t.push(a)));return s}function v(e,t,n,i,o,s){return i&&!i[W]&&(i=v(i)),o&&!o[W]&&(o=v(o,s)),r(function(r,s,a,u){var l,c,f,p=[],d=[],h=s.length,v=r||g(t||"*",a.nodeType?[a]:a,[]),y=!e||!r&&t?v:m(v,p,e,a,u),x=n?o||(r?e:h||i)?[]:s:y;if(n&&n(y,x,a,u),i)for(l=m(x,d),i(l,[],a,u),c=l.length;c--;)(f=l[c])&&(x[d[c]]=!(y[d[c]]=f));if(r){if(o||e){if(o){for(l=[],c=x.length;c--;)(f=x[c])&&l.push(y[c]=f);o(null,x=[],l,u)}for(c=x.length;c--;)(f=x[c])&&(l=o?ee(r,f):p[c])>-1&&(r[l]=!(s[l]=f))}}else x=m(x===s?x.splice(h,x.length):x),o?o(null,s,x,u):K.apply(s,x)})}function y(e){for(var t,n,r,i=e.length,o=T.relative[e[0].type],s=o||T.relative[" "],a=o?1:0,u=d(function(e){return e===t},s,!0),l=d(function(e){return ee(t,e)>-1},s,!0),c=[function(e,n,r){var i=!o&&(r||n!==D)||((t=n).nodeType?u(e,n,r):l(e,n,r));return t=null,i}];a<i;a++)if(n=T.relative[e[a].type])c=[d(h(c),n)];else{if(n=T.filter[e[a].type].apply(null,e[a].matches),n[W]){for(r=++a;r<i&&!T.relative[e[r].type];r++);return v(a>1&&h(c),a>1&&p(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(ae,"$1"),n,a<r&&y(e.slice(a,r)),r<i&&y(e=e.slice(r)),r<i&&p(e))}c.push(n)}return h(c)}function x(e,n){var i=n.length>0,o=e.length>0,s=function(r,s,a,u,l){var c,f,p,d=0,h="0",g=r&&[],v=[],y=D,x=r||o&&T.find.TAG("*",l),b=$+=null==y?1:Math.random()||.1,w=x.length;for(l&&(D=s===q||s||l);h!==w&&null!=(c=x[h]);h++){if(o&&c){for(f=0,s||c.ownerDocument===q||(L(c),a=!O);p=e[f++];)if(p(c,s||q,a)){u.push(c);break}l&&($=b)}i&&((c=!p&&c)&&d--,r&&g.push(c))}if(d+=h,i&&h!==d){for(f=0;p=n[f++];)p(g,v,s,a);if(r){if(d>0)for(;h--;)g[h]||v[h]||(v[h]=Q.call(u));v=m(v)}K.apply(u,v),l&&!r&&v.length>0&&d+n.length>1&&t.uniqueSort(u)}return l&&($=b,D=y),g};return i?r(s):s}var b,w,T,C,k,E,N,S,D,j,A,L,q,H,O,F,P,R,M,W="sizzle"+1*new Date,I=e.document,$=0,B=0,_=n(),X=n(),z=n(),U=function(e,t){return e===t&&(A=!0),0},V=1<<31,Y={}.hasOwnProperty,G=[],Q=G.pop,J=G.push,K=G.push,Z=G.slice,ee=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ie="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+re+"))|)"+ne+"*\\]",oe=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",se=new RegExp(ne+"+","g"),ae=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),ue=new RegExp("^"+ne+"*,"+ne+"*"),le=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),ce=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),fe=new RegExp(oe),pe=new RegExp("^"+re+"$"),de={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re+"|[*])"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,ge=/^h\d$/i,me=/^[^{]+\{\s*\[native \w/,ve=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,xe=/'|\\/g,be=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),we=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},Te=function(){L()};try{K.apply(G=Z.call(I.childNodes),I.childNodes),G[I.childNodes.length].nodeType}catch(Ce){K={apply:G.length?function(e,t){J.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}w=t.support={},k=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},L=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:I;return r!==q&&9===r.nodeType&&r.documentElement?(q=r,H=q.documentElement,O=!k(q),(n=q.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",Te,!1):n.attachEvent&&n.attachEvent("onunload",Te)),w.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),w.getElementsByTagName=i(function(e){return e.appendChild(q.createComment("")),!e.getElementsByTagName("*").length}),w.getElementsByClassName=me.test(q.getElementsByClassName),w.getById=i(function(e){return H.appendChild(e).id=W,!q.getElementsByName||!q.getElementsByName(W).length}),w.getById?(T.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&O){var n=t.getElementById(e);return n?[n]:[]}},T.filter.ID=function(e){var t=e.replace(be,we);return function(e){return e.getAttribute("id")===t}}):(delete T.find.ID,T.filter.ID=function(e){var t=e.replace(be,we);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),T.find.TAG=w.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):w.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},T.find.CLASS=w.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&O)return t.getElementsByClassName(e)},P=[],F=[],(w.qsa=me.test(q.querySelectorAll))&&(i(function(e){H.appendChild(e).innerHTML="<a id='"+W+"'></a><select id='"+W+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&F.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||F.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+W+"-]").length||F.push("~="),e.querySelectorAll(":checked").length||F.push(":checked"),e.querySelectorAll("a#"+W+"+*").length||F.push(".#.+[+~]")}),i(function(e){var t=q.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&F.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||F.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),F.push(",.*:")})),(w.matchesSelector=me.test(R=H.matches||H.webkitMatchesSelector||H.mozMatchesSelector||H.oMatchesSelector||H.msMatchesSelector))&&i(function(e){w.disconnectedMatch=R.call(e,"div"),R.call(e,"[s!='']:x"),P.push("!=",oe)}),F=F.length&&new RegExp(F.join("|")),P=P.length&&new RegExp(P.join("|")),t=me.test(H.compareDocumentPosition),M=t||me.test(H.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},U=t?function(e,t){if(e===t)return A=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!w.sortDetached&&t.compareDocumentPosition(e)===n?e===q||e.ownerDocument===I&&M(I,e)?-1:t===q||t.ownerDocument===I&&M(I,t)?1:j?ee(j,e)-ee(j,t):0:4&n?-1:1)}:function(e,t){if(e===t)return A=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],u=[t];if(!i||!o)return e===q?-1:t===q?1:i?-1:o?1:j?ee(j,e)-ee(j,t):0;if(i===o)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;a[r]===u[r];)r++;return r?s(a[r],u[r]):a[r]===I?-1:u[r]===I?1:0},q):q},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==q&&L(e),n=n.replace(ce,"='$1']"),w.matchesSelector&&O&&!z[n+" "]&&(!P||!P.test(n))&&(!F||!F.test(n)))try{var r=R.call(e,n);if(r||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,q,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==q&&L(e),M(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==q&&L(e);var n=T.attrHandle[t.toLowerCase()],r=n&&Y.call(T.attrHandle,t.toLowerCase())?n(e,t,!O):void 0;return void 0!==r?r:w.attributes||!O?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(A=!w.detectDuplicates,j=!w.sortStable&&e.slice(0),e.sort(U),A){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return j=null,e},C=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=C(t);return n},T=t.selectors={cacheLength:50,createPseudo:r,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(be,we),e[3]=(e[3]||e[4]||e[5]||"").replace(be,we),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&fe.test(n)&&(t=E(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(be,we).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&_(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(se," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,f,p,d,h,g=o!==s?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!u&&!a,x=!1;if(m){if(o){for(;g;){for(p=t;p=p[g];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?m.firstChild:m.lastChild],s&&y){for(p=m,f=p[W]||(p[W]={}),c=f[p.uniqueID]||(f[p.uniqueID]={}),l=c[e]||[],d=l[0]===$&&l[1],x=d&&l[2],p=d&&m.childNodes[d];p=++d&&p&&p[g]||(x=d=0)||h.pop();)if(1===p.nodeType&&++x&&p===t){c[e]=[$,d,x];break}}else if(y&&(p=t,f=p[W]||(p[W]={}),c=f[p.uniqueID]||(f[p.uniqueID]={}),l=c[e]||[],d=l[0]===$&&l[1],x=d),x===!1)for(;(p=++d&&p&&p[g]||(x=d=0)||h.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++x||(y&&(f=p[W]||(p[W]={}),c=f[p.uniqueID]||(f[p.uniqueID]={}),c[e]=[$,x]),p!==t)););return x-=i,x===r||x%r===0&&x/r>=0}}},PSEUDO:function(e,n){var i,o=T.pseudos[e]||T.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[W]?o(n):o.length>1?(i=[e,e,"",n],T.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),s=i.length;s--;)r=ee(e,i[s]),e[r]=!(t[r]=i[s])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=N(e.replace(ae,"$1"));return i[W]?r(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(be,we),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:r(function(e){return pe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(be,we).toLowerCase(),function(t){var n;do if(n=O?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===H},focus:function(e){return e===q.activeElement&&(!q.hasFocus||q.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!T.pseudos.empty(e)},header:function(e){return ge.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){
for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:l(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}},T.pseudos.nth=T.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[b]=a(b);for(b in{submit:!0,reset:!0})T.pseudos[b]=u(b);return f.prototype=T.filters=T.pseudos,T.setFilters=new f,E=t.tokenize=function(e,n){var r,i,o,s,a,u,l,c=X[e+" "];if(c)return n?0:c.slice(0);for(a=e,u=[],l=T.preFilter;a;){r&&!(i=ue.exec(a))||(i&&(a=a.slice(i[0].length)||a),u.push(o=[])),r=!1,(i=le.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ae," ")}),a=a.slice(r.length));for(s in T.filter)!(i=de[s].exec(a))||l[s]&&!(i=l[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):X(e,u).slice(0)},N=t.compile=function(e,t){var n,r=[],i=[],o=z[e+" "];if(!o){for(t||(t=E(e)),n=t.length;n--;)o=y(t[n]),o[W]?r.push(o):i.push(o);o=z(e,x(i,r)),o.selector=e}return o},S=t.select=function(e,t,n,r){var i,o,s,a,u,l="function"==typeof e&&e,f=!r&&E(e=l.selector||e);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&w.getById&&9===t.nodeType&&O&&T.relative[o[1].type]){if(t=(T.find.ID(s.matches[0].replace(be,we),t)||[])[0],!t)return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=de.needsContext.test(e)?0:o.length;i--&&(s=o[i],!T.relative[a=s.type]);)if((u=T.find[a])&&(r=u(s.matches[0].replace(be,we),ye.test(o[0].type)&&c(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&p(o),!e)return K.apply(n,r),n;break}}return(l||N(e,f))(r,t,!O,n,!t||ye.test(e)&&c(t.parentNode)||t),n},w.sortStable=W.split("").sort(U).join("")===W,w.detectDuplicates=!!A,L(),w.sortDetached=i(function(e){return 1&e.compareDocumentPosition(q.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),w.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;if(!n)return e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);oe.find=ce,oe.expr=ce.selectors,oe.expr[":"]=oe.expr.pseudos,oe.uniqueSort=oe.unique=ce.uniqueSort,oe.text=ce.getText,oe.isXMLDoc=ce.isXML,oe.contains=ce.contains;var fe=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&oe(e).is(n))break;r.push(e)}return r},pe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},de=oe.expr.match.needsContext,he=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,ge=/^.[^:#\[\.,]*$/;oe.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?oe.find.matchesSelector(r,e)?[r]:[]:oe.find.matches(e,oe.grep(t,function(e){return 1===e.nodeType}))},oe.fn.extend({find:function(e){var t,n=this.length,r=[],i=this;if("string"!=typeof e)return this.pushStack(oe(e).filter(function(){for(t=0;t<n;t++)if(oe.contains(i[t],this))return!0}));for(t=0;t<n;t++)oe.find(e,i[t],r);return r=this.pushStack(n>1?oe.unique(r):r),r.selector=this.selector?this.selector+" "+e:e,r},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&de.test(e)?oe(e):e||[],!1).length}});var me,ve=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ye=oe.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||me,"string"==typeof e){if(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:ve.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof oe?t[0]:t,oe.merge(this,oe.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:G,!0)),he.test(r[1])&&oe.isPlainObject(t))for(r in t)oe.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=G.getElementById(r[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=G,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):oe.isFunction(e)?void 0!==n.ready?n.ready(e):e(oe):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),oe.makeArray(e,this))};ye.prototype=oe.fn,me=oe(G);var xe=/^(?:parents|prev(?:Until|All))/,be={children:!0,contents:!0,next:!0,prev:!0};oe.fn.extend({has:function(e){var t=oe(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(oe.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],s=de.test(e)||"string"!=typeof e?oe(e,t||this.context):0;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&oe.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?oe.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?Z.call(oe(e),this[0]):Z.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(oe.uniqueSort(oe.merge(this.get(),oe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),oe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return fe(e,"parentNode")},parentsUntil:function(e,t,n){return fe(e,"parentNode",n)},next:function(e){return i(e,"nextSibling")},prev:function(e){return i(e,"previousSibling")},nextAll:function(e){return fe(e,"nextSibling")},prevAll:function(e){return fe(e,"previousSibling")},nextUntil:function(e,t,n){return fe(e,"nextSibling",n)},prevUntil:function(e,t,n){return fe(e,"previousSibling",n)},siblings:function(e){return pe((e.parentNode||{}).firstChild,e)},children:function(e){return pe(e.firstChild)},contents:function(e){return e.contentDocument||oe.merge([],e.childNodes)}},function(e,t){oe.fn[e]=function(n,r){var i=oe.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=oe.filter(r,i)),this.length>1&&(be[e]||oe.uniqueSort(i),xe.test(e)&&i.reverse()),this.pushStack(i)}});var we=/\S+/g;oe.Callbacks=function(e){e="string"==typeof e?o(e):oe.extend({},e);var t,n,r,i,s=[],a=[],u=-1,l=function(){for(i=e.once,r=t=!0;a.length;u=-1)for(n=a.shift();++u<s.length;)s[u].apply(n[0],n[1])===!1&&e.stopOnFalse&&(u=s.length,n=!1);e.memory||(n=!1),t=!1,i&&(s=n?[]:"")},c={add:function(){return s&&(n&&!t&&(u=s.length-1,a.push(n)),function r(t){oe.each(t,function(t,n){oe.isFunction(n)?e.unique&&c.has(n)||s.push(n):n&&n.length&&"string"!==oe.type(n)&&r(n)})}(arguments),n&&!t&&l()),this},remove:function(){return oe.each(arguments,function(e,t){for(var n;(n=oe.inArray(t,s,n))>-1;)s.splice(n,1),n<=u&&u--}),this},has:function(e){return e?oe.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return i=a=[],s=n="",this},disabled:function(){return!s},lock:function(){return i=a=[],n||(s=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},oe.extend({Deferred:function(e){var t=[["resolve","done",oe.Callbacks("once memory"),"resolved"],["reject","fail",oe.Callbacks("once memory"),"rejected"],["notify","progress",oe.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return oe.Deferred(function(n){oe.each(t,function(t,o){var s=oe.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&oe.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?oe.extend(e,r):r}},i={};return r.pipe=r.then,oe.each(t,function(e,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=s.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,o=Q.call(arguments),s=o.length,a=1!==s||e&&oe.isFunction(e.promise)?s:0,u=1===a?e:oe.Deferred(),l=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?Q.call(arguments):i,r===t?u.notifyWith(n,r):--a||u.resolveWith(n,r)}};if(s>1)for(t=new Array(s),n=new Array(s),r=new Array(s);i<s;i++)o[i]&&oe.isFunction(o[i].promise)?o[i].promise().progress(l(i,n,t)).done(l(i,r,o)).fail(u.reject):--a;return a||u.resolveWith(r,o),u.promise()}});var Te;oe.fn.ready=function(e){return oe.ready.promise().done(e),this},oe.extend({isReady:!1,readyWait:1,holdReady:function(e){e?oe.readyWait++:oe.ready(!0)},ready:function(e){(e===!0?--oe.readyWait:oe.isReady)||(oe.isReady=!0,e!==!0&&--oe.readyWait>0||(Te.resolveWith(G,[oe]),oe.fn.triggerHandler&&(oe(G).triggerHandler("ready"),oe(G).off("ready"))))}}),oe.ready.promise=function(t){return Te||(Te=oe.Deferred(),"complete"===G.readyState||"loading"!==G.readyState&&!G.documentElement.doScroll?e.setTimeout(oe.ready):(G.addEventListener("DOMContentLoaded",s),e.addEventListener("load",s))),Te.promise(t)},oe.ready.promise();var Ce=function(e,t,n,r,i,o,s){var a=0,u=e.length,l=null==n;if("object"===oe.type(n)){i=!0;for(a in n)Ce(e,t,a,n[a],!0,o,s)}else if(void 0!==r&&(i=!0,oe.isFunction(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(oe(e),n)})),t))for(;a<u;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):u?t(e[0],n):o},ke=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};a.uid=1,a.prototype={register:function(e,t){var n=t||{};return e.nodeType?e[this.expando]=n:Object.defineProperty(e,this.expando,{value:n,writable:!0,configurable:!0}),e[this.expando]},cache:function(e){if(!ke(e))return{};var t=e[this.expando];return t||(t={},ke(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[t]=n;else for(r in t)i[r]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][t]},access:function(e,t,n){var r;return void 0===t||t&&"string"==typeof t&&void 0===n?(r=this.get(e,t),void 0!==r?r:this.get(e,oe.camelCase(t))):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r,i,o=e[this.expando];if(void 0!==o){if(void 0===t)this.register(e);else{oe.isArray(t)?r=t.concat(t.map(oe.camelCase)):(i=oe.camelCase(t),t in o?r=[t,i]:(r=i,r=r in o?[r]:r.match(we)||[])),n=r.length;for(;n--;)delete o[r[n]]}(void 0===t||oe.isEmptyObject(o))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!oe.isEmptyObject(t)}};var Ee=new a,Ne=new a,Se=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,De=/[A-Z]/g;oe.extend({hasData:function(e){return Ne.hasData(e)||Ee.hasData(e)},data:function(e,t,n){return Ne.access(e,t,n)},removeData:function(e,t){Ne.remove(e,t)},_data:function(e,t,n){return Ee.access(e,t,n)},_removeData:function(e,t){Ee.remove(e,t)}}),oe.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=Ne.get(o),1===o.nodeType&&!Ee.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(r=s[n].name,0===r.indexOf("data-")&&(r=oe.camelCase(r.slice(5)),u(o,r,i[r])));Ee.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Ne.set(this,e)}):Ce(this,function(t){var n,r;if(o&&void 0===t){if(n=Ne.get(o,e)||Ne.get(o,e.replace(De,"-$&").toLowerCase()),void 0!==n)return n;if(r=oe.camelCase(e),n=Ne.get(o,r),void 0!==n)return n;if(n=u(o,r,void 0),void 0!==n)return n}else r=oe.camelCase(e),this.each(function(){var n=Ne.get(this,r);Ne.set(this,r,t),e.indexOf("-")>-1&&void 0!==n&&Ne.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Ne.remove(this,e)})}}),oe.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Ee.get(e,t),n&&(!r||oe.isArray(n)?r=Ee.access(e,t,oe.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=oe.queue(e,t),r=n.length,i=n.shift(),o=oe._queueHooks(e,t),s=function(){oe.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Ee.get(e,n)||Ee.access(e,n,{empty:oe.Callbacks("once memory").add(function(){Ee.remove(e,[t+"queue",n])})})}}),oe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?oe.queue(this[0],e):void 0===t?this:this.each(function(){var n=oe.queue(this,e,t);oe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&oe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){oe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=oe.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)n=Ee.get(o[s],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var je=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ae=new RegExp("^(?:([+-])=|)("+je+")([a-z%]*)$","i"),Le=["Top","Right","Bottom","Left"],qe=function(e,t){return e=t||e,"none"===oe.css(e,"display")||!oe.contains(e.ownerDocument,e)},He=/^(?:checkbox|radio)$/i,Oe=/<([\w:-]+)/,Fe=/^$|\/(?:java|ecma)script/i,Pe={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Pe.optgroup=Pe.option,Pe.tbody=Pe.tfoot=Pe.colgroup=Pe.caption=Pe.thead,Pe.th=Pe.td;var Re=/<|&#?\w+;/;!function(){var e=G.createDocumentFragment(),t=e.appendChild(G.createElement("div")),n=G.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),re.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",re.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Me=/^key/,We=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ie=/^([^.]*)(?:\.(.+)|)/;oe.event={global:{},add:function(e,t,n,r,i){var o,s,a,u,l,c,f,p,d,h,g,m=Ee.get(e);if(m)for(n.handler&&(o=n,n=o.handler,i=o.selector),n.guid||(n.guid=oe.guid++),(u=m.events)||(u=m.events={}),(s=m.handle)||(s=m.handle=function(t){return"undefined"!=typeof oe&&oe.event.triggered!==t.type?oe.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(we)||[""],l=t.length;l--;)a=Ie.exec(t[l])||[],d=g=a[1],h=(a[2]||"").split(".").sort(),d&&(f=oe.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=oe.event.special[d]||{},c=oe.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&oe.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||(p=u[d]=[],p.delegateCount=0,f.setup&&f.setup.call(e,r,h,s)!==!1||e.addEventListener&&e.addEventListener(d,s)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),oe.event.global[d]=!0)},remove:function(e,t,n,r,i){var o,s,a,u,l,c,f,p,d,h,g,m=Ee.hasData(e)&&Ee.get(e);if(m&&(u=m.events)){for(t=(t||"").match(we)||[""],l=t.length;l--;)if(a=Ie.exec(t[l])||[],d=g=a[1],h=(a[2]||"").split(".").sort(),d){for(f=oe.event.special[d]||{},d=(r?f.delegateType:f.bindType)||d,p=u[d]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));s&&!p.length&&(f.teardown&&f.teardown.call(e,h,m.handle)!==!1||oe.removeEvent(e,d,m.handle),delete u[d])}else for(d in u)oe.event.remove(e,d+t[l],n,r,!0);oe.isEmptyObject(u)&&Ee.remove(e,"handle events")}},dispatch:function(e){e=oe.event.fix(e);var t,n,r,i,o,s=[],a=Q.call(arguments),u=(Ee.get(this,"events")||{})[e.type]||[],l=oe.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,e)!==!1){for(s=oe.event.handlers.call(this,e,u),t=0;(i=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(o.namespace)||(e.handleObj=o,e.data=o.data,r=((oe.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a),void 0!==r&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,s=[],a=t.delegateCount,u=e.target;if(a&&u.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||"click"!==e.type)){for(r=[],n=0;n<a;n++)o=t[n],i=o.selector+" ",void 0===r[i]&&(r[i]=o.needsContext?oe(i,this).index(u)>-1:oe.find(i,this,null,[u]).length),r[i]&&r.push(o);r.length&&s.push({elem:u,handlers:r})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,o=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||G,r=n.documentElement,i=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},fix:function(e){if(e[oe.expando])return e;var t,n,r,i=e.type,o=e,s=this.fixHooks[i];for(s||(this.fixHooks[i]=s=We.test(i)?this.mouseHooks:Me.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new oe.Event(o),t=r.length;t--;)n=r[t],e[n]=o[n];return e.target||(e.target=G),3===e.target.nodeType&&(e.target=e.target.parentNode),s.filter?s.filter(e,o):e},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==g()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===g()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&oe.nodeName(this,"input"))return this.click(),!1},_default:function(e){return oe.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},oe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},oe.Event=function(e,t){return this instanceof oe.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?d:h):this.type=e,t&&oe.extend(this,t),this.timeStamp=e&&e.timeStamp||oe.now(),void(this[oe.expando]=!0)):new oe.Event(e,t)},oe.Event.prototype={constructor:oe.Event,isDefaultPrevented:h,isPropagationStopped:h,isImmediatePropagationStopped:h,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=d,e&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=d,e&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=d,e&&e.stopImmediatePropagation(),this.stopPropagation()}},oe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){oe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||oe.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),oe.fn.extend({on:function(e,t,n,r){return m(this,e,t,n,r)},one:function(e,t,n,r){return m(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,oe(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return t!==!1&&"function"!=typeof t||(n=t,t=void 0),n===!1&&(n=h),this.each(function(){oe.event.remove(this,e,n,t)})}});var $e=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Be=/<script|<style|<link/i,_e=/checked\s*(?:[^=]|=\s*.checked.)/i,Xe=/^true\/(.*)/,ze=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;oe.extend({htmlPrefilter:function(e){return e.replace($e,"<$1></$2>")},clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),u=oe.contains(e.ownerDocument,e);if(!(re.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||oe.isXMLDoc(e)))for(s=c(a),o=c(e),r=0,i=o.length;r<i;r++)w(o[r],s[r]);if(t)if(n)for(o=o||c(e),s=s||c(a),r=0,i=o.length;r<i;r++)b(o[r],s[r]);else b(e,a);return s=c(a,"script"),s.length>0&&f(s,!u&&c(e,"script")),a},cleanData:function(e){for(var t,n,r,i=oe.event.special,o=0;void 0!==(n=e[o]);o++)if(ke(n)){if(t=n[Ee.expando]){if(t.events)for(r in t.events)i[r]?oe.event.remove(n,r):oe.removeEvent(n,r,t.handle);n[Ee.expando]=void 0}n[Ne.expando]&&(n[Ne.expando]=void 0)}}}),oe.fn.extend({domManip:T,detach:function(e){return C(this,e,!0)},remove:function(e){return C(this,e)},text:function(e){return Ce(this,function(e){return void 0===e?oe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return T(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=v(this,e);t.appendChild(e)}})},prepend:function(){return T(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=v(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return T(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return T(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(oe.cleanData(c(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return oe.clone(this,e,t)})},html:function(e){return Ce(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Be.test(e)&&!Pe[(Oe.exec(e)||["",""])[1].toLowerCase()]){e=oe.htmlPrefilter(e);try{for(;n<r;n++)t=this[n]||{},1===t.nodeType&&(oe.cleanData(c(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return T(this,arguments,function(t){var n=this.parentNode;oe.inArray(this,e)<0&&(oe.cleanData(c(this)),n&&n.replaceChild(t,this))},e)}}),oe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){oe.fn[e]=function(e){for(var n,r=[],i=oe(e),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),oe(i[s])[t](n),K.apply(r,n.get());return this.pushStack(r)}});var Ue,Ve={HTML:"block",BODY:"block"},Ye=/^margin/,Ge=new RegExp("^("+je+")(?!px)[a-z%]+$","i"),Qe=function(t){var n=t.ownerDocument.defaultView;return n.opener||(n=e),n.getComputedStyle(t)},Je=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i},Ke=G.documentElement;!function(){function t(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Ke.appendChild(s);var t=e.getComputedStyle(a);n="1%"!==t.top,o="2px"===t.marginLeft,r="4px"===t.width,a.style.marginRight="50%",i="4px"===t.marginRight,Ke.removeChild(s)}var n,r,i,o,s=G.createElement("div"),a=G.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",re.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),oe.extend(re,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return null==r&&t(),r},pixelMarginRight:function(){return null==r&&t(),i},reliableMarginLeft:function(){return null==r&&t(),o},reliableMarginRight:function(){var t,n=a.appendChild(G.createElement("div"));return n.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",a.style.width="1px",Ke.appendChild(s),t=!parseFloat(e.getComputedStyle(n).marginRight),Ke.removeChild(s),a.removeChild(n),t}}))}();var Ze=/^(none|table(?!-c[ea]).+)/,et={position:"absolute",visibility:"hidden",display:"block"},tt={letterSpacing:"0",fontWeight:"400"},nt=["Webkit","O","Moz","ms"],rt=G.createElement("div").style;oe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=N(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=oe.camelCase(t),u=e.style;return t=oe.cssProps[a]||(oe.cssProps[a]=D(a)||a),s=oe.cssHooks[t]||oe.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:u[t]:(o=typeof n,"string"===o&&(i=Ae.exec(n))&&i[1]&&(n=l(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(oe.cssNumber[a]?"":"px")),re.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(u[t]=n)),void 0)}},css:function(e,t,n,r){var i,o,s,a=oe.camelCase(t);return t=oe.cssProps[a]||(oe.cssProps[a]=D(a)||a),s=oe.cssHooks[t]||oe.cssHooks[a],s&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=N(e,t,r)),"normal"===i&&t in tt&&(i=tt[t]),""===n||n?(o=parseFloat(i),n===!0||isFinite(o)?o||0:i):i}}),oe.each(["height","width"],function(e,t){oe.cssHooks[t]={get:function(e,n,r){if(n)return Ze.test(oe.css(e,"display"))&&0===e.offsetWidth?Je(e,et,function(){return L(e,t,r)}):L(e,t,r)},set:function(e,n,r){var i,o=r&&Qe(e),s=r&&A(e,t,r,"border-box"===oe.css(e,"boxSizing",!1,o),o);return s&&(i=Ae.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=oe.css(e,t)),j(e,n,s)}}}),oe.cssHooks.marginLeft=S(re.reliableMarginLeft,function(e,t){if(t)return(parseFloat(N(e,"marginLeft"))||e.getBoundingClientRect().left-Je(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),oe.cssHooks.marginRight=S(re.reliableMarginRight,function(e,t){if(t)return Je(e,{display:"inline-block"},N,[e,"marginRight"])}),oe.each({margin:"",padding:"",border:"Width"},function(e,t){oe.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+Le[r]+t]=o[r]||o[r-2]||o[0];return i}},Ye.test(e)||(oe.cssHooks[e+t].set=j)}),oe.fn.extend({css:function(e,t){return Ce(this,function(e,t,n){var r,i,o={},s=0;if(oe.isArray(t)){for(r=Qe(e),i=t.length;s<i;s++)o[t[s]]=oe.css(e,t[s],!1,r);return o}return void 0!==n?oe.style(e,t,n):oe.css(e,t)},e,t,arguments.length>1)},show:function(){return q(this,!0)},hide:function(){return q(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){qe(this)?oe(this).show():oe(this).hide()})}}),oe.Tween=H,H.prototype={constructor:H,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||oe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(oe.cssNumber[n]?"":"px")},cur:function(){var e=H.propHooks[this.prop];return e&&e.get?e.get(this):H.propHooks._default.get(this)},run:function(e){var t,n=H.propHooks[this.prop];return this.options.duration?this.pos=t=oe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):H.propHooks._default.set(this),this}},H.prototype.init.prototype=H.prototype,H.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=oe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){oe.fx.step[e.prop]?oe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[oe.cssProps[e.prop]]&&!oe.cssHooks[e.prop]?e.elem[e.prop]=e.now:oe.style(e.elem,e.prop,e.now+e.unit)}}},H.propHooks.scrollTop=H.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},oe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},oe.fx=H.prototype.init,oe.fx.step={};var it,ot,st=/^(?:toggle|show|hide)$/,at=/queueHooks$/;oe.Animation=oe.extend(W,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return l(n.elem,e,Ae.exec(t),n),n}]},tweener:function(e,t){oe.isFunction(e)?(t=e,e=["*"]):e=e.match(we);for(var n,r=0,i=e.length;r<i;r++)n=e[r],W.tweeners[n]=W.tweeners[n]||[],W.tweeners[n].unshift(t)},prefilters:[R],prefilter:function(e,t){t?W.prefilters.unshift(e):W.prefilters.push(e)}}),oe.speed=function(e,t,n){var r=e&&"object"==typeof e?oe.extend({},e):{complete:n||!n&&t||oe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!oe.isFunction(t)&&t};return r.duration=oe.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in oe.fx.speeds?oe.fx.speeds[r.duration]:oe.fx.speeds._default,null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){oe.isFunction(r.old)&&r.old.call(this),r.queue&&oe.dequeue(this,r.queue)},r},oe.fn.extend({fadeTo:function(e,t,n,r){return this.filter(qe).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=oe.isEmptyObject(e),o=oe.speed(t,n,r),s=function(){var t=W(this,oe.extend({},e),o);(i||Ee.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=oe.timers,s=Ee.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&at.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||oe.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=Ee.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=oe.timers,s=r?r.length:0;for(n.finish=!0,oe.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),oe.each(["toggle","show","hide"],function(e,t){var n=oe.fn[t];oe.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(F(t,!0),e,r,i)}}),oe.each({slideDown:F("show"),slideUp:F("hide"),slideToggle:F("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){oe.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),oe.timers=[],oe.fx.tick=function(){var e,t=0,n=oe.timers;for(it=oe.now();t<n.length;t++)e=n[t],e()||n[t]!==e||n.splice(t--,1);n.length||oe.fx.stop(),it=void 0},oe.fx.timer=function(e){oe.timers.push(e),e()?oe.fx.start():oe.timers.pop()},oe.fx.interval=13,oe.fx.start=function(){ot||(ot=e.setInterval(oe.fx.tick,oe.fx.interval));
},oe.fx.stop=function(){e.clearInterval(ot),ot=null},oe.fx.speeds={slow:600,fast:200,_default:400},oe.fn.delay=function(t,n){return t=oe.fx?oe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=G.createElement("input"),t=G.createElement("select"),n=t.appendChild(G.createElement("option"));e.type="checkbox",re.checkOn=""!==e.value,re.optSelected=n.selected,t.disabled=!0,re.optDisabled=!n.disabled,e=G.createElement("input"),e.value="t",e.type="radio",re.radioValue="t"===e.value}();var ut,lt=oe.expr.attrHandle;oe.fn.extend({attr:function(e,t){return Ce(this,oe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){oe.removeAttr(this,e)})}}),oe.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?oe.prop(e,t,n):(1===o&&oe.isXMLDoc(e)||(t=t.toLowerCase(),i=oe.attrHooks[t]||(oe.expr.match.bool.test(t)?ut:void 0)),void 0!==n?null===n?void oe.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=oe.find.attr(e,t),null==r?void 0:r))},attrHooks:{type:{set:function(e,t){if(!re.radioValue&&"radio"===t&&oe.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(we);if(o&&1===e.nodeType)for(;n=o[i++];)r=oe.propFix[n]||n,oe.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)}}),ut={set:function(e,t,n){return t===!1?oe.removeAttr(e,n):e.setAttribute(n,n),n}},oe.each(oe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=lt[t]||oe.find.attr;lt[t]=function(e,t,r){var i,o;return r||(o=lt[t],lt[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,lt[t]=o),i}});var ct=/^(?:input|select|textarea|button)$/i,ft=/^(?:a|area)$/i;oe.fn.extend({prop:function(e,t){return Ce(this,oe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[oe.propFix[e]||e]})}}),oe.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&oe.isXMLDoc(e)||(t=oe.propFix[t]||t,i=oe.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=oe.find.attr(e,"tabindex");return t?parseInt(t,10):ct.test(e.nodeName)||ft.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),re.optSelected||(oe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null}}),oe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){oe.propFix[this.toLowerCase()]=this});var pt=/[\t\r\n\f]/g;oe.fn.extend({addClass:function(e){var t,n,r,i,o,s,a,u=0;if(oe.isFunction(e))return this.each(function(t){oe(this).addClass(e.call(this,t,I(this)))});if("string"==typeof e&&e)for(t=e.match(we)||[];n=this[u++];)if(i=I(n),r=1===n.nodeType&&(" "+i+" ").replace(pt," ")){for(s=0;o=t[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");a=oe.trim(r),i!==a&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,i,o,s,a,u=0;if(oe.isFunction(e))return this.each(function(t){oe(this).removeClass(e.call(this,t,I(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(we)||[];n=this[u++];)if(i=I(n),r=1===n.nodeType&&(" "+i+" ").replace(pt," ")){for(s=0;o=t[s++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");a=oe.trim(r),i!==a&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):oe.isFunction(e)?this.each(function(n){oe(this).toggleClass(e.call(this,n,I(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=oe(this),o=e.match(we)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||(t=I(this),t&&Ee.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||e===!1?"":Ee.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+I(n)+" ").replace(pt," ").indexOf(t)>-1)return!0;return!1}});var dt=/\r/g;oe.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=oe.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,oe(this).val()):e,null==i?i="":"number"==typeof i?i+="":oe.isArray(i)&&(i=oe.map(i,function(e){return null==e?"":e+""})),t=oe.valHooks[this.type]||oe.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=oe.valHooks[i.type]||oe.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(dt,""):null==n?"":n)}}}),oe.extend({valHooks:{option:{get:function(e){return oe.trim(e.value)}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||i<0,s=o?null:[],a=o?i+1:r.length,u=i<0?a:o?i:0;u<a;u++)if(n=r[u],(n.selected||u===i)&&(re.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!oe.nodeName(n.parentNode,"optgroup"))){if(t=oe(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=oe.makeArray(t),s=i.length;s--;)r=i[s],(r.selected=oe.inArray(oe.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),oe.each(["radio","checkbox"],function(){oe.valHooks[this]={set:function(e,t){if(oe.isArray(t))return e.checked=oe.inArray(oe(e).val(),t)>-1}},re.checkOn||(oe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var ht=/^(?:focusinfocus|focusoutblur)$/;oe.extend(oe.event,{trigger:function(t,n,r,i){var o,s,a,u,l,c,f,p=[r||G],d=ne.call(t,"type")?t.type:t,h=ne.call(t,"namespace")?t.namespace.split("."):[];if(s=a=r=r||G,3!==r.nodeType&&8!==r.nodeType&&!ht.test(d+oe.event.triggered)&&(d.indexOf(".")>-1&&(h=d.split("."),d=h.shift(),h.sort()),l=d.indexOf(":")<0&&"on"+d,t=t[oe.expando]?t:new oe.Event(d,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:oe.makeArray(n,[t]),f=oe.event.special[d]||{},i||!f.trigger||f.trigger.apply(r,n)!==!1)){if(!i&&!f.noBubble&&!oe.isWindow(r)){for(u=f.delegateType||d,ht.test(u+d)||(s=s.parentNode);s;s=s.parentNode)p.push(s),a=s;a===(r.ownerDocument||G)&&p.push(a.defaultView||a.parentWindow||e)}for(o=0;(s=p[o++])&&!t.isPropagationStopped();)t.type=o>1?u:f.bindType||d,c=(Ee.get(s,"events")||{})[t.type]&&Ee.get(s,"handle"),c&&c.apply(s,n),c=l&&s[l],c&&c.apply&&ke(s)&&(t.result=c.apply(s,n),t.result===!1&&t.preventDefault());return t.type=d,i||t.isDefaultPrevented()||f._default&&f._default.apply(p.pop(),n)!==!1||!ke(r)||l&&oe.isFunction(r[d])&&!oe.isWindow(r)&&(a=r[l],a&&(r[l]=null),oe.event.triggered=d,r[d](),oe.event.triggered=void 0,a&&(r[l]=a)),t.result}},simulate:function(e,t,n){var r=oe.extend(new oe.Event,n,{type:e,isSimulated:!0});oe.event.trigger(r,null,t),r.isDefaultPrevented()&&n.preventDefault()}}),oe.fn.extend({trigger:function(e,t){return this.each(function(){oe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return oe.event.trigger(e,t,n,!0)}}),oe.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){oe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),oe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),re.focusin="onfocusin"in e,re.focusin||oe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){oe.event.simulate(t,e.target,oe.event.fix(e))};oe.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=Ee.access(r,t);i||r.addEventListener(e,n,!0),Ee.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Ee.access(r,t)-1;i?Ee.access(r,t,i):(r.removeEventListener(e,n,!0),Ee.remove(r,t))}}});var gt=e.location,mt=oe.now(),vt=/\?/;oe.parseJSON=function(e){return JSON.parse(e+"")},oe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(r){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||oe.error("Invalid XML: "+t),n};var yt=/#.*$/,xt=/([?&])_=[^&]*/,bt=/^(.*?):[ \t]*([^\r\n]*)$/gm,wt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Tt=/^(?:GET|HEAD)$/,Ct=/^\/\//,kt={},Et={},Nt="*/".concat("*"),St=G.createElement("a");St.href=gt.href,oe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:gt.href,type:"GET",isLocal:wt.test(gt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Nt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":oe.parseJSON,"text xml":oe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?_(_(e,oe.ajaxSettings),t):_(oe.ajaxSettings,e)},ajaxPrefilter:$(kt),ajaxTransport:$(Et),ajax:function(t,n){function r(t,n,r,a){var l,f,y,x,w,C=n;2!==b&&(b=2,u&&e.clearTimeout(u),i=void 0,s=a||"",T.readyState=t>0?4:0,l=t>=200&&t<300||304===t,r&&(x=X(p,T,r)),x=z(p,x,T,l),l?(p.ifModified&&(w=T.getResponseHeader("Last-Modified"),w&&(oe.lastModified[o]=w),w=T.getResponseHeader("etag"),w&&(oe.etag[o]=w)),204===t||"HEAD"===p.type?C="nocontent":304===t?C="notmodified":(C=x.state,f=x.data,y=x.error,l=!y)):(y=C,!t&&C||(C="error",t<0&&(t=0))),T.status=t,T.statusText=(n||C)+"",l?g.resolveWith(d,[f,C,T]):g.rejectWith(d,[T,C,y]),T.statusCode(v),v=void 0,c&&h.trigger(l?"ajaxSuccess":"ajaxError",[T,p,l?f:y]),m.fireWith(d,[T,C]),c&&(h.trigger("ajaxComplete",[T,p]),--oe.active||oe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,s,a,u,l,c,f,p=oe.ajaxSetup({},n),d=p.context||p,h=p.context&&(d.nodeType||d.jquery)?oe(d):oe.event,g=oe.Deferred(),m=oe.Callbacks("once memory"),v=p.statusCode||{},y={},x={},b=0,w="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!a)for(a={};t=bt.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=x[n]=x[n]||e,y[e]=t),this},overrideMimeType:function(e){return b||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(b<2)for(t in e)v[t]=[v[t],e[t]];else T.always(e[T.status]);return this},abort:function(e){var t=e||w;return i&&i.abort(t),r(0,t),this}};if(g.promise(T).complete=m.add,T.success=T.done,T.error=T.fail,p.url=((t||p.url||gt.href)+"").replace(yt,"").replace(Ct,gt.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=oe.trim(p.dataType||"*").toLowerCase().match(we)||[""],null==p.crossDomain){l=G.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=St.protocol+"//"+St.host!=l.protocol+"//"+l.host}catch(C){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=oe.param(p.data,p.traditional)),B(kt,p,n,T),2===b)return T;c=oe.event&&p.global,c&&0===oe.active++&&oe.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Tt.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(vt.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=xt.test(o)?o.replace(xt,"$1_="+mt++):o+(vt.test(o)?"&":"?")+"_="+mt++)),p.ifModified&&(oe.lastModified[o]&&T.setRequestHeader("If-Modified-Since",oe.lastModified[o]),oe.etag[o]&&T.setRequestHeader("If-None-Match",oe.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&T.setRequestHeader("Content-Type",p.contentType),T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Nt+"; q=0.01":""):p.accepts["*"]);for(f in p.headers)T.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(p.beforeSend.call(d,T,p)===!1||2===b))return T.abort();w="abort";for(f in{success:1,error:1,complete:1})T[f](p[f]);if(i=B(Et,p,n,T)){if(T.readyState=1,c&&h.trigger("ajaxSend",[T,p]),2===b)return T;p.async&&p.timeout>0&&(u=e.setTimeout(function(){T.abort("timeout")},p.timeout));try{b=1,i.send(y,r)}catch(C){if(!(b<2))throw C;r(-1,C)}}else r(-1,"No Transport");return T},getJSON:function(e,t,n){return oe.get(e,t,n,"json")},getScript:function(e,t){return oe.get(e,void 0,t,"script")}}),oe.each(["get","post"],function(e,t){oe[t]=function(e,n,r,i){return oe.isFunction(n)&&(i=i||r,r=n,n=void 0),oe.ajax(oe.extend({url:e,type:t,dataType:i,data:n,success:r},oe.isPlainObject(e)&&e))}}),oe._evalUrl=function(e){return oe.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},oe.fn.extend({wrapAll:function(e){var t;return oe.isFunction(e)?this.each(function(t){oe(this).wrapAll(e.call(this,t))}):(this[0]&&(t=oe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return oe.isFunction(e)?this.each(function(t){oe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=oe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=oe.isFunction(e);return this.each(function(n){oe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){oe.nodeName(this,"body")||oe(this).replaceWith(this.childNodes)}).end()}}),oe.expr.filters.hidden=function(e){return!oe.expr.filters.visible(e)},oe.expr.filters.visible=function(e){return e.offsetWidth>0||e.offsetHeight>0||e.getClientRects().length>0};var Dt=/%20/g,jt=/\[\]$/,At=/\r?\n/g,Lt=/^(?:submit|button|image|reset|file)$/i,qt=/^(?:input|select|textarea|keygen)/i;oe.param=function(e,t){var n,r=[],i=function(e,t){t=oe.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=oe.ajaxSettings&&oe.ajaxSettings.traditional),oe.isArray(e)||e.jquery&&!oe.isPlainObject(e))oe.each(e,function(){i(this.name,this.value)});else for(n in e)U(n,e[n],t,i);return r.join("&").replace(Dt,"+")},oe.fn.extend({serialize:function(){return oe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=oe.prop(this,"elements");return e?oe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!oe(this).is(":disabled")&&qt.test(this.nodeName)&&!Lt.test(e)&&(this.checked||!He.test(e))}).map(function(e,t){var n=oe(this).val();return null==n?null:oe.isArray(n)?oe.map(n,function(e){return{name:t.name,value:e.replace(At,"\r\n")}}):{name:t.name,value:n.replace(At,"\r\n")}}).get()}}),oe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(t){}};var Ht={0:200,1223:204},Ot=oe.ajaxSettings.xhr();re.cors=!!Ot&&"withCredentials"in Ot,re.ajax=Ot=!!Ot,oe.ajaxTransport(function(t){var n,r;if(re.cors||Ot&&!t.crossDomain)return{send:function(i,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(s in i)a.setRequestHeader(s,i[s]);n=function(e){return function(){n&&(n=r=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Ht[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),r=a.onerror=n("error"),void 0!==a.onabort?a.onabort=r:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{a.send(t.hasContent&&t.data||null)}catch(u){if(n)throw u}},abort:function(){n&&n()}}}),oe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return oe.globalEval(e),e}}}),oe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),oe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=oe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),G.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Ft=[],Pt=/(=)\?(?=&|$)|\?\?/;oe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Ft.pop()||oe.expando+"_"+mt++;return this[e]=!0,e}}),oe.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,s,a=t.jsonp!==!1&&(Pt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Pt.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=oe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Pt,"$1"+i):t.jsonp!==!1&&(t.url+=(vt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||oe.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){s=arguments},r.always(function(){void 0===o?oe(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Ft.push(i)),s&&oe.isFunction(o)&&o(s[0]),s=o=void 0}),"script"}),re.createHTMLDocument=function(){var e=G.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),oe.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||(re.createHTMLDocument?G.implementation.createHTMLDocument(""):G);var r=he.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=p([e],t,i),i&&i.length&&oe(i).remove(),oe.merge([],r.childNodes))};var Rt=oe.fn.load;oe.fn.load=function(e,t,n){if("string"!=typeof e&&Rt)return Rt.apply(this,arguments);var r,i,o,s=this,a=e.indexOf(" ");return a>-1&&(r=oe.trim(e.slice(a)),e=e.slice(0,a)),oe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&oe.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?oe("<div>").append(oe.parseHTML(e)).find(r):e)}).always(n&&function(e,t){s.each(function(){n.apply(s,o||[e.responseText,t,e])})}),this},oe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){oe.fn[t]=function(e){return this.on(t,e)}}),oe.expr.filters.animated=function(e){return oe.grep(oe.timers,function(t){return e===t.elem}).length},oe.offset={setOffset:function(e,t,n){var r,i,o,s,a,u,l,c=oe.css(e,"position"),f=oe(e),p={};"static"===c&&(e.style.position="relative"),a=f.offset(),o=oe.css(e,"top"),u=oe.css(e,"left"),l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1,l?(r=f.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),oe.isFunction(t)&&(t=t.call(e,n,oe.extend({},a))),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+i),"using"in t?t.using.call(e,p):f.css(p)}},oe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){oe.offset.setOffset(this,e,t)});var t,n,r=this[0],i={top:0,left:0},o=r&&r.ownerDocument;if(o)return t=o.documentElement,oe.contains(t,r)?(i=r.getBoundingClientRect(),n=V(o),{top:i.top+n.pageYOffset-t.clientTop,left:i.left+n.pageXOffset-t.clientLeft}):i},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===oe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),oe.nodeName(e[0],"html")||(r=e.offset()),r.top+=oe.css(e[0],"borderTopWidth",!0)-e.scrollTop(),r.left+=oe.css(e[0],"borderLeftWidth",!0)-e.scrollLeft()),{top:t.top-r.top-oe.css(n,"marginTop",!0),left:t.left-r.left-oe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===oe.css(e,"position");)e=e.offsetParent;return e||Ke})}}),oe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;oe.fn[e]=function(r){return Ce(this,function(e,r,i){var o=V(e);return void 0===i?o?o[t]:e[r]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i)},e,r,arguments.length)}}),oe.each(["top","left"],function(e,t){oe.cssHooks[t]=S(re.pixelPosition,function(e,n){if(n)return n=N(e,t),Ge.test(n)?oe(e).position()[t]+"px":n})}),oe.each({Height:"height",Width:"width"},function(e,t){oe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){oe.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),s=n||(r===!0||i===!0?"margin":"border");return Ce(this,function(t,n,r){var i;return oe.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?oe.css(t,n,s):oe.style(t,n,r,s)},t,o?r:void 0,o,null)}})}),oe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},size:function(){return this.length}}),oe.fn.andSelf=oe.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return oe});var Mt=e.jQuery,Wt=e.$;return oe.noConflict=function(t){return e.$===oe&&(e.$=Wt),t&&e.jQuery===oe&&(e.jQuery=Mt),oe},t||(e.jQuery=e.$=oe),oe});
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){"use strict";var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>2)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3")}(jQuery),+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in e)if(void 0!==t.style[i])return{end:e[i]};return!1}t.fn.emulateTransitionEnd=function(e){var i=!1,o=this;t(this).one("bsTransitionEnd",function(){i=!0});var n=function(){i||t(o).trigger(t.support.transition.end)};return setTimeout(n,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),n=i.data("bs.alert");n||i.data("bs.alert",n=new o(this)),"string"==typeof e&&n[e].call(i)})}var i='[data-dismiss="alert"]',o=function(e){t(e).on("click",i,this.close)};o.VERSION="3.3.6",o.TRANSITION_DURATION=150,o.prototype.close=function(e){function i(){a.detach().trigger("closed.bs.alert").remove()}var n=t(this),s=n.attr("data-target");s||(s=n.attr("href"),s=s&&s.replace(/.*(?=#[^\s]*$)/,""));var a=t(s);e&&e.preventDefault(),a.length||(a=n.closest(".alert")),a.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(a.removeClass("in"),t.support.transition&&a.hasClass("fade")?a.one("bsTransitionEnd",i).emulateTransitionEnd(o.TRANSITION_DURATION):i())};var n=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=o,t.fn.alert.noConflict=function(){return t.fn.alert=n,this},t(document).on("click.bs.alert.data-api",i,o.prototype.close)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.button"),s="object"==typeof e&&e;n||o.data("bs.button",n=new i(this,s)),"toggle"==e?n.toggle():e&&n.setState(e)})}var i=function(e,o){this.$element=t(e),this.options=t.extend({},i.DEFAULTS,o),this.isLoading=!1};i.VERSION="3.3.6",i.DEFAULTS={loadingText:"loading..."},i.prototype.setState=function(e){var i="disabled",o=this.$element,n=o.is("input")?"val":"html",s=o.data();e+="Text",null==s.resetText&&o.data("resetText",o[n]()),setTimeout(t.proxy(function(){o[n](null==s[e]?this.options[e]:s[e]),"loadingText"==e?(this.isLoading=!0,o.addClass(i).attr(i,i)):this.isLoading&&(this.isLoading=!1,o.removeClass(i).removeAttr(i))},this),0)},i.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var i=this.$element.find("input");"radio"==i.prop("type")?(i.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==i.prop("type")&&(i.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),i.prop("checked",this.$element.hasClass("active")),t&&i.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var o=t.fn.button;t.fn.button=e,t.fn.button.Constructor=i,t.fn.button.noConflict=function(){return t.fn.button=o,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(i){var o=t(i.target);o.hasClass("btn")||(o=o.closest(".btn")),e.call(o,"toggle"),t(i.target).is('input[type="radio"]')||t(i.target).is('input[type="checkbox"]')||i.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.carousel"),s=t.extend({},i.DEFAULTS,o.data(),"object"==typeof e&&e),a="string"==typeof e?e:s.slide;n||o.data("bs.carousel",n=new i(this,s)),"number"==typeof e?n.to(e):a?n[a]():s.interval&&n.pause().cycle()})}var i=function(e,i){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=i,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};i.VERSION="3.3.6",i.TRANSITION_DURATION=600,i.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},i.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},i.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},i.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},i.prototype.getItemForDirection=function(t,e){var i=this.getItemIndex(e),o="prev"==t&&0===i||"next"==t&&i==this.$items.length-1;if(o&&!this.options.wrap)return e;var n="prev"==t?-1:1,s=(i+n)%this.$items.length;return this.$items.eq(s)},i.prototype.to=function(t){var e=this,i=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):i==t?this.pause().cycle():this.slide(t>i?"next":"prev",this.$items.eq(t))},i.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},i.prototype.next=function(){if(!this.sliding)return this.slide("next")},i.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},i.prototype.slide=function(e,o){var n=this.$element.find(".item.active"),s=o||this.getItemForDirection(e,n),a=this.interval,r="next"==e?"left":"right",l=this;if(s.hasClass("active"))return this.sliding=!1;var h=s[0],d=t.Event("slide.bs.carousel",{relatedTarget:h,direction:r});if(this.$element.trigger(d),!d.isDefaultPrevented()){if(this.sliding=!0,a&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var p=t(this.$indicators.children()[this.getItemIndex(s)]);p&&p.addClass("active")}var c=t.Event("slid.bs.carousel",{relatedTarget:h,direction:r});return t.support.transition&&this.$element.hasClass("slide")?(s.addClass(e),s[0].offsetWidth,n.addClass(r),s.addClass(r),n.one("bsTransitionEnd",function(){s.removeClass([e,r].join(" ")).addClass("active"),n.removeClass(["active",r].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(c)},0)}).emulateTransitionEnd(i.TRANSITION_DURATION)):(n.removeClass("active"),s.addClass("active"),this.sliding=!1,this.$element.trigger(c)),a&&this.cycle(),this}};var o=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=i,t.fn.carousel.noConflict=function(){return t.fn.carousel=o,this};var n=function(i){var o,n=t(this),s=t(n.attr("data-target")||(o=n.attr("href"))&&o.replace(/.*(?=#[^\s]+$)/,""));if(s.hasClass("carousel")){var a=t.extend({},s.data(),n.data()),r=n.attr("data-slide-to");r&&(a.interval=!1),e.call(s,a),r&&s.data("bs.carousel").to(r),i.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",n).on("click.bs.carousel.data-api","[data-slide-to]",n),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var i=t(this);e.call(i,i.data())})})}(jQuery),+function(t){"use strict";function e(e){var i,o=e.attr("data-target")||(i=e.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,"");return t(o)}function i(e){return this.each(function(){var i=t(this),n=i.data("bs.collapse"),s=t.extend({},o.DEFAULTS,i.data(),"object"==typeof e&&e);!n&&s.toggle&&/show|hide/.test(e)&&(s.toggle=!1),n||i.data("bs.collapse",n=new o(this,s)),"string"==typeof e&&n[e]()})}var o=function(e,i){this.$element=t(e),this.options=t.extend({},o.DEFAULTS,i),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};o.VERSION="3.3.6",o.TRANSITION_DURATION=350,o.DEFAULTS={toggle:!0},o.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},o.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,n=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(n&&n.length&&(e=n.data("bs.collapse"),e&&e.transitioning))){var s=t.Event("show.bs.collapse");if(this.$element.trigger(s),!s.isDefaultPrevented()){n&&n.length&&(i.call(n,"hide"),e||n.data("bs.collapse",null));var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var r=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return r.call(this);var l=t.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",t.proxy(r,this)).emulateTransitionEnd(o.TRANSITION_DURATION)[a](this.$element[0][l])}}}},o.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var i=this.dimension();this.$element[i](this.$element[i]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var n=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return t.support.transition?void this.$element[i](0).one("bsTransitionEnd",t.proxy(n,this)).emulateTransitionEnd(o.TRANSITION_DURATION):n.call(this)}}},o.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},o.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(i,o){var n=t(o);this.addAriaAndCollapsedClass(e(n),n)},this)).end()},o.prototype.addAriaAndCollapsedClass=function(t,e){var i=t.hasClass("in");t.attr("aria-expanded",i),e.toggleClass("collapsed",!i).attr("aria-expanded",i)};var n=t.fn.collapse;t.fn.collapse=i,t.fn.collapse.Constructor=o,t.fn.collapse.noConflict=function(){return t.fn.collapse=n,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(o){var n=t(this);n.attr("data-target")||o.preventDefault();var s=e(n),a=s.data("bs.collapse"),r=a?"toggle":n.data();i.call(s,r)})}(jQuery),+function(t){"use strict";function e(e){var i=e.attr("data-target");i||(i=e.attr("href"),i=i&&/#[A-Za-z]/.test(i)&&i.replace(/.*(?=#[^\s]*$)/,""));var o=i&&t(i);return o&&o.length?o:e.parent()}function i(i){i&&3===i.which||(t(n).remove(),t(s).each(function(){var o=t(this),n=e(o),s={relatedTarget:this};n.hasClass("open")&&(i&&"click"==i.type&&/input|textarea/i.test(i.target.tagName)&&t.contains(n[0],i.target)||(n.trigger(i=t.Event("hide.bs.dropdown",s)),i.isDefaultPrevented()||(o.attr("aria-expanded","false"),n.removeClass("open").trigger(t.Event("hidden.bs.dropdown",s)))))}))}function o(e){return this.each(function(){var i=t(this),o=i.data("bs.dropdown");o||i.data("bs.dropdown",o=new a(this)),"string"==typeof e&&o[e].call(i)})}var n=".dropdown-backdrop",s='[data-toggle="dropdown"]',a=function(e){t(e).on("click.bs.dropdown",this.toggle)};a.VERSION="3.3.6",a.prototype.toggle=function(o){var n=t(this);if(!n.is(".disabled, :disabled")){var s=e(n),a=s.hasClass("open");if(i(),!a){"ontouchstart"in document.documentElement&&!s.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",i);var r={relatedTarget:this};if(s.trigger(o=t.Event("show.bs.dropdown",r)),o.isDefaultPrevented())return;n.trigger("focus").attr("aria-expanded","true"),s.toggleClass("open").trigger(t.Event("shown.bs.dropdown",r))}return!1}},a.prototype.keydown=function(i){if(/(38|40|27|32)/.test(i.which)&&!/input|textarea/i.test(i.target.tagName)){var o=t(this);if(i.preventDefault(),i.stopPropagation(),!o.is(".disabled, :disabled")){var n=e(o),a=n.hasClass("open");if(!a&&27!=i.which||a&&27==i.which)return 27==i.which&&n.find(s).trigger("focus"),o.trigger("click");var r=" li:not(.disabled):visible a",l=n.find(".dropdown-menu"+r);if(l.length){var h=l.index(i.target);38==i.which&&h>0&&h--,40==i.which&&h<l.length-1&&h++,~h||(h=0),l.eq(h).trigger("focus")}}}};var r=t.fn.dropdown;t.fn.dropdown=o,t.fn.dropdown.Constructor=a,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=r,this},t(document).on("click.bs.dropdown.data-api",i).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",s,a.prototype.toggle).on("keydown.bs.dropdown.data-api",s,a.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",a.prototype.keydown)}(jQuery),+function(t){"use strict";function e(e,o){return this.each(function(){var n=t(this),s=n.data("bs.modal"),a=t.extend({},i.DEFAULTS,n.data(),"object"==typeof e&&e);s||n.data("bs.modal",s=new i(this,a)),"string"==typeof e?s[e](o):a.show&&s.show(o)})}var i=function(e,i){this.options=i,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};i.VERSION="3.3.6",i.TRANSITION_DURATION=300,i.BACKDROP_TRANSITION_DURATION=150,i.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},i.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},i.prototype.show=function(e){var o=this,n=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(n),this.isShown||n.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){o.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(o.$element)&&(o.ignoreBackdropClick=!0)})}),this.backdrop(function(){var n=t.support.transition&&o.$element.hasClass("fade");o.$element.parent().length||o.$element.appendTo(o.$body),o.$element.show().scrollTop(0),o.adjustDialog(),n&&o.$element[0].offsetWidth,o.$element.addClass("in"),o.enforceFocus();var s=t.Event("shown.bs.modal",{relatedTarget:e});n?o.$dialog.one("bsTransitionEnd",function(){o.$element.trigger("focus").trigger(s)}).emulateTransitionEnd(i.TRANSITION_DURATION):o.$element.trigger("focus").trigger(s)}))},i.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(i.TRANSITION_DURATION):this.hideModal())},i.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},i.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},i.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},i.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},i.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},i.prototype.backdrop=function(e){var o=this,n=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var s=t.support.transition&&n;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+n).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),s&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;s?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){o.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):a()}else e&&e()},i.prototype.handleUpdate=function(){this.adjustDialog()},i.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},i.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},i.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},i.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},i.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},i.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var o=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=i,t.fn.modal.noConflict=function(){return t.fn.modal=o,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(i){var o=t(this),n=o.attr("href"),s=t(o.attr("data-target")||n&&n.replace(/.*(?=#[^\s]+$)/,"")),a=s.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(n)&&n},s.data(),o.data());o.is("a")&&i.preventDefault(),s.one("show.bs.modal",function(t){t.isDefaultPrevented()||s.one("hidden.bs.modal",function(){o.is(":visible")&&o.trigger("focus")})}),e.call(s,a,this)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.tooltip"),s="object"==typeof e&&e;!n&&/destroy|hide/.test(e)||(n||o.data("bs.tooltip",n=new i(this,s)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};i.VERSION="3.3.6",i.TRANSITION_DURATION=150,i.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},i.prototype.init=function(e,i,o){if(this.enabled=!0,this.type=e,this.$element=t(i),this.options=this.getOptions(o),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var n=this.options.trigger.split(" "),s=n.length;s--;){var a=n[s];if("click"==a)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=a){var r="hover"==a?"mouseenter":"focusin",l="hover"==a?"mouseleave":"focusout";this.$element.on(r+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},i.prototype.getDelegateOptions=function(){var e={},i=this.getDefaults();return this._options&&t.each(this._options,function(t,o){i[t]!=o&&(e[t]=o)}),e},i.prototype.enter=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusin"==e.type?"focus":"hover"]=!0),i.tip().hasClass("in")||"in"==i.hoverState?void(i.hoverState="in"):(clearTimeout(i.timeout),i.hoverState="in",i.options.delay&&i.options.delay.show?void(i.timeout=setTimeout(function(){"in"==i.hoverState&&i.show()},i.options.delay.show)):i.show())},i.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},i.prototype.leave=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusout"==e.type?"focus":"hover"]=!1),!i.isInStateTrue())return clearTimeout(i.timeout),i.hoverState="out",i.options.delay&&i.options.delay.hide?void(i.timeout=setTimeout(function(){"out"==i.hoverState&&i.hide()},i.options.delay.hide)):i.hide()},i.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var o=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!o)return;var n=this,s=this.tip(),a=this.getUID(this.type);this.setContent(),s.attr("id",a),this.$element.attr("aria-describedby",a),this.options.animation&&s.addClass("fade");var r="function"==typeof this.options.placement?this.options.placement.call(this,s[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,h=l.test(r);h&&(r=r.replace(l,"")||"top"),s.detach().css({top:0,left:0,display:"block"}).addClass(r).data("bs."+this.type,this),this.options.container?s.appendTo(this.options.container):s.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var d=this.getPosition(),p=s[0].offsetWidth,c=s[0].offsetHeight;if(h){var f=r,u=this.getPosition(this.$viewport);r="bottom"==r&&d.bottom+c>u.bottom?"top":"top"==r&&d.top-c<u.top?"bottom":"right"==r&&d.right+p>u.width?"left":"left"==r&&d.left-p<u.left?"right":r,s.removeClass(f).addClass(r)}var g=this.getCalculatedOffset(r,d,p,c);this.applyPlacement(g,r);var m=function(){var t=n.hoverState;n.$element.trigger("shown.bs."+n.type),n.hoverState=null,"out"==t&&n.leave(n)};t.support.transition&&this.$tip.hasClass("fade")?s.one("bsTransitionEnd",m).emulateTransitionEnd(i.TRANSITION_DURATION):m()}},i.prototype.applyPlacement=function(e,i){var o=this.tip(),n=o[0].offsetWidth,s=o[0].offsetHeight,a=parseInt(o.css("margin-top"),10),r=parseInt(o.css("margin-left"),10);isNaN(a)&&(a=0),isNaN(r)&&(r=0),e.top+=a,e.left+=r,t.offset.setOffset(o[0],t.extend({using:function(t){o.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),o.addClass("in");var l=o[0].offsetWidth,h=o[0].offsetHeight;"top"==i&&h!=s&&(e.top=e.top+s-h);var d=this.getViewportAdjustedDelta(i,e,l,h);d.left?e.left+=d.left:e.top+=d.top;var p=/top|bottom/.test(i),c=p?2*d.left-n+l:2*d.top-s+h,f=p?"offsetWidth":"offsetHeight";o.offset(e),this.replaceArrow(c,o[0][f],p)},i.prototype.replaceArrow=function(t,e,i){this.arrow().css(i?"left":"top",50*(1-t/e)+"%").css(i?"top":"left","")},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},i.prototype.hide=function(e){function o(){"in"!=n.hoverState&&s.detach(),n.$element.removeAttr("aria-describedby").trigger("hidden.bs."+n.type),e&&e()}var n=this,s=t(this.$tip),a=t.Event("hide.bs."+this.type);if(this.$element.trigger(a),!a.isDefaultPrevented())return s.removeClass("in"),t.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",o).emulateTransitionEnd(i.TRANSITION_DURATION):o(),this.hoverState=null,this},i.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},i.prototype.hasContent=function(){return this.getTitle()},i.prototype.getPosition=function(e){e=e||this.$element;var i=e[0],o="BODY"==i.tagName,n=i.getBoundingClientRect();null==n.width&&(n=t.extend({},n,{width:n.right-n.left,height:n.bottom-n.top}));var s=o?{top:0,left:0}:e.offset(),a={scroll:o?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},r=o?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},n,a,r,s)},i.prototype.getCalculatedOffset=function(t,e,i,o){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-i/2}:"top"==t?{top:e.top-o,left:e.left+e.width/2-i/2}:"left"==t?{top:e.top+e.height/2-o/2,left:e.left-i}:{top:e.top+e.height/2-o/2,left:e.left+e.width}},i.prototype.getViewportAdjustedDelta=function(t,e,i,o){var n={top:0,left:0};if(!this.$viewport)return n;var s=this.options.viewport&&this.options.viewport.padding||0,a=this.getPosition(this.$viewport);if(/right|left/.test(t)){var r=e.top-s-a.scroll,l=e.top+s-a.scroll+o;r<a.top?n.top=a.top-r:l>a.top+a.height&&(n.top=a.top+a.height-l)}else{var h=e.left-s,d=e.left+s+i;h<a.left?n.left=a.left-h:d>a.right&&(n.left=a.left+a.width-d)}return n},i.prototype.getTitle=function(){var t,e=this.$element,i=this.options;return t=e.attr("data-original-title")||("function"==typeof i.title?i.title.call(e[0]):i.title)},i.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},i.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},i.prototype.enable=function(){this.enabled=!0},i.prototype.disable=function(){this.enabled=!1},i.prototype.toggleEnabled=function(){this.enabled=!this.enabled},i.prototype.toggle=function(e){var i=this;e&&(i=t(e.currentTarget).data("bs."+this.type),i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i))),e?(i.inState.click=!i.inState.click,i.isInStateTrue()?i.enter(i):i.leave(i)):i.tip().hasClass("in")?i.leave(i):i.enter(i)},i.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null})};var o=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=i,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=o,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.popover"),s="object"==typeof e&&e;!n&&/destroy|hide/.test(e)||(n||o.data("bs.popover",n=new i(this,s)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");i.VERSION="3.3.6",i.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),i.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),i.prototype.constructor=i,i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),i=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof i?"html":"append":"text"](i),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},i.prototype.hasContent=function(){return this.getTitle()||this.getContent()},i.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var o=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=i,t.fn.popover.noConflict=function(){return t.fn.popover=o,this}}(jQuery),+function(t){"use strict";function e(i,o){this.$body=t(document.body),this.$scrollElement=t(t(i).is(document.body)?window:i),this.options=t.extend({},e.DEFAULTS,o),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function i(i){return this.each(function(){var o=t(this),n=o.data("bs.scrollspy"),s="object"==typeof i&&i;n||o.data("bs.scrollspy",n=new e(this,s)),"string"==typeof i&&n[i]()})}e.VERSION="3.3.6",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,i="offset",o=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(i="position",o=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),n=e.data("target")||e.attr("href"),s=/^#./.test(n)&&t(n);return s&&s.length&&s.is(":visible")&&[[s[i]().top+o,n]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,i=this.getScrollHeight(),o=this.options.offset+i-this.$scrollElement.height(),n=this.offsets,s=this.targets,a=this.activeTarget;if(this.scrollHeight!=i&&this.refresh(),e>=o)return a!=(t=s[s.length-1])&&this.activate(t);if(a&&e<n[0])return this.activeTarget=null,this.clear();for(t=n.length;t--;)a!=s[t]&&e>=n[t]&&(void 0===n[t+1]||e<n[t+1])&&this.activate(s[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var i=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',o=t(i).parents("li").addClass("active");o.parent(".dropdown-menu").length&&(o=o.closest("li.dropdown").addClass("active")),
o.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var o=t.fn.scrollspy;t.fn.scrollspy=i,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=o,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);i.call(e,e.data())})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.tab");n||o.data("bs.tab",n=new i(this)),"string"==typeof e&&n[e]()})}var i=function(e){this.element=t(e)};i.VERSION="3.3.6",i.TRANSITION_DURATION=150,i.prototype.show=function(){var e=this.element,i=e.closest("ul:not(.dropdown-menu)"),o=e.data("target");if(o||(o=e.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var n=i.find(".active:last a"),s=t.Event("hide.bs.tab",{relatedTarget:e[0]}),a=t.Event("show.bs.tab",{relatedTarget:n[0]});if(n.trigger(s),e.trigger(a),!a.isDefaultPrevented()&&!s.isDefaultPrevented()){var r=t(o);this.activate(e.closest("li"),i),this.activate(r,r.parent(),function(){n.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:n[0]})})}}},i.prototype.activate=function(e,o,n){function s(){a.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),r?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),n&&n()}var a=o.find("> .active"),r=n&&t.support.transition&&(a.length&&a.hasClass("fade")||!!o.find("> .fade").length);a.length&&r?a.one("bsTransitionEnd",s).emulateTransitionEnd(i.TRANSITION_DURATION):s(),a.removeClass("in")};var o=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=i,t.fn.tab.noConflict=function(){return t.fn.tab=o,this};var n=function(i){i.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',n).on("click.bs.tab.data-api",'[data-toggle="pill"]',n)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.affix"),s="object"==typeof e&&e;n||o.data("bs.affix",n=new i(this,s)),"string"==typeof e&&n[e]()})}var i=function(e,o){this.options=t.extend({},i.DEFAULTS,o),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};i.VERSION="3.3.6",i.RESET="affix affix-top affix-bottom",i.DEFAULTS={offset:0,target:window},i.prototype.getState=function(t,e,i,o){var n=this.$target.scrollTop(),s=this.$element.offset(),a=this.$target.height();if(null!=i&&"top"==this.affixed)return n<i&&"top";if("bottom"==this.affixed)return null!=i?!(n+this.unpin<=s.top)&&"bottom":!(n+a<=t-o)&&"bottom";var r=null==this.affixed,l=r?n:s.top,h=r?a:e;return null!=i&&n<=i?"top":null!=o&&l+h>=t-o&&"bottom"},i.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(i.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},i.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},i.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),o=this.options.offset,n=o.top,s=o.bottom,a=Math.max(t(document).height(),t(document.body).height());"object"!=typeof o&&(s=n=o),"function"==typeof n&&(n=o.top(this.$element)),"function"==typeof s&&(s=o.bottom(this.$element));var r=this.getState(a,e,n,s);if(this.affixed!=r){null!=this.unpin&&this.$element.css("top","");var l="affix"+(r?"-"+r:""),h=t.Event(l+".bs.affix");if(this.$element.trigger(h),h.isDefaultPrevented())return;this.affixed=r,this.unpin="bottom"==r?this.getPinnedOffset():null,this.$element.removeClass(i.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==r&&this.$element.offset({top:a-e-s})}};var o=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=i,t.fn.affix.noConflict=function(){return t.fn.affix=o,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var i=t(this),o=i.data();o.offset=o.offset||{},null!=o.offsetBottom&&(o.offset.bottom=o.offsetBottom),null!=o.offsetTop&&(o.offset.top=o.offsetTop),e.call(i,o)})})}(jQuery);
!function(){!function(e){var n=this||(0,eval)("this"),t=n.document,a=n.navigator,r=n.jQuery,i=n.JSON;!function(e){"function"==typeof define&&define.amd?define(["exports","require"],e):e("object"==typeof exports&&"object"==typeof module?module.exports||exports:n.ko={})}(function(o,u){function c(e,n){return(null===e||typeof e in v)&&e===n}function s(n,t){var a;return function(){a||(a=b.a.setTimeout(function(){a=e,n()},t))}}function f(e,n){var t;return function(){clearTimeout(t),t=b.a.setTimeout(e,n)}}function l(e,n){n&&n!==g?"beforeChange"===n?this.Kb(e):this.Ha(e,n):this.Lb(e)}function d(e,n){null!==n&&n.k&&n.k()}function p(e,n){var t=this.Hc,a=t[x];a.R||(this.lb&&this.Ma[n]?(t.Pb(n,e,this.Ma[n]),this.Ma[n]=null,--this.lb):a.r[n]||t.Pb(n,e,a.s?{ia:e}:t.uc(e)))}function h(e,n,t,a){b.d[e]={init:function(e,r,i,o,u){var c,s;return b.m(function(){var i=b.a.c(r()),o=!t!=!i,f=!s;(f||n||o!==c)&&(f&&b.va.Aa()&&(s=b.a.ua(b.f.childNodes(e),!0)),o?(f||b.f.da(e,b.a.ua(s)),b.eb(a?a(u,i):u,e)):b.f.xa(e),c=o)},null,{i:e}),{controlsDescendantBindings:!0}}},b.h.ta[e]=!1,b.f.Z[e]=!0}var b="undefined"!=typeof o?o:{};b.b=function(e,n){for(var t=e.split("."),a=b,r=0;r<t.length-1;r++)a=a[t[r]];a[t[t.length-1]]=n},b.G=function(e,n,t){e[n]=t},b.version="3.4.0",b.b("version",b.version),b.options={deferUpdates:!1,useOnlyNativeEvents:!1},b.a=function(){function o(e,n){for(var t in e)e.hasOwnProperty(t)&&n(t,e[t])}function u(e,n){if(n)for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t]);return e}function c(e,n){return e.__proto__=n,e}function s(e,n,t,a){var r=e[n].match(g)||[];b.a.q(t.match(g),function(e){b.a.pa(r,e,a)}),e[n]=r.join(" ")}var f={__proto__:[]}instanceof Array,l="function"==typeof Symbol,d={},p={};d[a&&/Firefox\/2/i.test(a.userAgent)?"KeyboardEvent":"UIEvents"]=["keyup","keydown","keypress"],d.MouseEvents="click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave".split(" "),o(d,function(e,n){if(n.length)for(var t=0,a=n.length;t<a;t++)p[n[t]]=e});var h={propertychange:!0},v=t&&function(){for(var n=3,a=t.createElement("div"),r=a.getElementsByTagName("i");a.innerHTML="<!--[if gt IE "+ ++n+"]><i></i><![endif]-->",r[0];);return 4<n?n:e}(),g=/\S+/g;return{cc:["authenticity_token",/^__RequestVerificationToken(_.*)?$/],q:function(e,n){for(var t=0,a=e.length;t<a;t++)n(e[t],t)},o:function(e,n){if("function"==typeof Array.prototype.indexOf)return Array.prototype.indexOf.call(e,n);for(var t=0,a=e.length;t<a;t++)if(e[t]===n)return t;return-1},Sb:function(e,n,t){for(var a=0,r=e.length;a<r;a++)if(n.call(t,e[a],a))return e[a];return null},La:function(e,n){var t=b.a.o(e,n);0<t?e.splice(t,1):0===t&&e.shift()},Tb:function(e){e=e||[];for(var n=[],t=0,a=e.length;t<a;t++)0>b.a.o(n,e[t])&&n.push(e[t]);return n},fb:function(e,n){e=e||[];for(var t=[],a=0,r=e.length;a<r;a++)t.push(n(e[a],a));return t},Ka:function(e,n){e=e||[];for(var t=[],a=0,r=e.length;a<r;a++)n(e[a],a)&&t.push(e[a]);return t},ra:function(e,n){if(n instanceof Array)e.push.apply(e,n);else for(var t=0,a=n.length;t<a;t++)e.push(n[t]);return e},pa:function(e,n,t){var a=b.a.o(b.a.zb(e),n);0>a?t&&e.push(n):t||e.splice(a,1)},ka:f,extend:u,Xa:c,Ya:f?c:u,D:o,Ca:function(e,n){if(!e)return e;var t,a={};for(t in e)e.hasOwnProperty(t)&&(a[t]=n(e[t],t,e));return a},ob:function(e){for(;e.firstChild;)b.removeNode(e.firstChild)},jc:function(e){e=b.a.V(e);for(var n=(e[0]&&e[0].ownerDocument||t).createElement("div"),a=0,r=e.length;a<r;a++)n.appendChild(b.$(e[a]));return n},ua:function(e,n){for(var t=0,a=e.length,r=[];t<a;t++){var i=e[t].cloneNode(!0);r.push(n?b.$(i):i)}return r},da:function(e,n){if(b.a.ob(e),n)for(var t=0,a=n.length;t<a;t++)e.appendChild(n[t])},qc:function(e,n){var t=e.nodeType?[e]:e;if(0<t.length){for(var a=t[0],r=a.parentNode,i=0,o=n.length;i<o;i++)r.insertBefore(n[i],a);for(i=0,o=t.length;i<o;i++)b.removeNode(t[i])}},za:function(e,n){if(e.length){for(n=8===n.nodeType&&n.parentNode||n;e.length&&e[0].parentNode!==n;)e.splice(0,1);for(;1<e.length&&e[e.length-1].parentNode!==n;)e.length--;if(1<e.length){var t=e[0],a=e[e.length-1];for(e.length=0;t!==a;)e.push(t),t=t.nextSibling;e.push(a)}}return e},sc:function(e,n){7>v?e.setAttribute("selected",n):e.selected=n},$a:function(n){return null===n||n===e?"":n.trim?n.trim():n.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},nd:function(e,n){return e=e||"",!(n.length>e.length)&&e.substring(0,n.length)===n},Mc:function(e,n){if(e===n)return!0;if(11===e.nodeType)return!1;if(n.contains)return n.contains(3===e.nodeType?e.parentNode:e);if(n.compareDocumentPosition)return 16==(16&n.compareDocumentPosition(e));for(;e&&e!=n;)e=e.parentNode;return!!e},nb:function(e){return b.a.Mc(e,e.ownerDocument.documentElement)},Qb:function(e){return!!b.a.Sb(e,b.a.nb)},A:function(e){return e&&e.tagName&&e.tagName.toLowerCase()},Wb:function(e){return b.onError?function(){try{return e.apply(this,arguments)}catch(n){throw b.onError&&b.onError(n),n}}:e},setTimeout:function(e,n){return setTimeout(b.a.Wb(e),n)},$b:function(e){setTimeout(function(){throw b.onError&&b.onError(e),e},0)},p:function(e,n,t){var a=b.a.Wb(t);if(t=v&&h[n],b.options.useOnlyNativeEvents||t||!r)if(t||"function"!=typeof e.addEventListener){if("undefined"==typeof e.attachEvent)throw Error("Browser doesn't support addEventListener or attachEvent");var i=function(n){a.call(e,n)},o="on"+n;e.attachEvent(o,i),b.a.F.oa(e,function(){e.detachEvent(o,i)})}else e.addEventListener(n,a,!1);else r(e).bind(n,a)},Da:function(e,a){if(!e||!e.nodeType)throw Error("element must be a DOM node when calling triggerEvent");var i;if("input"===b.a.A(e)&&e.type&&"click"==a.toLowerCase()?(i=e.type,i="checkbox"==i||"radio"==i):i=!1,b.options.useOnlyNativeEvents||!r||i)if("function"==typeof t.createEvent){if("function"!=typeof e.dispatchEvent)throw Error("The supplied element doesn't support dispatchEvent");i=t.createEvent(p[a]||"HTMLEvents"),i.initEvent(a,!0,!0,n,0,0,0,0,0,!1,!1,!1,!1,0,e),e.dispatchEvent(i)}else if(i&&e.click)e.click();else{if("undefined"==typeof e.fireEvent)throw Error("Browser doesn't support triggering events");e.fireEvent("on"+a)}else r(e).trigger(a)},c:function(e){return b.H(e)?e():e},zb:function(e){return b.H(e)?e.t():e},bb:function(e,n,t){var a;n&&("object"==typeof e.classList?(a=e.classList[t?"add":"remove"],b.a.q(n.match(g),function(n){a.call(e.classList,n)})):"string"==typeof e.className.baseVal?s(e.className,"baseVal",n,t):s(e,"className",n,t))},Za:function(n,t){var a=b.a.c(t);null!==a&&a!==e||(a="");var r=b.f.firstChild(n);!r||3!=r.nodeType||b.f.nextSibling(r)?b.f.da(n,[n.ownerDocument.createTextNode(a)]):r.data=a,b.a.Rc(n)},rc:function(e,n){if(e.name=n,7>=v)try{e.mergeAttributes(t.createElement("<input name='"+e.name+"'/>"),!1)}catch(a){}},Rc:function(e){9<=v&&(e=1==e.nodeType?e:e.parentNode,e.style&&(e.style.zoom=e.style.zoom))},Nc:function(e){if(v){var n=e.style.width;e.style.width=0,e.style.width=n}},hd:function(e,n){e=b.a.c(e),n=b.a.c(n);for(var t=[],a=e;a<=n;a++)t.push(a);return t},V:function(e){for(var n=[],t=0,a=e.length;t<a;t++)n.push(e[t]);return n},Yb:function(e){return l?Symbol(e):e},rd:6===v,sd:7===v,C:v,ec:function(e,n){for(var t=b.a.V(e.getElementsByTagName("input")).concat(b.a.V(e.getElementsByTagName("textarea"))),a="string"==typeof n?function(e){return e.name===n}:function(e){return n.test(e.name)},r=[],i=t.length-1;0<=i;i--)a(t[i])&&r.push(t[i]);return r},ed:function(e){return"string"==typeof e&&(e=b.a.$a(e))?i&&i.parse?i.parse(e):new Function("return "+e)():null},Eb:function(e,n,t){if(!i||!i.stringify)throw Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");return i.stringify(b.a.c(e),n,t)},fd:function(e,n,a){a=a||{};var r=a.params||{},i=a.includeFields||this.cc,u=e;if("object"==typeof e&&"form"===b.a.A(e))for(var u=e.action,c=i.length-1;0<=c;c--)for(var s=b.a.ec(e,i[c]),f=s.length-1;0<=f;f--)r[s[f].name]=s[f].value;n=b.a.c(n);var l=t.createElement("form");l.style.display="none",l.action=u,l.method="post";for(var d in n)e=t.createElement("input"),e.type="hidden",e.name=d,e.value=b.a.Eb(b.a.c(n[d])),l.appendChild(e);o(r,function(e,n){var a=t.createElement("input");a.type="hidden",a.name=e,a.value=n,l.appendChild(a)}),t.body.appendChild(l),a.submitter?a.submitter(l):l.submit(),setTimeout(function(){l.parentNode.removeChild(l)},0)}}}(),b.b("utils",b.a),b.b("utils.arrayForEach",b.a.q),b.b("utils.arrayFirst",b.a.Sb),b.b("utils.arrayFilter",b.a.Ka),b.b("utils.arrayGetDistinctValues",b.a.Tb),b.b("utils.arrayIndexOf",b.a.o),b.b("utils.arrayMap",b.a.fb),b.b("utils.arrayPushAll",b.a.ra),b.b("utils.arrayRemoveItem",b.a.La),b.b("utils.extend",b.a.extend),b.b("utils.fieldsIncludedWithJsonPost",b.a.cc),b.b("utils.getFormFields",b.a.ec),b.b("utils.peekObservable",b.a.zb),b.b("utils.postJson",b.a.fd),b.b("utils.parseJson",b.a.ed),b.b("utils.registerEventHandler",b.a.p),b.b("utils.stringifyJson",b.a.Eb),b.b("utils.range",b.a.hd),b.b("utils.toggleDomNodeCssClass",b.a.bb),b.b("utils.triggerEvent",b.a.Da),b.b("utils.unwrapObservable",b.a.c),b.b("utils.objectForEach",b.a.D),b.b("utils.addOrRemoveItem",b.a.pa),b.b("utils.setTextContent",b.a.Za),b.b("unwrap",b.a.c),Function.prototype.bind||(Function.prototype.bind=function(e){var n=this;if(1===arguments.length)return function(){return n.apply(e,arguments)};var t=Array.prototype.slice.call(arguments,1);return function(){var a=t.slice(0);return a.push.apply(a,arguments),n.apply(e,a)}}),b.a.e=new function(){function n(n,i){var o=n[a];if(!o||"null"===o||!r[o]){if(!i)return e;o=n[a]="ko"+t++,r[o]={}}return r[o]}var t=0,a="__ko__"+(new Date).getTime(),r={};return{get:function(t,a){var r=n(t,!1);return r===e?e:r[a]},set:function(t,a,r){r===e&&n(t,!1)===e||(n(t,!0)[a]=r)},clear:function(e){var n=e[a];return!!n&&(delete r[n],e[a]=null,!0)},I:function(){return t++ +a}}},b.b("utils.domData",b.a.e),b.b("utils.domData.clear",b.a.e.clear),b.a.F=new function(){function n(n,t){var r=b.a.e.get(n,a);return r===e&&t&&(r=[],b.a.e.set(n,a,r)),r}function t(e){var a=n(e,!1);if(a)for(var a=a.slice(0),r=0;r<a.length;r++)a[r](e);if(b.a.e.clear(e),b.a.F.cleanExternalData(e),o[e.nodeType])for(a=e.firstChild;e=a;)a=e.nextSibling,8===e.nodeType&&t(e)}var a=b.a.e.I(),i={1:!0,8:!0,9:!0},o={1:!0,9:!0};return{oa:function(e,t){if("function"!=typeof t)throw Error("Callback must be a function");n(e,!0).push(t)},pc:function(t,r){var i=n(t,!1);i&&(b.a.La(i,r),0==i.length&&b.a.e.set(t,a,e))},$:function(e){if(i[e.nodeType]&&(t(e),o[e.nodeType])){var n=[];b.a.ra(n,e.getElementsByTagName("*"));for(var a=0,r=n.length;a<r;a++)t(n[a])}return e},removeNode:function(e){b.$(e),e.parentNode&&e.parentNode.removeChild(e)},cleanExternalData:function(e){r&&"function"==typeof r.cleanData&&r.cleanData([e])}}},b.$=b.a.F.$,b.removeNode=b.a.F.removeNode,b.b("cleanNode",b.$),b.b("removeNode",b.removeNode),b.b("utils.domNodeDisposal",b.a.F),b.b("utils.domNodeDisposal.addDisposeCallback",b.a.F.oa),b.b("utils.domNodeDisposal.removeDisposeCallback",b.a.F.pc),function(){var a=[0,"",""],i=[1,"<table>","</table>"],o=[3,"<table><tbody><tr>","</tr></tbody></table>"],u=[1,"<select multiple='multiple'>","</select>"],c={thead:i,tbody:i,tfoot:i,tr:[2,"<table><tbody>","</tbody></table>"],td:o,th:o,option:u,optgroup:u},s=8>=b.a.C;b.a.ma=function(e,i){var o;if(r){if(r.parseHTML)o=r.parseHTML(e,i)||[];else if((o=r.clean([e],i))&&o[0]){for(var u=o[0];u.parentNode&&11!==u.parentNode.nodeType;)u=u.parentNode;u.parentNode&&u.parentNode.removeChild(u)}}else{(o=i)||(o=t);var f,u=o.parentWindow||o.defaultView||n,l=b.a.$a(e).toLowerCase(),d=o.createElement("div");for(f=(l=l.match(/^<([a-z]+)[ >]/))&&c[l[1]]||a,l=f[0],f="ignored<div>"+f[1]+e+f[2]+"</div>","function"==typeof u.innerShiv?d.appendChild(u.innerShiv(f)):(s&&o.appendChild(d),d.innerHTML=f,s&&d.parentNode.removeChild(d));l--;)d=d.lastChild;o=b.a.V(d.lastChild.childNodes)}return o},b.a.Cb=function(n,t){if(b.a.ob(n),t=b.a.c(t),null!==t&&t!==e)if("string"!=typeof t&&(t=t.toString()),r)r(n).html(t);else for(var a=b.a.ma(t,n.ownerDocument),i=0;i<a.length;i++)n.appendChild(a[i])}}(),b.b("utils.parseHtmlFragment",b.a.ma),b.b("utils.setHtml",b.a.Cb),b.M=function(){function n(e,t){if(e)if(8==e.nodeType){var a=b.M.lc(e.nodeValue);null!=a&&t.push({Lc:e,cd:a})}else if(1==e.nodeType)for(var a=0,r=e.childNodes,i=r.length;a<i;a++)n(r[a],t)}var t={};return{wb:function(e){if("function"!=typeof e)throw Error("You can only pass a function to ko.memoization.memoize()");var n=(4294967296*(1+Math.random())|0).toString(16).substring(1)+(4294967296*(1+Math.random())|0).toString(16).substring(1);return t[n]=e,"<!--[ko_memo:"+n+"]-->"},xc:function(n,a){var r=t[n];if(r===e)throw Error("Couldn't find any memo with ID "+n+". Perhaps it's already been unmemoized.");try{return r.apply(null,a||[]),!0}finally{delete t[n]}},yc:function(e,t){var a=[];n(e,a);for(var r=0,i=a.length;r<i;r++){var o=a[r].Lc,u=[o];t&&b.a.ra(u,t),b.M.xc(a[r].cd,u),o.nodeValue="",o.parentNode&&o.parentNode.removeChild(o)}},lc:function(e){return(e=e.match(/^\[ko_memo\:(.*?)\]$/))?e[1]:null}}}(),b.b("memoization",b.M),b.b("memoization.memoize",b.M.wb),b.b("memoization.unmemoize",b.M.xc),b.b("memoization.parseMemoText",b.M.lc),b.b("memoization.unmemoizeDomNodeAndDescendants",b.M.yc),b.Y=function(){function e(){if(i)for(var e,n=i,t=0;u<i;)if(e=r[u++]){if(u>n){if(5e3<=++t){u=i,b.a.$b(Error("'Too much recursion' after processing "+t+" task groups."));break}n=i}try{e()}catch(a){b.a.$b(a)}}}function a(){e(),u=i=r.length=0}var r=[],i=0,o=1,u=0;return{scheduler:n.MutationObserver?function(e){var n=t.createElement("div");return new MutationObserver(e).observe(n,{attributes:!0}),function(){n.classList.toggle("foo")}}(a):t&&"onreadystatechange"in t.createElement("script")?function(e){var n=t.createElement("script");n.onreadystatechange=function(){n.onreadystatechange=null,t.documentElement.removeChild(n),n=null,e()},t.documentElement.appendChild(n)}:function(e){setTimeout(e,0)},Wa:function(e){return i||b.Y.scheduler(a),r[i++]=e,o++},cancel:function(e){e-=o-i,e>=u&&e<i&&(r[e]=null)},resetForTesting:function(){var e=i-u;return u=i=r.length=0,e},md:e}}(),b.b("tasks",b.Y),b.b("tasks.schedule",b.Y.Wa),b.b("tasks.runEarly",b.Y.md),b.ya={throttle:function(e,n){e.throttleEvaluation=n;var t=null;return b.B({read:e,write:function(a){clearTimeout(t),t=b.a.setTimeout(function(){e(a)},n)}})},rateLimit:function(e,n){var t,a,r;"number"==typeof n?t=n:(t=n.timeout,a=n.method),e.cb=!1,r="notifyWhenChangesStop"==a?f:s,e.Ta(function(e){return r(e,t)})},deferred:function(n,t){if(!0!==t)throw Error("The 'deferred' extender only accepts the value 'true', because it is not supported to turn deferral off once enabled.");n.cb||(n.cb=!0,n.Ta(function(t){var a;return function(){b.Y.cancel(a),a=b.Y.Wa(t),n.notifySubscribers(e,"dirty")}}))},notify:function(e,n){e.equalityComparer="always"==n?null:c}};var v={undefined:1,"boolean":1,number:1,string:1};b.b("extenders",b.ya),b.vc=function(e,n,t){this.ia=e,this.gb=n,this.Kc=t,this.R=!1,b.G(this,"dispose",this.k)},b.vc.prototype.k=function(){this.R=!0,this.Kc()},b.J=function(){b.a.Ya(this,m),m.rb(this)};var g="change",m={rb:function(e){e.K={},e.Nb=1},X:function(e,n,t){var a=this;t=t||g;var r=new b.vc(a,n?e.bind(n):e,function(){b.a.La(a.K[t],r),a.Ia&&a.Ia(t)});return a.sa&&a.sa(t),a.K[t]||(a.K[t]=[]),a.K[t].push(r),r},notifySubscribers:function(e,n){if(n=n||g,n===g&&this.zc(),this.Pa(n))try{b.l.Ub();for(var t,a=this.K[n].slice(0),r=0;t=a[r];++r)t.R||t.gb(e)}finally{b.l.end()}},Na:function(){return this.Nb},Uc:function(e){return this.Na()!==e},zc:function(){++this.Nb},Ta:function(e){var n,t,a,r=this,i=b.H(r);r.Ha||(r.Ha=r.notifySubscribers,r.notifySubscribers=l);var o=e(function(){r.Mb=!1,i&&a===r&&(a=r()),n=!1,r.tb(t,a)&&r.Ha(t=a)});r.Lb=function(e){r.Mb=n=!0,a=e,o()},r.Kb=function(e){n||(t=e,r.Ha(e,"beforeChange"))}},Pa:function(e){return this.K[e]&&this.K[e].length},Sc:function(e){if(e)return this.K[e]&&this.K[e].length||0;var n=0;return b.a.D(this.K,function(e,t){"dirty"!==e&&(n+=t.length)}),n},tb:function(e,n){return!this.equalityComparer||!this.equalityComparer(e,n)},extend:function(e){var n=this;return e&&b.a.D(e,function(e,t){var a=b.ya[e];"function"==typeof a&&(n=a(n,t)||n)}),n}};b.G(m,"subscribe",m.X),b.G(m,"extend",m.extend),b.G(m,"getSubscriptionsCount",m.Sc),b.a.ka&&b.a.Xa(m,Function.prototype),b.J.fn=m,b.hc=function(e){return null!=e&&"function"==typeof e.X&&"function"==typeof e.notifySubscribers},b.b("subscribable",b.J),b.b("isSubscribable",b.hc),b.va=b.l=function(){function e(e){a.push(t),t=e}function n(){t=a.pop()}var t,a=[],r=0;return{Ub:e,end:n,oc:function(e){if(t){if(!b.hc(e))throw Error("Only subscribable things can act as dependencies");t.gb.call(t.Gc,e,e.Cc||(e.Cc=++r))}},w:function(t,a,r){try{return e(),t.apply(a,r||[])}finally{n()}},Aa:function(){if(t)return t.m.Aa()},Sa:function(){if(t)return t.Sa}}}(),b.b("computedContext",b.va),b.b("computedContext.getDependenciesCount",b.va.Aa),b.b("computedContext.isInitial",b.va.Sa),b.b("ignoreDependencies",b.qd=b.l.w);var y=b.a.Yb("_latestValue");b.N=function(e){function n(){return 0<arguments.length?(n.tb(n[y],arguments[0])&&(n.ga(),n[y]=arguments[0],n.fa()),this):(b.l.oc(n),n[y])}return n[y]=e,b.a.ka||b.a.extend(n,b.J.fn),b.J.fn.rb(n),b.a.Ya(n,w),b.options.deferUpdates&&b.ya.deferred(n,!0),n};var w={equalityComparer:c,t:function(){return this[y]},fa:function(){this.notifySubscribers(this[y])},ga:function(){this.notifySubscribers(this[y],"beforeChange")}};b.a.ka&&b.a.Xa(w,b.J.fn);var k=b.N.gd="__ko_proto__";w[k]=b.N,b.Oa=function(n,t){return null!==n&&n!==e&&n[k]!==e&&(n[k]===t||b.Oa(n[k],t))},b.H=function(e){return b.Oa(e,b.N)},b.Ba=function(e){return!!("function"==typeof e&&e[k]===b.N||"function"==typeof e&&e[k]===b.B&&e.Vc)},b.b("observable",b.N),b.b("isObservable",b.H),b.b("isWriteableObservable",b.Ba),b.b("isWritableObservable",b.Ba),b.b("observable.fn",w),b.G(w,"peek",w.t),b.G(w,"valueHasMutated",w.fa),b.G(w,"valueWillMutate",w.ga),b.la=function(e){if(e=e||[],"object"!=typeof e||!("length"in e))throw Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");return e=b.N(e),b.a.Ya(e,b.la.fn),e.extend({trackArrayChanges:!0})},b.la.fn={remove:function(e){for(var n=this.t(),t=[],a="function"!=typeof e||b.H(e)?function(n){return n===e}:e,r=0;r<n.length;r++){var i=n[r];a(i)&&(0===t.length&&this.ga(),t.push(i),n.splice(r,1),r--)}return t.length&&this.fa(),t},removeAll:function(n){if(n===e){var t=this.t(),a=t.slice(0);return this.ga(),t.splice(0,t.length),this.fa(),a}return n?this.remove(function(e){return 0<=b.a.o(n,e)}):[]},destroy:function(e){var n=this.t(),t="function"!=typeof e||b.H(e)?function(n){return n===e}:e;this.ga();for(var a=n.length-1;0<=a;a--)t(n[a])&&(n[a]._destroy=!0);this.fa()},destroyAll:function(n){return n===e?this.destroy(function(){return!0}):n?this.destroy(function(e){return 0<=b.a.o(n,e)}):[]},indexOf:function(e){var n=this();return b.a.o(n,e)},replace:function(e,n){var t=this.indexOf(e);0<=t&&(this.ga(),this.t()[t]=n,this.fa())}},b.a.ka&&b.a.Xa(b.la.fn,b.N.fn),b.a.q("pop push reverse shift sort splice unshift".split(" "),function(e){b.la.fn[e]=function(){var n=this.t();this.ga(),this.Vb(n,e,arguments);var t=n[e].apply(n,arguments);return this.fa(),t===n?this:t}}),b.a.q(["slice"],function(e){b.la.fn[e]=function(){var n=this();return n[e].apply(n,arguments)}}),b.b("observableArray",b.la),b.ya.trackArrayChanges=function(e,n){function t(){if(!r){r=!0;var n=e.notifySubscribers;e.notifySubscribers=function(e,t){return t&&t!==g||++o,n.apply(this,arguments)};var t=[].concat(e.t()||[]);i=null,a=e.X(function(n){if(n=[].concat(n||[]),e.Pa("arrayChange")){var a;(!i||1<o)&&(i=b.a.ib(t,n,e.hb)),a=i}t=n,i=null,o=0,a&&a.length&&e.notifySubscribers(a,"arrayChange")})}}if(e.hb={},n&&"object"==typeof n&&b.a.extend(e.hb,n),e.hb.sparse=!0,!e.Vb){var a,r=!1,i=null,o=0,u=e.sa,c=e.Ia;e.sa=function(n){u&&u.call(e,n),"arrayChange"===n&&t()},e.Ia=function(n){c&&c.call(e,n),"arrayChange"!==n||e.Pa("arrayChange")||(a.k(),r=!1)},e.Vb=function(e,n,t){function a(e,n,t){return u[u.length]={status:e,value:n,index:t}}if(r&&!o){var u=[],c=e.length,s=t.length,f=0;switch(n){case"push":f=c;case"unshift":for(n=0;n<s;n++)a("added",t[n],f+n);break;case"pop":f=c-1;case"shift":c&&a("deleted",e[f],f);break;case"splice":n=Math.min(Math.max(0,0>t[0]?c+t[0]:t[0]),c);for(var c=1===s?c:Math.min(n+(t[1]||0),c),s=n+s-2,f=Math.max(c,s),l=[],d=[],p=2;n<f;++n,++p)n<c&&d.push(a("deleted",e[n],n)),n<s&&l.push(a("added",t[p],n));b.a.dc(d,l);break;default:return}i=u}}}};var x=b.a.Yb("_state");b.m=b.B=function(n,t,a){function r(){if(0<arguments.length){if("function"!=typeof i)throw Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");return i.apply(o.pb,arguments),this}return b.l.oc(r),(o.S||o.s&&r.Qa())&&r.aa(),o.T}if("object"==typeof n?a=n:(a=a||{},n&&(a.read=n)),"function"!=typeof a.read)throw Error("Pass a function that returns the value of the ko.computed");var i=a.write,o={T:e,S:!0,Ra:!1,Fb:!1,R:!1,Va:!1,s:!1,jd:a.read,pb:t||a.owner,i:a.disposeWhenNodeIsRemoved||a.i||null,wa:a.disposeWhen||a.wa,mb:null,r:{},L:0,bc:null};return r[x]=o,r.Vc="function"==typeof i,b.a.ka||b.a.extend(r,b.J.fn),b.J.fn.rb(r),b.a.Ya(r,E),a.pure?(o.Va=!0,o.s=!0,b.a.extend(r,T)):a.deferEvaluation&&b.a.extend(r,C),b.options.deferUpdates&&b.ya.deferred(r,!0),o.i&&(o.Fb=!0,o.i.nodeType||(o.i=null)),o.s||a.deferEvaluation||r.aa(),o.i&&r.ba()&&b.a.F.oa(o.i,o.mb=function(){r.k()}),r};var E={equalityComparer:c,Aa:function(){return this[x].L},Pb:function(e,n,t){if(this[x].Va&&n===this)throw Error("A 'pure' computed must not be called recursively");this[x].r[e]=t,t.Ga=this[x].L++,t.na=n.Na()},Qa:function(){var e,n,t=this[x].r;for(e in t)if(t.hasOwnProperty(e)&&(n=t[e],n.ia.Uc(n.na)))return!0},bd:function(){this.Fa&&!this[x].Ra&&this.Fa()},ba:function(){return this[x].S||0<this[x].L},ld:function(){this.Mb||this.ac()},uc:function(e){if(e.cb&&!this[x].i){var n=e.X(this.bd,this,"dirty"),t=e.X(this.ld,this);return{ia:e,k:function(){n.k(),t.k()}}}return e.X(this.ac,this)},ac:function(){var e=this,n=e.throttleEvaluation;n&&0<=n?(clearTimeout(this[x].bc),this[x].bc=b.a.setTimeout(function(){e.aa(!0)},n)):e.Fa?e.Fa():e.aa(!0)},aa:function(e){var n=this[x],t=n.wa;if(!n.Ra&&!n.R){if(n.i&&!b.a.nb(n.i)||t&&t()){if(!n.Fb)return void this.k()}else n.Fb=!1;n.Ra=!0;try{this.Qc(e)}finally{n.Ra=!1}n.L||this.k()}},Qc:function(n){var t=this[x],a=t.Va?e:!t.L,r={Hc:this,Ma:t.r,lb:t.L};b.l.Ub({Gc:r,gb:p,m:this,Sa:a}),t.r={},t.L=0,r=this.Pc(t,r),this.tb(t.T,r)&&(t.s||this.notifySubscribers(t.T,"beforeChange"),t.T=r,t.s?this.zc():n&&this.notifySubscribers(t.T)),a&&this.notifySubscribers(t.T,"awake")},Pc:function(e,n){try{var t=e.jd;return e.pb?t.call(e.pb):t()}finally{b.l.end(),n.lb&&!e.s&&b.a.D(n.Ma,d),e.S=!1}},t:function(){var e=this[x];return(e.S&&!e.L||e.s&&this.Qa())&&this.aa(),e.T},Ta:function(e){b.J.fn.Ta.call(this,e),this.Fa=function(){this.Kb(this[x].T),this[x].S=!0,this.Lb(this)}},k:function(){var e=this[x];!e.s&&e.r&&b.a.D(e.r,function(e,n){n.k&&n.k()}),e.i&&e.mb&&b.a.F.pc(e.i,e.mb),e.r=null,e.L=0,e.R=!0,e.S=!1,e.s=!1,e.i=null}},T={sa:function(e){var n=this,t=n[x];if(!t.R&&t.s&&"change"==e){if(t.s=!1,t.S||n.Qa())t.r=null,t.L=0,t.S=!0,n.aa();else{var a=[];b.a.D(t.r,function(e,n){a[n.Ga]=e}),b.a.q(a,function(e,a){var r=t.r[e],i=n.uc(r.ia);i.Ga=a,i.na=r.na,t.r[e]=i})}t.R||n.notifySubscribers(t.T,"awake")}},Ia:function(n){var t=this[x];t.R||"change"!=n||this.Pa("change")||(b.a.D(t.r,function(e,n){n.k&&(t.r[e]={ia:n.ia,Ga:n.Ga,na:n.na},n.k())}),t.s=!0,this.notifySubscribers(e,"asleep"))},Na:function(){var e=this[x];return e.s&&(e.S||this.Qa())&&this.aa(),b.J.fn.Na.call(this)}},C={sa:function(e){"change"!=e&&"beforeChange"!=e||this.t()}};b.a.ka&&b.a.Xa(E,b.J.fn);var N=b.N.gd;b.m[N]=b.N,E[N]=b.m,b.Xc=function(e){return b.Oa(e,b.m)},b.Yc=function(e){return b.Oa(e,b.m)&&e[x]&&e[x].Va},b.b("computed",b.m),b.b("dependentObservable",b.m),b.b("isComputed",b.Xc),b.b("isPureComputed",b.Yc),b.b("computed.fn",E),b.G(E,"peek",E.t),b.G(E,"dispose",E.k),b.G(E,"isActive",E.ba),b.G(E,"getDependenciesCount",E.Aa),b.nc=function(e,n){return"function"==typeof e?b.m(e,n,{pure:!0}):(e=b.a.extend({},e),e.pure=!0,b.m(e,n))},b.b("pureComputed",b.nc),function(){function n(r,i,o){if(o=o||new a,r=i(r),"object"!=typeof r||null===r||r===e||r instanceof RegExp||r instanceof Date||r instanceof String||r instanceof Number||r instanceof Boolean)return r;var u=r instanceof Array?[]:{};return o.save(r,u),t(r,function(t){var a=i(r[t]);switch(typeof a){case"boolean":case"number":case"string":case"function":u[t]=a;break;case"object":case"undefined":var c=o.get(a);u[t]=c!==e?c:n(a,i,o)}}),u}function t(e,n){if(e instanceof Array){for(var t=0;t<e.length;t++)n(t);"function"==typeof e.toJSON&&n("toJSON")}else for(t in e)n(t)}function a(){this.keys=[],this.Ib=[]}b.wc=function(e){if(0==arguments.length)throw Error("When calling ko.toJS, pass the object you want to convert.");return n(e,function(e){for(var n=0;b.H(e)&&10>n;n++)e=e();return e})},b.toJSON=function(e,n,t){return e=b.wc(e),b.a.Eb(e,n,t)},a.prototype={save:function(e,n){var t=b.a.o(this.keys,e);0<=t?this.Ib[t]=n:(this.keys.push(e),this.Ib.push(n))},get:function(n){return n=b.a.o(this.keys,n),0<=n?this.Ib[n]:e}}}(),b.b("toJS",b.wc),b.b("toJSON",b.toJSON),function(){b.j={u:function(n){switch(b.a.A(n)){case"option":return!0===n.__ko__hasDomDataOptionValue__?b.a.e.get(n,b.d.options.xb):7>=b.a.C?n.getAttributeNode("value")&&n.getAttributeNode("value").specified?n.value:n.text:n.value;case"select":return 0<=n.selectedIndex?b.j.u(n.options[n.selectedIndex]):e;default:return n.value}},ha:function(n,t,a){switch(b.a.A(n)){case"option":switch(typeof t){case"string":b.a.e.set(n,b.d.options.xb,e),"__ko__hasDomDataOptionValue__"in n&&delete n.__ko__hasDomDataOptionValue__,n.value=t;break;default:b.a.e.set(n,b.d.options.xb,t),n.__ko__hasDomDataOptionValue__=!0,n.value="number"==typeof t?t:""}break;case"select":""!==t&&null!==t||(t=e);for(var r,i=-1,o=0,u=n.options.length;o<u;++o)if(r=b.j.u(n.options[o]),r==t||""==r&&t===e){i=o;break}(a||0<=i||t===e&&1<n.size)&&(n.selectedIndex=i);break;default:null!==t&&t!==e||(t=""),n.value=t}}}}(),b.b("selectExtensions",b.j),b.b("selectExtensions.readValue",b.j.u),b.b("selectExtensions.writeValue",b.j.ha),b.h=function(){function e(e){e=b.a.$a(e),123===e.charCodeAt(0)&&(e=e.slice(1,-1));var n,t=[],o=e.match(a),u=[],c=0;if(o){o.push(",");for(var s,f=0;s=o[f];++f){var l=s.charCodeAt(0);if(44===l){if(0>=c){t.push(n&&u.length?{key:n,value:u.join("")}:{unknown:n||u.join("")}),n=c=0,u=[];continue}}else if(58===l){if(!c&&!n&&1===u.length){n=u.pop();continue}}else 47===l&&f&&1<s.length?(l=o[f-1].match(r))&&!i[l[0]]&&(e=e.substr(e.indexOf(s)+1),o=e.match(a),o.push(","),f=-1,s="/"):40===l||123===l||91===l?++c:41===l||125===l||93===l?--c:n||u.length||34!==l&&39!==l||(s=s.slice(1,-1));u.push(s)}}return t}var n=["true","false","null","undefined"],t=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i,a=RegExp("\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*'|/(?:[^/\\\\]|\\\\.)*/w*|[^\\s:,/][^,\"'{}()/:[\\]]*[^\\s,\"'{}()/:[\\]]|[^\\s]","g"),r=/[\])"'A-Za-z0-9_$]+$/,i={"in":1,"return":1,"typeof":1},o={};return{ta:[],ea:o,yb:e,Ua:function(a,r){function i(e,a){var r;if(!f){var l=b.getBindingHandler(e);if(l&&l.preprocess&&!(a=l.preprocess(a,e,i)))return;(l=o[e])&&(r=a,0<=b.a.o(n,r)?r=!1:(l=r.match(t),r=null!==l&&(l[1]?"Object("+l[1]+")"+l[2]:r)),l=r),l&&c.push("'"+e+"':function(_z){"+r+"=_z}")}s&&(a="function(){return "+a+" }"),u.push("'"+e+"':"+a)}r=r||{};var u=[],c=[],s=r.valueAccessors,f=r.bindingParams,l="string"==typeof a?e(a):a;return b.a.q(l,function(e){i(e.key||e.unknown,e.value)}),c.length&&i("_ko_property_writers","{"+c.join(",")+" }"),u.join(",")},ad:function(e,n){for(var t=0;t<e.length;t++)if(e[t].key==n)return!0;return!1},Ea:function(e,n,t,a,r){e&&b.H(e)?!b.Ba(e)||r&&e.t()===a||e(a):(e=n.get("_ko_property_writers"))&&e[t]&&e[t](a)}}}(),b.b("expressionRewriting",b.h),b.b("expressionRewriting.bindingRewriteValidators",b.h.ta),b.b("expressionRewriting.parseObjectLiteral",b.h.yb),b.b("expressionRewriting.preProcessBindings",b.h.Ua),b.b("expressionRewriting._twoWayBindings",b.h.ea),b.b("jsonExpressionRewriting",b.h),b.b("jsonExpressionRewriting.insertPropertyAccessorsIntoJson",b.h.Ua),function(){function e(e){return 8==e.nodeType&&o.test(i?e.text:e.nodeValue)}function n(e){return 8==e.nodeType&&u.test(i?e.text:e.nodeValue)}function a(t,a){for(var r=t,i=1,o=[];r=r.nextSibling;){if(n(r)&&(i--,0===i))return o;o.push(r),e(r)&&i++}if(!a)throw Error("Cannot find closing comment tag to match: "+t.nodeValue);return null}function r(e,n){var t=a(e,n);return t?0<t.length?t[t.length-1].nextSibling:e.nextSibling:null}var i=t&&"<!--test-->"===t.createComment("test").text,o=i?/^\x3c!--\s*ko(?:\s+([\s\S]+))?\s*--\x3e$/:/^\s*ko(?:\s+([\s\S]+))?\s*$/,u=i?/^\x3c!--\s*\/ko\s*--\x3e$/:/^\s*\/ko\s*$/,c={ul:!0,ol:!0};b.f={Z:{},childNodes:function(n){return e(n)?a(n):n.childNodes},xa:function(n){if(e(n)){n=b.f.childNodes(n);for(var t=0,a=n.length;t<a;t++)b.removeNode(n[t])}else b.a.ob(n)},da:function(n,t){if(e(n)){b.f.xa(n);for(var a=n.nextSibling,r=0,i=t.length;r<i;r++)a.parentNode.insertBefore(t[r],a)}else b.a.da(n,t)},mc:function(n,t){e(n)?n.parentNode.insertBefore(t,n.nextSibling):n.firstChild?n.insertBefore(t,n.firstChild):n.appendChild(t)},gc:function(n,t,a){a?e(n)?n.parentNode.insertBefore(t,a.nextSibling):a.nextSibling?n.insertBefore(t,a.nextSibling):n.appendChild(t):b.f.mc(n,t)},firstChild:function(t){return e(t)?!t.nextSibling||n(t.nextSibling)?null:t.nextSibling:t.firstChild},nextSibling:function(t){return e(t)&&(t=r(t)),t.nextSibling&&n(t.nextSibling)?null:t.nextSibling},Tc:e,pd:function(e){return(e=(i?e.text:e.nodeValue).match(o))?e[1]:null},kc:function(t){if(c[b.a.A(t)]){var a=t.firstChild;if(a)do if(1===a.nodeType){var i;i=a.firstChild;var o=null;if(i)do if(o)o.push(i);else if(e(i)){var u=r(i,!0);u?i=u:o=[i]}else n(i)&&(o=[i]);while(i=i.nextSibling);if(i=o)for(o=a.nextSibling,u=0;u<i.length;u++)o?t.insertBefore(i[u],o):t.appendChild(i[u])}while(a=a.nextSibling)}}}}(),b.b("virtualElements",b.f),b.b("virtualElements.allowedBindings",b.f.Z),b.b("virtualElements.emptyNode",b.f.xa),b.b("virtualElements.insertAfter",b.f.gc),b.b("virtualElements.prepend",b.f.mc),b.b("virtualElements.setDomNodeChildren",b.f.da),function(){b.Q=function(){this.Fc={}},b.a.extend(b.Q.prototype,{nodeHasBindings:function(e){switch(e.nodeType){case 1:return null!=e.getAttribute("data-bind")||b.g.getComponentNameForNode(e);case 8:return b.f.Tc(e);default:return!1}},getBindings:function(e,n){var t=this.getBindingsString(e,n),t=t?this.parseBindingsString(t,n,e):null;return b.g.Ob(t,e,n,!1)},getBindingAccessors:function(e,n){var t=this.getBindingsString(e,n),t=t?this.parseBindingsString(t,n,e,{valueAccessors:!0}):null;return b.g.Ob(t,e,n,!0)},getBindingsString:function(e){switch(e.nodeType){case 1:return e.getAttribute("data-bind");case 8:return b.f.pd(e);default:return null}},parseBindingsString:function(e,n,t,a){try{var r,i=this.Fc,o=e+(a&&a.valueAccessors||"");if(!(r=i[o])){var u,c="with($context){with($data||{}){return{"+b.h.Ua(e,a)+"}}}";u=new Function("$context","$element",c),r=i[o]=u}return r(n,t)}catch(s){throw s.message="Unable to parse bindings.\nBindings value: "+e+"\nMessage: "+s.message,s}}}),b.Q.instance=new b.Q}(),b.b("bindingProvider",b.Q),function(){function t(e){return function(){return e}}function a(e){return e()}function i(e){return b.a.Ca(b.l.w(e),function(n,t){return function(){return e()[t]}})}function o(e,n,a){return"function"==typeof e?i(e.bind(null,n,a)):b.a.Ca(e,t)}function u(e,n){return i(this.getBindings.bind(this,e,n))}function c(e,n,t){var a,r=b.f.firstChild(n),i=b.Q.instance,o=i.preprocessNode;if(o){for(;a=r;)r=b.f.nextSibling(a),o.call(i,a);r=b.f.firstChild(n)}for(;a=r;)r=b.f.nextSibling(a),
s(e,a,t)}function s(e,n,t){var a=!0,r=1===n.nodeType;r&&b.f.kc(n),(r&&t||b.Q.instance.nodeHasBindings(n))&&(a=l(n,null,e,t).shouldBindDescendants),a&&!p[b.a.A(n)]&&c(e,n,!r)}function f(e){var n=[],t={},a=[];return b.a.D(e,function r(i){if(!t[i]){var o=b.getBindingHandler(i);o&&(o.after&&(a.push(i),b.a.q(o.after,function(n){if(e[n]){if(-1!==b.a.o(a,n))throw Error("Cannot combine the following bindings, because they have a cyclic dependency: "+a.join(", "));r(n)}}),a.length--),n.push({key:i,fc:o})),t[i]=!0}}),n}function l(n,t,r,i){var o=b.a.e.get(n,h);if(!t){if(o)throw Error("You cannot apply bindings multiple times to the same element.");b.a.e.set(n,h,!0)}!o&&i&&b.tc(n,r);var c;if(t&&"function"!=typeof t)c=t;else{var s=b.Q.instance,l=s.getBindingAccessors||u,d=b.B(function(){return(c=t?t(r,n):l.call(s,n,r))&&r.P&&r.P(),c},null,{i:n});c&&d.ba()||(d=null)}var p;if(c){var v=d?function(e){return function(){return a(d()[e])}}:function(e){return c[e]},g=function(){return b.a.Ca(d?d():c,a)};g.get=function(e){return c[e]&&a(v(e))},g.has=function(e){return e in c},i=f(c),b.a.q(i,function(t){var a=t.fc.init,i=t.fc.update,o=t.key;if(8===n.nodeType&&!b.f.Z[o])throw Error("The binding '"+o+"' cannot be used with virtual elements");try{"function"==typeof a&&b.l.w(function(){var t=a(n,v(o),g,r.$data,r);if(t&&t.controlsDescendantBindings){if(p!==e)throw Error("Multiple bindings ("+p+" and "+o+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");p=o}}),"function"==typeof i&&b.B(function(){i(n,v(o),g,r.$data,r)},null,{i:n})}catch(u){throw u.message='Unable to process binding "'+o+": "+c[o]+'"\nMessage: '+u.message,u}})}return{shouldBindDescendants:p===e}}function d(e){return e&&e instanceof b.U?e:new b.U(e)}b.d={};var p={script:!0,textarea:!0,template:!0};b.getBindingHandler=function(e){return b.d[e]},b.U=function(n,t,a,r){var i,o=this,u="function"==typeof n&&!b.H(n),c=b.B(function(){var e=u?n():n,i=b.a.c(e);return t?(t.P&&t.P(),b.a.extend(o,t),c&&(o.P=c)):(o.$parents=[],o.$root=i,o.ko=b),o.$rawData=e,o.$data=i,a&&(o[a]=i),r&&r(o,t,i),o.$data},null,{wa:function(){return i&&!b.a.Qb(i)},i:!0});c.ba()&&(o.P=c,c.equalityComparer=null,i=[],c.Ac=function(n){i.push(n),b.a.F.oa(n,function(n){b.a.La(i,n),i.length||(c.k(),o.P=c=e)})})},b.U.prototype.createChildContext=function(e,n,t){return new b.U(e,this,n,function(e,n){e.$parentContext=n,e.$parent=n.$data,e.$parents=(n.$parents||[]).slice(0),e.$parents.unshift(e.$parent),t&&t(e)})},b.U.prototype.extend=function(e){return new b.U(this.P||this.$data,this,null,function(n,t){n.$rawData=t.$rawData,b.a.extend(n,"function"==typeof e?e():e)})};var h=b.a.e.I(),v=b.a.e.I();b.tc=function(e,n){return 2!=arguments.length?b.a.e.get(e,v):(b.a.e.set(e,v,n),void(n.P&&n.P.Ac(e)))},b.Ja=function(e,n,t){return 1===e.nodeType&&b.f.kc(e),l(e,n,d(t),!0)},b.Dc=function(e,n,t){return t=d(t),b.Ja(e,o(n,t,e),t)},b.eb=function(e,n){1!==n.nodeType&&8!==n.nodeType||c(d(e),n,!0)},b.Rb=function(e,t){if(!r&&n.jQuery&&(r=n.jQuery),t&&1!==t.nodeType&&8!==t.nodeType)throw Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");t=t||n.document.body,s(d(e),t,!0)},b.kb=function(n){switch(n.nodeType){case 1:case 8:var t=b.tc(n);if(t)return t;if(n.parentNode)return b.kb(n.parentNode)}return e},b.Jc=function(n){return(n=b.kb(n))?n.$data:e},b.b("bindingHandlers",b.d),b.b("applyBindings",b.Rb),b.b("applyBindingsToDescendants",b.eb),b.b("applyBindingAccessorsToNode",b.Ja),b.b("applyBindingsToNode",b.Dc),b.b("contextFor",b.kb),b.b("dataFor",b.Jc)}(),function(e){function n(n,a){var o,u=r.hasOwnProperty(n)?r[n]:e;u?u.X(a):(u=r[n]=new b.J,u.X(a),t(n,function(e,t){var a=!(!t||!t.synchronous);i[n]={definition:e,Zc:a},delete r[n],o||a?u.notifySubscribers(e):b.Y.Wa(function(){u.notifySubscribers(e)})}),o=!0)}function t(e,n){a("getConfig",[e],function(t){t?a("loadComponent",[e,t],function(e){n(e,t)}):n(null,null)})}function a(n,t,r,i){i||(i=b.g.loaders.slice(0));var o=i.shift();if(o){var u=o[n];if(u){var c=!1;if(u.apply(o,t.concat(function(e){c?r(null):null!==e?r(e):a(n,t,r,i)}))!==e&&(c=!0,!o.suppressLoaderExceptions))throw Error("Component loaders must supply values by invoking the callback, not by returning values synchronously.")}else a(n,t,r,i)}else r(null)}var r={},i={};b.g={get:function(t,a){var r=i.hasOwnProperty(t)?i[t]:e;r?r.Zc?b.l.w(function(){a(r.definition)}):b.Y.Wa(function(){a(r.definition)}):n(t,a)},Xb:function(e){delete i[e]},Jb:a},b.g.loaders=[],b.b("components",b.g),b.b("components.get",b.g.get),b.b("components.clearCachedDefinition",b.g.Xb)}(),function(){function e(e,n,t,a){function r(){0===--u&&a(i)}var i={},u=2,c=t.template;t=t.viewModel,c?o(n,c,function(n){b.g.Jb("loadTemplate",[e,n],function(e){i.template=e,r()})}):r(),t?o(n,t,function(n){b.g.Jb("loadViewModel",[e,n],function(e){i[f]=e,r()})}):r()}function a(e,n,t){if("function"==typeof n)t(function(e){return new n(e)});else if("function"==typeof n[f])t(n[f]);else if("instance"in n){var r=n.instance;t(function(){return r})}else"viewModel"in n?a(e,n.viewModel,t):e("Unknown viewModel value: "+n)}function r(e){switch(b.a.A(e)){case"script":return b.a.ma(e.text);case"textarea":return b.a.ma(e.value);case"template":if(i(e.content))return b.a.ua(e.content.childNodes)}return b.a.ua(e.childNodes)}function i(e){return n.DocumentFragment?e instanceof DocumentFragment:e&&11===e.nodeType}function o(e,t,a){"string"==typeof t.require?u||n.require?(u||n.require)([t.require],a):e("Uses require, but no AMD loader is present"):a(t)}function c(e){return function(n){throw Error("Component '"+e+"': "+n)}}var s={};b.g.register=function(e,n){if(!n)throw Error("Invalid configuration for "+e);if(b.g.ub(e))throw Error("Component "+e+" is already registered");s[e]=n},b.g.ub=function(e){return s.hasOwnProperty(e)},b.g.od=function(e){delete s[e],b.g.Xb(e)},b.g.Zb={getConfig:function(e,n){n(s.hasOwnProperty(e)?s[e]:null)},loadComponent:function(n,t,a){var r=c(n);o(r,t,function(t){e(n,r,t,a)})},loadTemplate:function(e,a,o){if(e=c(e),"string"==typeof a)o(b.a.ma(a));else if(a instanceof Array)o(a);else if(i(a))o(b.a.V(a.childNodes));else if(a.element)if(a=a.element,n.HTMLElement?a instanceof HTMLElement:a&&a.tagName&&1===a.nodeType)o(r(a));else if("string"==typeof a){var u=t.getElementById(a);u?o(r(u)):e("Cannot find element with ID "+a)}else e("Unknown element type: "+a);else e("Unknown template value: "+a)},loadViewModel:function(e,n,t){a(c(e),n,t)}};var f="createViewModel";b.b("components.register",b.g.register),b.b("components.isRegistered",b.g.ub),b.b("components.unregister",b.g.od),b.b("components.defaultLoader",b.g.Zb),b.g.loaders.push(b.g.Zb),b.g.Bc=s}(),function(){function e(e,t){var a=e.getAttribute("params");if(a){var a=n.parseBindingsString(a,t,e,{valueAccessors:!0,bindingParams:!0}),a=b.a.Ca(a,function(n){return b.m(n,null,{i:e})}),r=b.a.Ca(a,function(n){var t=n.t();return n.ba()?b.m({read:function(){return b.a.c(n())},write:b.Ba(t)&&function(e){n()(e)},i:e}):t});return r.hasOwnProperty("$raw")||(r.$raw=a),r}return{$raw:{}}}b.g.getComponentNameForNode=function(e){var n=b.a.A(e);if(b.g.ub(n)&&(-1!=n.indexOf("-")||"[object HTMLUnknownElement]"==""+e||8>=b.a.C&&e.tagName===n))return n},b.g.Ob=function(n,t,a,r){if(1===t.nodeType){var i=b.g.getComponentNameForNode(t);if(i){if(n=n||{},n.component)throw Error('Cannot use the "component" binding on a custom element matching a component');var o={name:i,params:e(t,a)};n.component=r?function(){return o}:o}}return n};var n=new b.Q;9>b.a.C&&(b.g.register=function(e){return function(n){return t.createElement(n),e.apply(this,arguments)}}(b.g.register),t.createDocumentFragment=function(e){return function(){var n,t=e(),a=b.g.Bc;for(n in a)a.hasOwnProperty(n)&&t.createElement(n);return t}}(t.createDocumentFragment))}(),function(e){function n(e,n,t){if(n=n.template,!n)throw Error("Component '"+e+"' has no template");e=b.a.ua(n),b.f.da(t,e)}function t(e,n,t,a){var r=e.createViewModel;return r?r.call(e,a,{element:n,templateNodes:t}):a}var a=0;b.d.component={init:function(r,i,o,u,c){function s(){var e=f&&f.dispose;"function"==typeof e&&e.call(f),l=f=null}var f,l,d=b.a.V(b.f.childNodes(r));return b.a.F.oa(r,s),b.m(function(){var o,u,p=b.a.c(i());if("string"==typeof p?o=p:(o=b.a.c(p.name),u=b.a.c(p.params)),!o)throw Error("No component name specified");var h=l=++a;b.g.get(o,function(a){if(l===h){if(s(),!a)throw Error("Unknown component '"+o+"'");n(o,a,r);var i=t(a,r,d,u);a=c.createChildContext(i,e,function(e){e.$component=i,e.$componentTemplateNodes=d}),f=i,b.eb(a,r)}})},null,{i:r}),{controlsDescendantBindings:!0}}},b.f.Z.component=!0}();var S={"class":"className","for":"htmlFor"};b.d.attr={update:function(n,t){var a=b.a.c(t())||{};b.a.D(a,function(t,a){a=b.a.c(a);var r=!1===a||null===a||a===e;r&&n.removeAttribute(t),8>=b.a.C&&t in S?(t=S[t],r?n.removeAttribute(t):n[t]=a):r||n.setAttribute(t,a.toString()),"name"===t&&b.a.rc(n,r?"":a.toString())})}},function(){b.d.checked={after:["value","attr"],init:function(n,t,a){function r(){var e=n.checked,r=p?o():e;if(!b.va.Sa()&&(!c||e)){var i=b.l.w(t);if(f){var u=l?i.t():i;d!==r?(e&&(b.a.pa(u,r,!0),b.a.pa(u,d,!1)),d=r):b.a.pa(u,r,e),l&&b.Ba(i)&&i(u)}else b.h.Ea(i,a,"checked",r,!0)}}function i(){var e=b.a.c(t());n.checked=f?0<=b.a.o(e,o()):u?e:o()===e}var o=b.nc(function(){return a.has("checkedValue")?b.a.c(a.get("checkedValue")):a.has("value")?b.a.c(a.get("value")):n.value}),u="checkbox"==n.type,c="radio"==n.type;if(u||c){var s=t(),f=u&&b.a.c(s)instanceof Array,l=!(f&&s.push&&s.splice),d=f?o():e,p=c||f;c&&!n.name&&b.d.uniqueName.init(n,function(){return!0}),b.m(r,null,{i:n}),b.a.p(n,"click",r),b.m(i,null,{i:n}),s=e}}},b.h.ea.checked=!0,b.d.checkedValue={update:function(e,n){e.value=b.a.c(n())}}}(),b.d.css={update:function(e,n){var t=b.a.c(n());null!==t&&"object"==typeof t?b.a.D(t,function(n,t){t=b.a.c(t),b.a.bb(e,n,t)}):(t=b.a.$a(String(t||"")),b.a.bb(e,e.__ko__cssValue,!1),e.__ko__cssValue=t,b.a.bb(e,t,!0))}},b.d.enable={update:function(e,n){var t=b.a.c(n());t&&e.disabled?e.removeAttribute("disabled"):t||e.disabled||(e.disabled=!0)}},b.d.disable={update:function(e,n){b.d.enable.update(e,function(){return!b.a.c(n())})}},b.d.event={init:function(e,n,t,a,r){var i=n()||{};b.a.D(i,function(i){"string"==typeof i&&b.a.p(e,i,function(e){var o,u=n()[i];if(u){try{var c=b.a.V(arguments);a=r.$data,c.unshift(a),o=u.apply(a,c)}finally{!0!==o&&(e.preventDefault?e.preventDefault():e.returnValue=!1)}!1===t.get(i+"Bubble")&&(e.cancelBubble=!0,e.stopPropagation&&e.stopPropagation())}})})}},b.d.foreach={ic:function(e){return function(){var n=e(),t=b.a.zb(n);return t&&"number"!=typeof t.length?(b.a.c(n),{foreach:t.data,as:t.as,includeDestroyed:t.includeDestroyed,afterAdd:t.afterAdd,beforeRemove:t.beforeRemove,afterRender:t.afterRender,beforeMove:t.beforeMove,afterMove:t.afterMove,templateEngine:b.W.sb}):{foreach:n,templateEngine:b.W.sb}}},init:function(e,n){return b.d.template.init(e,b.d.foreach.ic(n))},update:function(e,n,t,a,r){return b.d.template.update(e,b.d.foreach.ic(n),t,a,r)}},b.h.ta.foreach=!1,b.f.Z.foreach=!0,b.d.hasfocus={init:function(e,n,t){function a(a){e.__ko_hasfocusUpdating=!0;var r=e.ownerDocument;if("activeElement"in r){var i;try{i=r.activeElement}catch(o){i=r.body}a=i===e}r=n(),b.h.Ea(r,t,"hasfocus",a,!0),e.__ko_hasfocusLastValue=a,e.__ko_hasfocusUpdating=!1}var r=a.bind(null,!0),i=a.bind(null,!1);b.a.p(e,"focus",r),b.a.p(e,"focusin",r),b.a.p(e,"blur",i),b.a.p(e,"focusout",i)},update:function(e,n){var t=!!b.a.c(n());e.__ko_hasfocusUpdating||e.__ko_hasfocusLastValue===t||(t?e.focus():e.blur(),!t&&e.__ko_hasfocusLastValue&&e.ownerDocument.body.focus(),b.l.w(b.a.Da,null,[e,t?"focusin":"focusout"]))}},b.h.ea.hasfocus=!0,b.d.hasFocus=b.d.hasfocus,b.h.ea.hasFocus=!0,b.d.html={init:function(){return{controlsDescendantBindings:!0}},update:function(e,n){b.a.Cb(e,n())}},h("if"),h("ifnot",!1,!0),h("with",!0,!1,function(e,n){return e.createChildContext(n)});var _={};b.d.options={init:function(e){if("select"!==b.a.A(e))throw Error("options binding applies only to SELECT elements");for(;0<e.length;)e.remove(0);return{controlsDescendantBindings:!0}},update:function(n,t,a){function r(){return b.a.Ka(n.options,function(e){return e.selected})}function i(e,n,t){var a=typeof n;return"function"==a?n(e):"string"==a?e[n]:t}function o(e,t){if(h&&f)b.j.ha(n,b.a.c(a.get("value")),!0);else if(p.length){var r=0<=b.a.o(p,b.j.u(t[0]));b.a.sc(t[0],r),h&&!r&&b.l.w(b.a.Da,null,[n,"change"])}}var u=n.multiple,c=0!=n.length&&u?n.scrollTop:null,s=b.a.c(t()),f=a.get("valueAllowUnset")&&a.has("value"),l=a.get("optionsIncludeDestroyed");t={};var d,p=[];f||(u?p=b.a.fb(r(),b.j.u):0<=n.selectedIndex&&p.push(b.j.u(n.options[n.selectedIndex]))),s&&("undefined"==typeof s.length&&(s=[s]),d=b.a.Ka(s,function(n){return l||n===e||null===n||!b.a.c(n._destroy)}),a.has("optionsCaption")&&(s=b.a.c(a.get("optionsCaption")),null!==s&&s!==e&&d.unshift(_)));var h=!1;t.beforeRemove=function(e){n.removeChild(e)},s=o,a.has("optionsAfterRender")&&"function"==typeof a.get("optionsAfterRender")&&(s=function(n,t){o(0,t),b.l.w(a.get("optionsAfterRender"),null,[t[0],n!==_?n:e])}),b.a.Bb(n,d,function(t,r,o){return o.length&&(p=!f&&o[0].selected?[b.j.u(o[0])]:[],h=!0),r=n.ownerDocument.createElement("option"),t===_?(b.a.Za(r,a.get("optionsCaption")),b.j.ha(r,e)):(o=i(t,a.get("optionsValue"),t),b.j.ha(r,b.a.c(o)),t=i(t,a.get("optionsText"),o),b.a.Za(r,t)),[r]},t,s),b.l.w(function(){f?b.j.ha(n,b.a.c(a.get("value")),!0):(u?p.length&&r().length<p.length:p.length&&0<=n.selectedIndex?b.j.u(n.options[n.selectedIndex])!==p[0]:p.length||0<=n.selectedIndex)&&b.a.Da(n,"change")}),b.a.Nc(n),c&&20<Math.abs(c-n.scrollTop)&&(n.scrollTop=c)}},b.d.options.xb=b.a.e.I(),b.d.selectedOptions={after:["options","foreach"],init:function(e,n,t){b.a.p(e,"change",function(){var a=n(),r=[];b.a.q(e.getElementsByTagName("option"),function(e){e.selected&&r.push(b.j.u(e))}),b.h.Ea(a,t,"selectedOptions",r)})},update:function(e,n){if("select"!=b.a.A(e))throw Error("values binding applies only to SELECT elements");var t=b.a.c(n()),a=e.scrollTop;t&&"number"==typeof t.length&&b.a.q(e.getElementsByTagName("option"),function(e){var n=0<=b.a.o(t,b.j.u(e));e.selected!=n&&b.a.sc(e,n)}),e.scrollTop=a}},b.h.ea.selectedOptions=!0,b.d.style={update:function(n,t){var a=b.a.c(t()||{});b.a.D(a,function(t,a){a=b.a.c(a),null!==a&&a!==e&&!1!==a||(a=""),n.style[t]=a})}},b.d.submit={init:function(e,n,t,a,r){if("function"!=typeof n())throw Error("The value for a submit binding must be a function");b.a.p(e,"submit",function(t){var a,i=n();try{a=i.call(r.$data,e)}finally{!0!==a&&(t.preventDefault?t.preventDefault():t.returnValue=!1)}})}},b.d.text={init:function(){return{controlsDescendantBindings:!0}},update:function(e,n){b.a.Za(e,n())}},b.f.Z.text=!0,function(){if(n&&n.navigator)var t=function(e){if(e)return parseFloat(e[1])},a=n.opera&&n.opera.version&&parseInt(n.opera.version()),r=n.navigator.userAgent,i=t(r.match(/^(?:(?!chrome).)*version\/([^ ]*) safari/i)),o=t(r.match(/Firefox\/([^ ]*)/));if(10>b.a.C)var u=b.a.e.I(),c=b.a.e.I(),s=function(e){var n=this.activeElement;(n=n&&b.a.e.get(n,c))&&n(e)},f=function(e,n){var t=e.ownerDocument;b.a.e.get(t,u)||(b.a.e.set(t,u,!0),b.a.p(t,"selectionchange",s)),b.a.e.set(e,c,n)};b.d.textInput={init:function(n,t,r){function u(e,t){b.a.p(n,e,t)}function c(){var a=b.a.c(t());null!==a&&a!==e||(a=""),p!==e&&a===p?b.a.setTimeout(c,4):n.value!==a&&(h=a,n.value=a)}function s(){d||(p=n.value,d=b.a.setTimeout(l,4))}function l(){clearTimeout(d),p=d=e;var a=n.value;h!==a&&(h=a,b.h.Ea(t(),r,"textInput",a))}var d,p,h=n.value,v=9==b.a.C?s:l;10>b.a.C?(u("propertychange",function(e){"value"===e.propertyName&&v(e)}),8==b.a.C&&(u("keyup",l),u("keydown",l)),8<=b.a.C&&(f(n,v),u("dragend",s))):(u("input",l),5>i&&"textarea"===b.a.A(n)?(u("keydown",s),u("paste",s),u("cut",s)):11>a?u("keydown",s):4>o&&(u("DOMAutoComplete",l),u("dragdrop",l),u("drop",l))),u("change",l),b.m(c,null,{i:n})}},b.h.ea.textInput=!0,b.d.textinput={preprocess:function(e,n,t){t("textInput",e)}}}(),b.d.uniqueName={init:function(e,n){if(n()){var t="ko_unique_"+ ++b.d.uniqueName.Ic;b.a.rc(e,t)}}},b.d.uniqueName.Ic=0,b.d.value={after:["options","foreach"],init:function(e,n,t){if("input"!=e.tagName.toLowerCase()||"checkbox"!=e.type&&"radio"!=e.type){var a=["change"],r=t.get("valueUpdate"),i=!1,o=null;r&&("string"==typeof r&&(r=[r]),b.a.ra(a,r),a=b.a.Tb(a));var u=function(){o=null,i=!1;var a=n(),r=b.j.u(e);b.h.Ea(a,t,"value",r)};!b.a.C||"input"!=e.tagName.toLowerCase()||"text"!=e.type||"off"==e.autocomplete||e.form&&"off"==e.form.autocomplete||-1!=b.a.o(a,"propertychange")||(b.a.p(e,"propertychange",function(){i=!0}),b.a.p(e,"focus",function(){i=!1}),b.a.p(e,"blur",function(){i&&u()})),b.a.q(a,function(n){var t=u;b.a.nd(n,"after")&&(t=function(){o=b.j.u(e),b.a.setTimeout(u,0)},n=n.substring(5)),b.a.p(e,n,t)});var c=function(){var a=b.a.c(n()),r=b.j.u(e);if(null!==o&&a===o)b.a.setTimeout(c,0);else if(a!==r)if("select"===b.a.A(e)){var i=t.get("valueAllowUnset"),r=function(){b.j.ha(e,a,i)};r(),i||a===b.j.u(e)?b.a.setTimeout(r,0):b.l.w(b.a.Da,null,[e,"change"])}else b.j.ha(e,a)};b.m(c,null,{i:e})}else b.Ja(e,{checkedValue:n})},update:function(){}},b.h.ea.value=!0,b.d.visible={update:function(e,n){var t=b.a.c(n()),a="none"!=e.style.display;t&&!a?e.style.display="":!t&&a&&(e.style.display="none")}},function(e){b.d[e]={init:function(n,t,a,r,i){return b.d.event.init.call(this,n,function(){var n={};return n[e]=t(),n},a,r,i)}}}("click"),b.O=function(){},b.O.prototype.renderTemplateSource=function(){throw Error("Override renderTemplateSource")},b.O.prototype.createJavaScriptEvaluatorBlock=function(){throw Error("Override createJavaScriptEvaluatorBlock")},b.O.prototype.makeTemplateSource=function(e,n){if("string"==typeof e){n=n||t;var a=n.getElementById(e);if(!a)throw Error("Cannot find template with ID "+e);return new b.v.n(a)}if(1==e.nodeType||8==e.nodeType)return new b.v.qa(e);throw Error("Unknown template type: "+e)},b.O.prototype.renderTemplate=function(e,n,t,a){return e=this.makeTemplateSource(e,a),this.renderTemplateSource(e,n,t,a)},b.O.prototype.isTemplateRewritten=function(e,n){return!1===this.allowTemplateRewriting||this.makeTemplateSource(e,n).data("isRewritten")},b.O.prototype.rewriteTemplate=function(e,n,t){e=this.makeTemplateSource(e,t),n=n(e.text()),e.text(n),e.data("isRewritten",!0)},b.b("templateEngine",b.O),b.Gb=function(){function e(e,n,t,a){e=b.h.yb(e);for(var r=b.h.ta,i=0;i<e.length;i++){var o=e[i].key;if(r.hasOwnProperty(o)){var u=r[o];if("function"==typeof u){if(o=u(e[i].value))throw Error(o)}else if(!u)throw Error("This template engine does not support the '"+o+"' binding within its templates")}}return t="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+b.h.Ua(e,{valueAccessors:!0})+" } })()},'"+t.toLowerCase()+"')",a.createJavaScriptEvaluatorBlock(t)+n}var n=/(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi,t=/\x3c!--\s*ko\b\s*([\s\S]*?)\s*--\x3e/g;return{Oc:function(e,n,t){n.isTemplateRewritten(e,t)||n.rewriteTemplate(e,function(e){return b.Gb.dd(e,n)},t)},dd:function(a,r){return a.replace(n,function(n,t,a,i,o){return e(o,t,a,r)}).replace(t,function(n,t){return e(t,"<!-- ko -->","#comment",r)})},Ec:function(e,n){return b.M.wb(function(t,a){var r=t.nextSibling;r&&r.nodeName.toLowerCase()===n&&b.Ja(r,e,a)})}}}(),b.b("__tr_ambtns",b.Gb.Ec),function(){b.v={},b.v.n=function(e){if(this.n=e){var n=b.a.A(e);this.ab="script"===n?1:"textarea"===n?2:"template"==n&&e.content&&11===e.content.nodeType?3:4}},b.v.n.prototype.text=function(){var e=1===this.ab?"text":2===this.ab?"value":"innerHTML";if(0==arguments.length)return this.n[e];var n=arguments[0];"innerHTML"===e?b.a.Cb(this.n,n):this.n[e]=n};var n=b.a.e.I()+"_";b.v.n.prototype.data=function(e){return 1===arguments.length?b.a.e.get(this.n,n+e):void b.a.e.set(this.n,n+e,arguments[1])};var t=b.a.e.I();b.v.n.prototype.nodes=function(){var n=this.n;return 0==arguments.length?(b.a.e.get(n,t)||{}).jb||(3===this.ab?n.content:4===this.ab?n:e):void b.a.e.set(n,t,{jb:arguments[0]})},b.v.qa=function(e){this.n=e},b.v.qa.prototype=new b.v.n,b.v.qa.prototype.text=function(){if(0==arguments.length){var n=b.a.e.get(this.n,t)||{};return n.Hb===e&&n.jb&&(n.Hb=n.jb.innerHTML),n.Hb}b.a.e.set(this.n,t,{Hb:arguments[0]})},b.b("templateSources",b.v),b.b("templateSources.domElement",b.v.n),b.b("templateSources.anonymousTemplate",b.v.qa)}(),function(){function n(e,n,t){var a;for(n=b.f.nextSibling(n);e&&(a=e)!==n;)e=b.f.nextSibling(a),t(a,e)}function t(e,t){if(e.length){var a=e[0],r=e[e.length-1],i=a.parentNode,o=b.Q.instance,u=o.preprocessNode;if(u){if(n(a,r,function(e,n){var t=e.previousSibling,i=u.call(o,e);i&&(e===a&&(a=i[0]||n),e===r&&(r=i[i.length-1]||t))}),e.length=0,!a)return;a===r?e.push(a):(e.push(a,r),b.a.za(e,i))}n(a,r,function(e){1!==e.nodeType&&8!==e.nodeType||b.Rb(t,e)}),n(a,r,function(e){1!==e.nodeType&&8!==e.nodeType||b.M.yc(e,[t])}),b.a.za(e,i)}}function a(e){return e.nodeType?e:0<e.length?e[0]:null}function r(e,n,r,i,u){u=u||{};var c=(e&&a(e)||r||{}).ownerDocument,s=u.templateEngine||o;if(b.Gb.Oc(r,s,c),r=s.renderTemplate(r,i,u,c),"number"!=typeof r.length||0<r.length&&"number"!=typeof r[0].nodeType)throw Error("Template engine must return an array of DOM nodes");switch(c=!1,n){case"replaceChildren":b.f.da(e,r),c=!0;break;case"replaceNode":b.a.qc(e,r),c=!0;break;case"ignoreTargetNode":break;default:throw Error("Unknown renderMode: "+n)}return c&&(t(r,i),u.afterRender&&b.l.w(u.afterRender,null,[r,i.$data])),r}function i(e,n,t){return b.H(e)?e():"function"==typeof e?e(n,t):e}var o;b.Db=function(n){if(n!=e&&!(n instanceof b.O))throw Error("templateEngine must inherit from ko.templateEngine");o=n},b.Ab=function(n,t,u,c,s){if(u=u||{},(u.templateEngine||o)==e)throw Error("Set a template engine before calling renderTemplate");if(s=s||"replaceChildren",c){var f=a(c);return b.B(function(){var e=t&&t instanceof b.U?t:new b.U(b.a.c(t)),o=i(n,e.$data,e),e=r(c,s,o,e,u);"replaceNode"==s&&(c=e,f=a(c))},null,{wa:function(){return!f||!b.a.nb(f)},i:f&&"replaceNode"==s?f.parentNode:f})}return b.M.wb(function(e){b.Ab(n,t,u,e,"replaceNode")})},b.kd=function(n,a,o,u,c){function s(e,n){t(n,l),o.afterRender&&o.afterRender(n,e),l=null}function f(e,t){l=c.createChildContext(e,o.as,function(e){e.$index=t});var a=i(n,e,l);return r(null,"ignoreTargetNode",a,l,o)}var l;return b.B(function(){var n=b.a.c(a)||[];"undefined"==typeof n.length&&(n=[n]),n=b.a.Ka(n,function(n){return o.includeDestroyed||n===e||null===n||!b.a.c(n._destroy)}),b.l.w(b.a.Bb,null,[u,n,f,o,s])},null,{i:u})};var u=b.a.e.I();b.d.template={init:function(e,n){var t=b.a.c(n());if("string"==typeof t||t.name)b.f.xa(e);else{if("nodes"in t){if(t=t.nodes||[],b.H(t))throw Error('The "nodes" option must be a plain, non-observable array.')}else t=b.f.childNodes(e);t=b.a.jc(t),new b.v.qa(e).nodes(t)}return{controlsDescendantBindings:!0}},update:function(n,t,a,r,i){var o,c=t();t=b.a.c(c),a=!0,r=null,"string"==typeof t?t={}:(c=t.name,"if"in t&&(a=b.a.c(t["if"])),a&&"ifnot"in t&&(a=!b.a.c(t.ifnot)),o=b.a.c(t.data)),"foreach"in t?r=b.kd(c||n,a&&t.foreach||[],t,n,i):a?(i="data"in t?i.createChildContext(o,t.as):i,r=b.Ab(c||n,i,t,n)):b.f.xa(n),i=r,(o=b.a.e.get(n,u))&&"function"==typeof o.k&&o.k(),b.a.e.set(n,u,i&&i.ba()?i:e)}},b.h.ta.template=function(e){return e=b.h.yb(e),1==e.length&&e[0].unknown||b.h.ad(e,"name")?null:"This template engine does not support anonymous templates nested within its templates"},b.f.Z.template=!0}(),b.b("setTemplateEngine",b.Db),b.b("renderTemplate",b.Ab),b.a.dc=function(e,n,t){if(e.length&&n.length){var a,r,i,o,u;for(a=r=0;(!t||a<t)&&(o=e[r]);++r){for(i=0;u=n[i];++i)if(o.value===u.value){o.moved=u.index,u.moved=o.index,n.splice(i,1),a=i=0;break}a+=i}}},b.a.ib=function(){function e(e,n,t,a,r){var i,o,u,c,s,f=Math.min,l=Math.max,d=[],p=e.length,h=n.length,v=h-p||1,g=p+h+1;for(i=0;i<=p;i++)for(c=u,d.push(u=[]),s=f(h,i+v),o=l(0,i-1);o<=s;o++)u[o]=o?i?e[i-1]===n[o-1]?c[o-1]:f(c[o]||g,u[o-1]||g)+1:o+1:i+1;for(f=[],l=[],v=[],i=p,o=h;i||o;)h=d[i][o]-1,o&&h===d[i][o-1]?l.push(f[f.length]={status:t,value:n[--o],index:o}):i&&h===d[i-1][o]?v.push(f[f.length]={status:a,value:e[--i],index:i}):(--o,--i,r.sparse||f.push({status:"retained",value:n[o]}));return b.a.dc(v,l,!r.dontLimitMoves&&10*p),f.reverse()}return function(n,t,a){return a="boolean"==typeof a?{dontLimitMoves:a}:a||{},n=n||[],t=t||[],n.length<t.length?e(n,t,"added","deleted",a):e(t,n,"deleted","added",a)}}(),b.b("utils.compareArrays",b.a.ib),function(){function n(n,t,a,r,i){var o=[],u=b.B(function(){var e=t(a,i,b.a.za(o,n))||[];0<o.length&&(b.a.qc(o,e),r&&b.l.w(r,null,[a,e,i])),o.length=0,b.a.ra(o,e)},null,{i:n,wa:function(){return!b.a.Qb(o)}});return{ca:o,B:u.ba()?u:e}}var t=b.a.e.I(),a=b.a.e.I();b.a.Bb=function(r,i,o,u,c){function s(e,n){k=d[n],m!==n&&(T[e]=k),k.qb(m++),b.a.za(k.ca,r),v.push(k),w.push(k)}function f(e,n){if(e)for(var t=0,a=n.length;t<a;t++)n[t]&&b.a.q(n[t].ca,function(a){e(a,t,n[t].ja)})}i=i||[],u=u||{};var l=b.a.e.get(r,t)===e,d=b.a.e.get(r,t)||[],p=b.a.fb(d,function(e){return e.ja}),h=b.a.ib(p,i,u.dontLimitMoves),v=[],g=0,m=0,y=[],w=[];i=[];for(var k,x,E,T=[],p=[],C=0;x=h[C];C++)switch(E=x.moved,x.status){case"deleted":E===e&&(k=d[g],k.B&&(k.B.k(),k.B=e),b.a.za(k.ca,r).length&&(u.beforeRemove&&(v.push(k),w.push(k),k.ja===a?k=null:i[C]=k),k&&y.push.apply(y,k.ca))),g++;break;case"retained":s(C,g++);break;case"added":E!==e?s(C,E):(k={ja:x.value,qb:b.N(m++)},v.push(k),w.push(k),l||(p[C]=k))}b.a.e.set(r,t,v),f(u.beforeMove,T),b.a.q(y,u.beforeRemove?b.$:b.removeNode);for(var N,C=0,l=b.f.firstChild(r);k=w[C];C++){for(k.ca||b.a.extend(k,n(r,o,k.ja,c,k.qb)),g=0;h=k.ca[g];l=h.nextSibling,N=h,g++)h!==l&&b.f.gc(r,h,N);!k.Wc&&c&&(c(k.ja,k.ca,k.qb),k.Wc=!0)}for(f(u.beforeRemove,i),C=0;C<i.length;++C)i[C]&&(i[C].ja=a);f(u.afterMove,T),f(u.afterAdd,p)}}(),b.b("utils.setDomNodeChildrenFromArrayMapping",b.a.Bb),b.W=function(){this.allowTemplateRewriting=!1},b.W.prototype=new b.O,b.W.prototype.renderTemplateSource=function(e,n,t,a){return(n=(9>b.a.C?0:e.nodes)?e.nodes():null)?b.a.V(n.cloneNode(!0).childNodes):(e=e.text(),b.a.ma(e,a))},b.W.sb=new b.W,b.Db(b.W.sb),b.b("nativeTemplateEngine",b.W),function(){b.vb=function(){var e=this.$c=function(){if(!r||!r.tmpl)return 0;try{if(0<=r.tmpl.tag.tmpl.open.toString().indexOf("__"))return 2}catch(e){}return 1}();this.renderTemplateSource=function(n,a,i,o){if(o=o||t,i=i||{},2>e)throw Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");var u=n.data("precompiled");return u||(u=n.text()||"",u=r.template(null,"{{ko_with $item.koBindingContext}}"+u+"{{/ko_with}}"),n.data("precompiled",u)),n=[a.$data],a=r.extend({koBindingContext:a},i.templateOptions),a=r.tmpl(u,n,a),a.appendTo(o.createElement("div")),r.fragments={},a},this.createJavaScriptEvaluatorBlock=function(e){return"{{ko_code ((function() { return "+e+" })()) }}"},this.addTemplate=function(e,n){t.write("<script type='text/html' id='"+e+"'>"+n+"</script>")},0<e&&(r.tmpl.tag.ko_code={open:"__.push($1 || '');"},r.tmpl.tag.ko_with={open:"with($1) {",close:"} "})},b.vb.prototype=new b.O;var e=new b.vb;0<e.$c&&b.Db(e),b.b("jqueryTmplTemplateEngine",b.vb)}()})}()}();
!function(t){"function"==typeof define&&define.amd?define(["jquery"],t):jQuery.sammy=window.Sammy=t(jQuery)}(function(t){var e,n="([^/]+)",i=/:([\w\d]+)/g,o=/\?([^#]*)?$/,r=function(t){return Array.prototype.slice.call(t)},a=function(t){return"[object Function]"===Object.prototype.toString.call(t)},s=function(t){return"[object Array]"===Object.prototype.toString.call(t)},c=function(t){return"[object RegExp]"===Object.prototype.toString.call(t)},u=function(t){return decodeURIComponent((t||"").replace(/\+/g," "))},h=encodeURIComponent,l=function(t){return String(t).replace(/&(?!\w+;)/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")},p=function(t){return function(){return this.route.apply(this,[t].concat(Array.prototype.slice.call(arguments)))}},f={},g=!(!window.history||!history.pushState),d=[];return e=function(){var n,i,o=r(arguments);return e.apps=e.apps||{},0===o.length||o[0]&&a(o[0])?e.apply(e,["body"].concat(o)):"string"==typeof(i=o.shift())?(n=e.apps[i]||new e.Application,n.element_selector=i,o.length>0&&t.each(o,function(t,e){n.use(e)}),n.element_selector!=i&&delete e.apps[i],e.apps[n.element_selector]=n,n):void 0},e.VERSION="0.7.6",e.addLogger=function(t){d.push(t)},e.log=function(){var n=r(arguments);n.unshift("["+Date()+"]"),t.each(d,function(t,i){i.apply(e,n)})},"undefined"!=typeof window.console?"function"==typeof window.console.log&&a(window.console.log.apply)?e.addLogger(function(){window.console.log.apply(window.console,arguments)}):e.addLogger(function(){window.console.log(arguments)}):"undefined"!=typeof console&&e.addLogger(function(){console.log.apply(console,arguments)}),t.extend(e,{makeArray:r,isFunction:a,isArray:s}),e.Object=function(e){return t.extend(this,e||{})},t.extend(e.Object.prototype,{escapeHTML:l,h:l,toHash:function(){var e={};return t.each(this,function(t,n){a(n)||(e[t]=n)}),e},toHTML:function(){var e="";return t.each(this,function(t,n){a(n)||(e+="<strong>"+t+"</strong> "+n+"<br />")}),e},keys:function(t){var e=[];for(var n in this)a(this[n])&&t||e.push(n);return e},has:function(e){return this[e]&&""!==t.trim(this[e].toString())},join:function(){var t=r(arguments),e=t.shift();return t.join(e)},log:function(){e.log.apply(e,arguments)},toString:function(e){var n=[];return t.each(this,function(t,i){a(i)&&!e||n.push('"'+t+'": '+i.toString())}),"Sammy.Object: {"+n.join(",")+"}"}}),e.targetIsThisWindow=function(e,n){var i=t(e.target).closest(n);if(0===i.length)return!0;var o=i.attr("target");return!o||o===window.name||"_self"===o||"_blank"!==o&&("top"===o&&window===window.top)},e.DefaultLocationProxy=function(t,e){this.app=t,this.is_native=!1,this.has_history=g,this._startPolling(e)},e.DefaultLocationProxy.fullPath=function(t){var e=t.toString().match(/^[^#]*(#.+)$/),n=e?e[1]:"";return[t.pathname,t.search,n].join("")},t.extend(e.DefaultLocationProxy.prototype,{bind:function(){var n=this,i=this.app,o=e.DefaultLocationProxy;t(window).bind("hashchange."+this.app.eventNamespace(),function(t,e){n.is_native!==!1||e||(n.is_native=!0,window.clearInterval(o._interval),o._interval=null),i.trigger("location-changed")}),g&&!i.disable_push_state&&(t(window).bind("popstate."+this.app.eventNamespace(),function(t){i.trigger("location-changed")}),t(document).delegate("a","click.history-"+this.app.eventNamespace(),function(t){if(!(t.isDefaultPrevented()||t.metaKey||t.ctrlKey)){var r=o.fullPath(this),a=this.hostname?this.hostname:function(t){var e=document.createElement("a");return e.href=t.href,e.hostname}(this);return a==window.location.hostname&&i.lookupRoute("get",r)&&e.targetIsThisWindow(t,"a")?(t.preventDefault(),n.setLocation(r),!1):void 0}})),o._bindings||(o._bindings=0),o._bindings++},unbind:function(){t(window).unbind("hashchange."+this.app.eventNamespace()),t(window).unbind("popstate."+this.app.eventNamespace()),t(document).undelegate("a","click.history-"+this.app.eventNamespace()),e.DefaultLocationProxy._bindings--,e.DefaultLocationProxy._bindings<=0&&(window.clearInterval(e.DefaultLocationProxy._interval),e.DefaultLocationProxy._interval=null)},getLocation:function(){return e.DefaultLocationProxy.fullPath(window.location)},setLocation:function(t){if(/^([^#\/]|$)/.test(t)&&(t=g&&!this.app.disable_push_state?"/"+t:"#!/"+t),t!=this.getLocation()){if(!g||this.app.disable_push_state||!/^\//.test(t))return window.location=t;history.pushState({path:t},window.title,t),this.app.trigger("location-changed")}},_startPolling:function(n){var i=this;if(!e.DefaultLocationProxy._interval){n||(n=10);var o=function(){var n=i.getLocation();"undefined"!=typeof e.DefaultLocationProxy._last_location&&n==e.DefaultLocationProxy._last_location||window.setTimeout(function(){t(window).trigger("hashchange",[!0])},0),e.DefaultLocationProxy._last_location=n};o(),e.DefaultLocationProxy._interval=window.setInterval(o,n)}}}),e.Application=function(t){var n=this;this.routes={},this.listeners=new e.Object({}),this.arounds=[],this.befores=[],this.namespace=(new Date).getTime()+"-"+parseInt(1e3*Math.random(),10),this.context_prototype=function(){e.EventContext.apply(this,arguments)},this.context_prototype.prototype=new e.EventContext,a(t)&&t.apply(this,[this]),this._location_proxy||this.setLocationProxy(new e.DefaultLocationProxy(this,this.run_interval_every)),this.debug&&this.bindToAllEvents(function(t,e){n.log(n.toString(),t.cleaned_type,e||{})})},e.Application.prototype=t.extend({},e.Object.prototype,{ROUTE_VERBS:["get","post","put","delete"],APP_EVENTS:["run","unload","lookup-route","run-route","route-found","event-context-before","event-context-after","changed","error","check-form-submission","redirect","location-changed"],_last_route:null,_location_proxy:null,_running:!1,element_selector:"body",debug:!1,raise_errors:!1,run_interval_every:50,disable_push_state:!1,template_engine:null,toString:function(){return"Sammy.Application:"+this.element_selector},$element:function(e){return e?t(this.element_selector).find(e):t(this.element_selector)},use:function(){var t=r(arguments),n=t.shift(),i=n||"";try{t.unshift(this),"string"==typeof n&&(i="Sammy."+n,n=e[n]),n.apply(this,t)}catch(o){"undefined"==typeof n?this.error("Plugin Error: called use() but plugin ("+i.toString()+") is not defined",o):a(n)?this.error("Plugin Error",o):this.error("Plugin Error: called use() but '"+i.toString()+"' is not a function",o)}return this},setLocationProxy:function(t){var e=this._location_proxy;this._location_proxy=t,this.isRunning()&&(e&&e.unbind(),this._location_proxy.bind())},log:function(){e.log.apply(e,Array.prototype.concat.apply([this.element_selector],arguments))},route:function(e,o){var r,s,c=this,u=[],h=Array.prototype.slice.call(arguments,2);if(0===h.length&&a(o)&&(h=[o],o=e,e="any"),e=e.toLowerCase(),o.constructor==String){for(i.lastIndex=0;null!==(s=i.exec(o));)u.push(s[1]);o=new RegExp(o.replace(i,n)+"$")}return t.each(h,function(t,e){"string"==typeof e&&(h[t]=c[e])}),r=function(t){var e={verb:t,path:o,callback:h,param_names:u};c.routes[t]=c.routes[t]||[],c.routes[t].push(e)},"any"===e?t.each(this.ROUTE_VERBS,function(t,e){r(e)}):r(e),this},get:p("get"),post:p("post"),put:p("put"),del:p("delete"),any:p("any"),mapRoutes:function(e){var n=this;return t.each(e,function(t,e){n.route.apply(n,e)}),this},eventNamespace:function(){return["sammy-app",this.namespace].join("-")},bind:function(t,e,n){var i=this;"undefined"==typeof n&&(n=e);var o=function(){var t,e,o;t=arguments[0],o=arguments[1],o&&o.context?(e=o.context,delete o.context):e=new i.context_prototype(i,"bind",t.type,o,t.target),t.cleaned_type=t.type.replace(i.eventNamespace(),""),n.apply(e,[t,o])};return this.listeners[t]||(this.listeners[t]=[]),this.listeners[t].push(o),this.isRunning()&&this._listen(t,o),this},trigger:function(t,e){return this.$element().trigger([t,this.eventNamespace()].join("."),[e]),this},refresh:function(){return this.last_location=null,this.trigger("location-changed"),this},before:function(t,e){return a(t)&&(e=t,t={}),this.befores.push([t,e]),this},after:function(t){return this.bind("event-context-after",t)},around:function(t){return this.arounds.push(t),this},onComplete:function(t){return this._onComplete=t,this},isRunning:function(){return this._running},helpers:function(e){return t.extend(this.context_prototype.prototype,e),this},helper:function(t,e){return this.context_prototype.prototype[t]=e,this},run:function(n){if(this.isRunning())return!1;var i=this;return t.each(this.listeners.toHash(),function(e,n){t.each(n,function(t,n){i._listen(e,n)})}),this.trigger("run",{start_url:n}),this._running=!0,this.last_location=null,/\#(.+)/.test(this.getLocation())||"undefined"==typeof n||this.setLocation(n),this._checkLocation(),this._location_proxy.bind(),this.bind("location-changed",function(){i._checkLocation()}),this.bind("submit",function(n){if(!e.targetIsThisWindow(n,"form"))return!0;var o=i._checkFormSubmission(t(n.target).closest("form"));return o===!1&&n.preventDefault()}),t(window).bind("unload",function(){i.unload()}),this.trigger("changed")},unload:function(){if(!this.isRunning())return!1;var e=this;return this.trigger("unload"),this._location_proxy.unbind(),this.$element().unbind("submit").removeClass(e.eventNamespace()),t.each(this.listeners.toHash(),function(n,i){t.each(i,function(t,i){e._unlisten(n,i)})}),this._running=!1,this},destroy:function(){return this.unload(),delete e.apps[this.element_selector],this},bindToAllEvents:function(e){var n=this;return t.each(this.APP_EVENTS,function(t,i){n.bind(i,e)}),t.each(this.listeners.keys(!0),function(i,o){t.inArray(o,n.APP_EVENTS)==-1&&n.bind(o,e)}),this},routablePath:function(t){return t.replace(o,"")},lookupRoute:function(t,e){var n,i,o=this,r=!1,a=0;if("undefined"!=typeof this.routes[t])for(n=this.routes[t].length;a<n;a++)if(i=this.routes[t][a],o.routablePath(e).match(i.path)){r=i;break}return r},runRoute:function(e,n,i,o){var r,a,s,c,h,l,p,f,g=this,d=this.lookupRoute(e,n);if(this.debug&&this.log("runRoute",[e,n].join(" ")),this.trigger("run-route",{verb:e,path:n,params:i}),"undefined"==typeof i&&(i={}),t.extend(i,this._parseQueryString(n)),d){this.trigger("route-found",{route:d}),null!==(p=d.path.exec(this.routablePath(n)))&&(p.shift(),t.each(p,function(t,e){d.param_names[t]?i[d.param_names[t]]=u(e):(i.splat||(i.splat=[]),i.splat.push(u(e)))})),r=new this.context_prototype(this,e,n,i,o),s=this.arounds.slice(0),c=this.befores.slice(0),l=[r],i.splat&&(l=l.concat(i.splat)),a=function(){for(var t,e,n;c.length>0;)if(h=c.shift(),g.contextMatchesOptions(r,h[0])&&(t=h[1].apply(r,[r]),t===!1))return!1;return g.last_route=d,r.trigger("event-context-before",{context:r}),"function"==typeof d.callback&&(d.callback=[d.callback]),d.callback&&d.callback.length&&(e=-1,n=function(){e++,d.callback[e]?t=d.callback[e].apply(r,l):g._onComplete&&g._onComplete(r)},l.push(n),n()),r.trigger("event-context-after",{context:r}),t},t.each(s.reverse(),function(t,e){var n=a;a=function(){return e.apply(r,[n])}});try{f=a()}catch(_){this.error(["500 Error",e,n].join(" "),_)}return f}return this.notFound(e,n)},contextMatchesOptions:function(e,n,i){var o=n;if(("string"==typeof o||c(o))&&(o={path:o}),"undefined"==typeof i&&(i=!0),t.isEmptyObject(o))return!0;if(s(o.path)){var r,a,u,h;for(r=[],a=0,h=o.path.length;a<h;a+=1)u=t.extend({},o,{path:o.path[a]}),r.push(this.contextMatchesOptions(e,u));var l=t.inArray(!0,r)>-1;return i?l:!l}if(o.only)return this.contextMatchesOptions(e,o.only,!0);if(o.except)return this.contextMatchesOptions(e,o.except,!1);var p=!0,f=!0;return o.path&&(c(o.path)||(o.path=new RegExp(o.path.toString()+"$")),p=o.path.test(e.path)),o.verb&&(f="string"==typeof o.verb?o.verb===e.verb:o.verb.indexOf(e.verb)>-1),i?f&&p:!(f&&p)},getLocation:function(){return this._location_proxy.getLocation()},setLocation:function(t){return this._location_proxy.setLocation(t)},swap:function(t,e){var n=this.$element().html(t);return a(e)&&e(t),n},templateCache:function(t,e){return"undefined"!=typeof e?f[t]=e:f[t]},clearTemplateCache:function(){return f={}},notFound:function(t,e){var n=this.error(["404 Not Found",t,e].join(" "));return"get"!==t||n},error:function(t,e){if(e||(e=new Error),e.message=[t,e.message].join(" "),this.trigger("error",{message:e.message,error:e}),this.raise_errors)throw e;this.log(e.message,e)},_checkLocation:function(){var t,e;return t=this.getLocation(),this.last_location&&"get"==this.last_location[0]&&this.last_location[1]==t||(this.last_location=["get",t],e=this.runRoute("get",t)),e},_getFormVerb:function(e){var n,i,o=t(e);return i=o.find('input[name="_method"]'),i.length>0&&(n=i.val()),n||(n=o[0].getAttribute("method")),n&&""!==n||(n="get"),t.trim(n.toString().toLowerCase())},_checkFormSubmission:function(e){var n,i,o,r,a;return this.trigger("check-form-submission",{form:e}),n=t(e),i=n.attr("action")||"",o=this._getFormVerb(n),this.debug&&this.log("_checkFormSubmission",n,i,o),"get"===o?(r=this._serializeFormParams(n),""!==r&&(i+="?"+r),this.setLocation(i),a=!1):(r=t.extend({},this._parseFormParams(n)),a=this.runRoute(o,i,r,e.get(0))),"undefined"!=typeof a&&a},_serializeFormParams:function(t){var e,n="",i=t.serializeArray();if(i.length>0)for(n=this._encodeFormPair(i[0].name,i[0].value),e=1;e<i.length;e++)n=n+"&"+this._encodeFormPair(i[e].name,i[e].value);return n},_encodeFormPair:function(t,e){return h(t)+"="+h(e)},_parseFormParams:function(t){var e,n={},i=t.serializeArray();for(e=0;e<i.length;e++)n=this._parseParamPair(n,i[e].name,i[e].value);return n},_parseQueryString:function(t){var e,n,i,r,a={};if(e=t.match(o),e&&e[1])for(n=e[1].split("&"),r=0;r<n.length;r++)i=n[r].split("="),a=this._parseParamPair(a,u(i[0]),u(i[1]||""));return a},_parseParamPair:function(t,e,n){return"undefined"!=typeof t[e]?s(t[e])?t[e].push(n):t[e]=[t[e],n]:t[e]=n,t},_listen:function(t,e){return this.$element().bind([t,this.eventNamespace()].join("."),e)},_unlisten:function(t,e){return this.$element().unbind([t,this.eventNamespace()].join("."),e)}}),e.RenderContext=function(t){this.event_context=t,this.callbacks=[],this.previous_content=null,this.content=null,this.next_engine=!1,this.waiting=!1},e.RenderContext.prototype=t.extend({},e.Object.prototype,{then:function(t){if(!a(t)){if(!("string"==typeof t&&t in this.event_context))return this;var e=this.event_context[t];t=function(t){return e.apply(this.event_context,[t])}}var n=this;return this.waiting?this.callbacks.push(t):(this.wait(),window.setTimeout(function(){var e=t.apply(n,[n.content,n.previous_content]);e!==!1&&n.next(e)},0)),this},wait:function(){this.waiting=!0},next:function(t){this.waiting=!1,"undefined"!=typeof t&&(this.previous_content=this.content,this.content=t),this.callbacks.length>0&&this.then(this.callbacks.shift())},load:function(e,n,i){var o=this;return this.then(function(){var r,s,c;return a(n)?(i=n,n={}):n=t.extend({},n),i&&this.then(i),"string"==typeof e?(c=e.match(/\.json(\?|$)/)||n.json,r=c?n.cache===!0:n.cache!==!1,o.next_engine=o.event_context.engineFor(e),delete n.cache,delete n.json,n.engine&&(o.next_engine=n.engine,delete n.engine),r&&(s=this.event_context.app.templateCache(e))?s:(this.wait(),t.ajax(t.extend({url:e,data:{},dataType:c?"json":"text",type:"get",success:function(t){r&&o.event_context.app.templateCache(e,t),o.next(t)}},n)),!1)):e.nodeType?e.innerHTML:e.selector?(o.next_engine=e.attr("data-engine"),n.clone===!1?e.remove()[0].innerHTML.toString():e[0].innerHTML.toString()):void 0})},loadPartials:function(t){var e;if(t){this.partials=this.partials||{};for(e in t)!function(e,n){e.load(t[n]).then(function(t){this.partials[n]=t})}(this,e)}return this},render:function(t,e,n,i){return a(t)&&!e?this.then(t):(a(e)?(i=n,n=e,e=null):n&&!a(n)&&(i=n,n=null),this.loadPartials(i).load(t).interpolate(e,t).then(n))},partial:function(t,e,n,i){return a(n)?this.render(t,e,i).swap(n):a(e)?this.render(t,{},n).swap(e):this.render(t,e,n).swap()},send:function(){var t=this,e=r(arguments),n=e.shift();return s(e[0])&&(e=e[0]),this.then(function(i){return e.push(function(e){t.next(e)}),t.wait(),n.apply(n,e),!1})},collect:function(e,n,i){var o=this,r=function(){a(e)&&(n=e,e=this.content);var i=[],r=!1;return t.each(e,function(t,e){var a=n.apply(o,[t,e]);return a.jquery&&1==a.length&&(a=a[0],r=!0),i.push(a),a}),r?i:i.join("")};return i?r():this.then(r)},renderEach:function(e,n,i,o){return s(n)&&(o=i,i=n,n=null),this.load(e).then(function(r){var a=this;return i||(i=s(this.previous_content)?this.previous_content:[]),o?void t.each(i,function(t,i){var s={},c=this.next_engine||e;n?s[n]=i:s=i,o(i,a.event_context.interpolate(r,s,c))}):this.collect(i,function(t,i){var o={},a=this.next_engine||e;return n?o[n]=i:o=i,this.event_context.interpolate(r,o,a)},!0)})},interpolate:function(t,e,n){var i=this;return this.then(function(o,r){!t&&r&&(t=r),this.next_engine&&(e=this.next_engine,this.next_engine=!1);var a=i.event_context.interpolate(o,t,e,this.partials);return n?r+a:a})},swap:function(t){return this.then(function(e){return this.event_context.swap(e,t),e}).trigger("changed",{})},appendTo:function(e){return this.then(function(n){t(e).append(n)}).trigger("changed",{})},prependTo:function(e){return this.then(function(n){t(e).prepend(n)}).trigger("changed",{})},replace:function(e){return this.then(function(n){t(e).html(n)}).trigger("changed",{})},trigger:function(t,e){return this.then(function(n){return"undefined"==typeof e&&(e={content:n}),this.event_context.trigger(t,e),n})}}),e.EventContext=function(t,n,i,o,r){this.app=t,this.verb=n,this.path=i,this.params=new e.Object(o),this.target=r},e.EventContext.prototype=t.extend({},e.Object.prototype,{$element:function(){return this.app.$element(r(arguments).shift())},engineFor:function(t){var e,n=this;return a(t)?t:(t=(t||n.app.template_engine).toString(),(e=t.match(/\.([^\.\?\#]+)(\?|$)/))&&(t=e[1]),t&&a(n[t])?n[t]:n.app.template_engine?this.engineFor(n.app.template_engine):function(t,e){return t})},interpolate:function(t,e,n,i){return this.engineFor(n).apply(this,[t,e,i])},render:function(t,n,i,o){return new e.RenderContext(this).render(t,n,i,o)},renderEach:function(t,n,i,o){return new e.RenderContext(this).renderEach(t,n,i,o)},load:function(t,n,i){return new e.RenderContext(this).load(t,n,i)},loadPartials:function(t){return new e.RenderContext(this).loadPartials(t)},partial:function(t,n,i,o){return new e.RenderContext(this).partial(t,n,i,o)},send:function(){var t=new e.RenderContext(this);return t.send.apply(t,arguments)},redirect:function(){var e,n=r(arguments),i=this.app.getLocation(),o=n.length;if(o>1){for(var a=0,s=[],c=[],u={},h=!1;a<o;a++)"string"==typeof n[a]?s.push(n[a]):(t.extend(u,n[a]),h=!0);if(e=s.join("/"),h){for(var l in u)c.push(this.app._encodeFormPair(l,u[l]));e+="?"+c.join("&")}}else e=n[0];this.trigger("redirect",{to:e}),this.app.last_location=[this.verb,this.path],this.app.setLocation(e),new RegExp(e).test(i)&&this.app.trigger("location-changed")},trigger:function(t,e){return"undefined"==typeof e&&(e={}),e.context||(e.context=this),this.app.trigger(t,e)},eventNamespace:function(){return this.app.eventNamespace()},swap:function(t,e){return this.app.swap(t,e)},notFound:function(){return this.app.notFound(this.verb,this.path)},json:function(e){return t.parseJSON(e)},toString:function(){return"Sammy.EventContext: "+[this.verb,this.path,this.params].join(" ")}}),e});
(function(){function n(n){function t(t,r,e,u,i,o){for(;i>=0&&i<o;i+=n){var a=u?u[i]:i;e=r(e,t[a],a,t)}return e}return function(r,e,u,i){e=b(e,i,4);var o=!k(r)&&m.keys(r),a=(o||r).length,c=n>0?0:a-1;return arguments.length<3&&(u=r[o?o[c]:c],c+=n),t(r,e,u,o,c,a)}}function t(n){return function(t,r,e){r=x(r,e);for(var u=O(t),i=n>0?0:u-1;i>=0&&i<u;i+=n)if(r(t[i],i,t))return i;return-1}}function r(n,t,r){return function(e,u,i){var o=0,a=O(e);if("number"==typeof i)n>0?o=i>=0?i:Math.max(i+a,o):a=i>=0?Math.min(i+1,a):i+a+1;else if(r&&i&&a)return i=r(e,u),e[i]===u?i:-1;if(u!==u)return i=t(l.call(e,o,a),m.isNaN),i>=0?i+o:-1;for(i=n>0?o:a-1;i>=0&&i<a;i+=n)if(e[i]===u)return i;return-1}}function e(n,t){var r=I.length,e=n.constructor,u=m.isFunction(e)&&e.prototype||a,i="constructor";for(m.has(n,i)&&!m.contains(t,i)&&t.push(i);r--;)i=I[r],i in n&&n[i]!==u[i]&&!m.contains(t,i)&&t.push(i)}var u=this,i=u._,o=Array.prototype,a=Object.prototype,c=Function.prototype,f=o.push,l=o.slice,s=a.toString,p=a.hasOwnProperty,h=Array.isArray,v=Object.keys,y=c.bind,d=Object.create,g=function(){},m=function(n){return n instanceof m?n:this instanceof m?void(this._wrapped=n):new m(n)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=m),exports._=m):u._=m,m.VERSION="1.8.3";var b=function(n,t,r){if(void 0===t)return n;switch(null==r?3:r){case 1:return function(r){return n.call(t,r)};case 2:return function(r,e){return n.call(t,r,e)};case 3:return function(r,e,u){return n.call(t,r,e,u)};case 4:return function(r,e,u,i){return n.call(t,r,e,u,i)}}return function(){return n.apply(t,arguments)}},x=function(n,t,r){return null==n?m.identity:m.isFunction(n)?b(n,t,r):m.isObject(n)?m.matcher(n):m.property(n)};m.iteratee=function(n,t){return x(n,t,1/0)};var _=function(n,t){return function(r){var e=arguments.length;if(e<2||null==r)return r;for(var u=1;u<e;u++)for(var i=arguments[u],o=n(i),a=o.length,c=0;c<a;c++){var f=o[c];t&&void 0!==r[f]||(r[f]=i[f])}return r}},j=function(n){if(!m.isObject(n))return{};if(d)return d(n);g.prototype=n;var t=new g;return g.prototype=null,t},w=function(n){return function(t){return null==t?void 0:t[n]}},A=Math.pow(2,53)-1,O=w("length"),k=function(n){var t=O(n);return"number"==typeof t&&t>=0&&t<=A};m.each=m.forEach=function(n,t,r){t=b(t,r);var e,u;if(k(n))for(e=0,u=n.length;e<u;e++)t(n[e],e,n);else{var i=m.keys(n);for(e=0,u=i.length;e<u;e++)t(n[i[e]],i[e],n)}return n},m.map=m.collect=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=Array(u),o=0;o<u;o++){var a=e?e[o]:o;i[o]=t(n[a],a,n)}return i},m.reduce=m.foldl=m.inject=n(1),m.reduceRight=m.foldr=n(-1),m.find=m.detect=function(n,t,r){var e;if(e=k(n)?m.findIndex(n,t,r):m.findKey(n,t,r),void 0!==e&&e!==-1)return n[e]},m.filter=m.select=function(n,t,r){var e=[];return t=x(t,r),m.each(n,function(n,r,u){t(n,r,u)&&e.push(n)}),e},m.reject=function(n,t,r){return m.filter(n,m.negate(x(t)),r)},m.every=m.all=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=0;i<u;i++){var o=e?e[i]:i;if(!t(n[o],o,n))return!1}return!0},m.some=m.any=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=0;i<u;i++){var o=e?e[i]:i;if(t(n[o],o,n))return!0}return!1},m.contains=m.includes=m.include=function(n,t,r,e){return k(n)||(n=m.values(n)),("number"!=typeof r||e)&&(r=0),m.indexOf(n,t,r)>=0},m.invoke=function(n,t){var r=l.call(arguments,2),e=m.isFunction(t);return m.map(n,function(n){var u=e?t:n[t];return null==u?u:u.apply(n,r)})},m.pluck=function(n,t){return m.map(n,m.property(t))},m.where=function(n,t){return m.filter(n,m.matcher(t))},m.findWhere=function(n,t){return m.find(n,m.matcher(t))},m.max=function(n,t,r){var e,u,i=-(1/0),o=-(1/0);if(null==t&&null!=n){n=k(n)?n:m.values(n);for(var a=0,c=n.length;a<c;a++)e=n[a],e>i&&(i=e)}else t=x(t,r),m.each(n,function(n,r,e){u=t(n,r,e),(u>o||u===-(1/0)&&i===-(1/0))&&(i=n,o=u)});return i},m.min=function(n,t,r){var e,u,i=1/0,o=1/0;if(null==t&&null!=n){n=k(n)?n:m.values(n);for(var a=0,c=n.length;a<c;a++)e=n[a],e<i&&(i=e)}else t=x(t,r),m.each(n,function(n,r,e){u=t(n,r,e),(u<o||u===1/0&&i===1/0)&&(i=n,o=u)});return i},m.shuffle=function(n){for(var t,r=k(n)?n:m.values(n),e=r.length,u=Array(e),i=0;i<e;i++)t=m.random(0,i),t!==i&&(u[i]=u[t]),u[t]=r[i];return u},m.sample=function(n,t,r){return null==t||r?(k(n)||(n=m.values(n)),n[m.random(n.length-1)]):m.shuffle(n).slice(0,Math.max(0,t))},m.sortBy=function(n,t,r){return t=x(t,r),m.pluck(m.map(n,function(n,r,e){return{value:n,index:r,criteria:t(n,r,e)}}).sort(function(n,t){var r=n.criteria,e=t.criteria;if(r!==e){if(r>e||void 0===r)return 1;if(r<e||void 0===e)return-1}return n.index-t.index}),"value")};var F=function(n){return function(t,r,e){var u={};return r=x(r,e),m.each(t,function(e,i){var o=r(e,i,t);n(u,e,o)}),u}};m.groupBy=F(function(n,t,r){m.has(n,r)?n[r].push(t):n[r]=[t]}),m.indexBy=F(function(n,t,r){n[r]=t}),m.countBy=F(function(n,t,r){m.has(n,r)?n[r]++:n[r]=1}),m.toArray=function(n){return n?m.isArray(n)?l.call(n):k(n)?m.map(n,m.identity):m.values(n):[]},m.size=function(n){return null==n?0:k(n)?n.length:m.keys(n).length},m.partition=function(n,t,r){t=x(t,r);var e=[],u=[];return m.each(n,function(n,r,i){(t(n,r,i)?e:u).push(n)}),[e,u]},m.first=m.head=m.take=function(n,t,r){if(null!=n)return null==t||r?n[0]:m.initial(n,n.length-t)},m.initial=function(n,t,r){return l.call(n,0,Math.max(0,n.length-(null==t||r?1:t)))},m.last=function(n,t,r){if(null!=n)return null==t||r?n[n.length-1]:m.rest(n,Math.max(0,n.length-t))},m.rest=m.tail=m.drop=function(n,t,r){return l.call(n,null==t||r?1:t)},m.compact=function(n){return m.filter(n,m.identity)};var S=function(n,t,r,e){for(var u=[],i=0,o=e||0,a=O(n);o<a;o++){var c=n[o];if(k(c)&&(m.isArray(c)||m.isArguments(c))){t||(c=S(c,t,r));var f=0,l=c.length;for(u.length+=l;f<l;)u[i++]=c[f++]}else r||(u[i++]=c)}return u};m.flatten=function(n,t){return S(n,t,!1)},m.without=function(n){return m.difference(n,l.call(arguments,1))},m.uniq=m.unique=function(n,t,r,e){m.isBoolean(t)||(e=r,r=t,t=!1),null!=r&&(r=x(r,e));for(var u=[],i=[],o=0,a=O(n);o<a;o++){var c=n[o],f=r?r(c,o,n):c;t?(o&&i===f||u.push(c),i=f):r?m.contains(i,f)||(i.push(f),u.push(c)):m.contains(u,c)||u.push(c)}return u},m.union=function(){return m.uniq(S(arguments,!0,!0))},m.intersection=function(n){for(var t=[],r=arguments.length,e=0,u=O(n);e<u;e++){var i=n[e];if(!m.contains(t,i)){for(var o=1;o<r&&m.contains(arguments[o],i);o++);o===r&&t.push(i)}}return t},m.difference=function(n){var t=S(arguments,!0,!0,1);return m.filter(n,function(n){return!m.contains(t,n)})},m.zip=function(){return m.unzip(arguments)},m.unzip=function(n){for(var t=n&&m.max(n,O).length||0,r=Array(t),e=0;e<t;e++)r[e]=m.pluck(n,e);return r},m.object=function(n,t){for(var r={},e=0,u=O(n);e<u;e++)t?r[n[e]]=t[e]:r[n[e][0]]=n[e][1];return r},m.findIndex=t(1),m.findLastIndex=t(-1),m.sortedIndex=function(n,t,r,e){r=x(r,e,1);for(var u=r(t),i=0,o=O(n);i<o;){var a=Math.floor((i+o)/2);r(n[a])<u?i=a+1:o=a}return i},m.indexOf=r(1,m.findIndex,m.sortedIndex),m.lastIndexOf=r(-1,m.findLastIndex),m.range=function(n,t,r){null==t&&(t=n||0,n=0),r=r||1;for(var e=Math.max(Math.ceil((t-n)/r),0),u=Array(e),i=0;i<e;i++,n+=r)u[i]=n;return u};var E=function(n,t,r,e,u){if(!(e instanceof t))return n.apply(r,u);var i=j(n.prototype),o=n.apply(i,u);return m.isObject(o)?o:i};m.bind=function(n,t){if(y&&n.bind===y)return y.apply(n,l.call(arguments,1));if(!m.isFunction(n))throw new TypeError("Bind must be called on a function");var r=l.call(arguments,2),e=function(){return E(n,e,t,this,r.concat(l.call(arguments)))};return e},m.partial=function(n){var t=l.call(arguments,1),r=function(){for(var e=0,u=t.length,i=Array(u),o=0;o<u;o++)i[o]=t[o]===m?arguments[e++]:t[o];for(;e<arguments.length;)i.push(arguments[e++]);return E(n,r,this,this,i)};return r},m.bindAll=function(n){var t,r,e=arguments.length;if(e<=1)throw new Error("bindAll must be passed function names");for(t=1;t<e;t++)r=arguments[t],n[r]=m.bind(n[r],n);return n},m.memoize=function(n,t){var r=function(e){var u=r.cache,i=""+(t?t.apply(this,arguments):e);return m.has(u,i)||(u[i]=n.apply(this,arguments)),u[i]};return r.cache={},r},m.delay=function(n,t){var r=l.call(arguments,2);return setTimeout(function(){return n.apply(null,r)},t)},m.defer=m.partial(m.delay,m,1),m.throttle=function(n,t,r){var e,u,i,o=null,a=0;r||(r={});var c=function(){a=r.leading===!1?0:m.now(),o=null,i=n.apply(e,u),o||(e=u=null)};return function(){var f=m.now();a||r.leading!==!1||(a=f);var l=t-(f-a);return e=this,u=arguments,l<=0||l>t?(o&&(clearTimeout(o),o=null),a=f,i=n.apply(e,u),o||(e=u=null)):o||r.trailing===!1||(o=setTimeout(c,l)),i}},m.debounce=function(n,t,r){var e,u,i,o,a,c=function(){var f=m.now()-o;f<t&&f>=0?e=setTimeout(c,t-f):(e=null,r||(a=n.apply(i,u),e||(i=u=null)))};return function(){i=this,u=arguments,o=m.now();var f=r&&!e;return e||(e=setTimeout(c,t)),f&&(a=n.apply(i,u),i=u=null),a}},m.wrap=function(n,t){return m.partial(t,n)},m.negate=function(n){return function(){return!n.apply(this,arguments)}},m.compose=function(){var n=arguments,t=n.length-1;return function(){for(var r=t,e=n[t].apply(this,arguments);r--;)e=n[r].call(this,e);return e}},m.after=function(n,t){return function(){if(--n<1)return t.apply(this,arguments)}},m.before=function(n,t){var r;return function(){return--n>0&&(r=t.apply(this,arguments)),n<=1&&(t=null),r}},m.once=m.partial(m.before,2);var M=!{toString:null}.propertyIsEnumerable("toString"),I=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];m.keys=function(n){if(!m.isObject(n))return[];if(v)return v(n);var t=[];for(var r in n)m.has(n,r)&&t.push(r);return M&&e(n,t),t},m.allKeys=function(n){if(!m.isObject(n))return[];var t=[];for(var r in n)t.push(r);return M&&e(n,t),t},m.values=function(n){for(var t=m.keys(n),r=t.length,e=Array(r),u=0;u<r;u++)e[u]=n[t[u]];return e},m.mapObject=function(n,t,r){t=x(t,r);for(var e,u=m.keys(n),i=u.length,o={},a=0;a<i;a++)e=u[a],o[e]=t(n[e],e,n);return o},m.pairs=function(n){for(var t=m.keys(n),r=t.length,e=Array(r),u=0;u<r;u++)e[u]=[t[u],n[t[u]]];return e},m.invert=function(n){for(var t={},r=m.keys(n),e=0,u=r.length;e<u;e++)t[n[r[e]]]=r[e];return t},m.functions=m.methods=function(n){var t=[];for(var r in n)m.isFunction(n[r])&&t.push(r);return t.sort()},m.extend=_(m.allKeys),m.extendOwn=m.assign=_(m.keys),m.findKey=function(n,t,r){t=x(t,r);for(var e,u=m.keys(n),i=0,o=u.length;i<o;i++)if(e=u[i],t(n[e],e,n))return e},m.pick=function(n,t,r){var e,u,i={},o=n;if(null==o)return i;m.isFunction(t)?(u=m.allKeys(o),e=b(t,r)):(u=S(arguments,!1,!1,1),e=function(n,t,r){return t in r},o=Object(o));for(var a=0,c=u.length;a<c;a++){var f=u[a],l=o[f];e(l,f,o)&&(i[f]=l)}return i},m.omit=function(n,t,r){if(m.isFunction(t))t=m.negate(t);else{var e=m.map(S(arguments,!1,!1,1),String);t=function(n,t){return!m.contains(e,t)}}return m.pick(n,t,r)},m.defaults=_(m.allKeys,!0),m.create=function(n,t){var r=j(n);return t&&m.extendOwn(r,t),r},m.clone=function(n){return m.isObject(n)?m.isArray(n)?n.slice():m.extend({},n):n},m.tap=function(n,t){return t(n),n},m.isMatch=function(n,t){var r=m.keys(t),e=r.length;if(null==n)return!e;for(var u=Object(n),i=0;i<e;i++){var o=r[i];if(t[o]!==u[o]||!(o in u))return!1}return!0};var N=function(n,t,r,e){if(n===t)return 0!==n||1/n===1/t;if(null==n||null==t)return n===t;n instanceof m&&(n=n._wrapped),t instanceof m&&(t=t._wrapped);var u=s.call(n);if(u!==s.call(t))return!1;switch(u){case"[object RegExp]":case"[object String]":return""+n==""+t;case"[object Number]":return+n!==+n?+t!==+t:0===+n?1/+n===1/t:+n===+t;case"[object Date]":case"[object Boolean]":return+n===+t}var i="[object Array]"===u;if(!i){if("object"!=typeof n||"object"!=typeof t)return!1;var o=n.constructor,a=t.constructor;if(o!==a&&!(m.isFunction(o)&&o instanceof o&&m.isFunction(a)&&a instanceof a)&&"constructor"in n&&"constructor"in t)return!1}r=r||[],e=e||[];for(var c=r.length;c--;)if(r[c]===n)return e[c]===t;if(r.push(n),e.push(t),i){if(c=n.length,c!==t.length)return!1;for(;c--;)if(!N(n[c],t[c],r,e))return!1}else{var f,l=m.keys(n);if(c=l.length,m.keys(t).length!==c)return!1;for(;c--;)if(f=l[c],!m.has(t,f)||!N(n[f],t[f],r,e))return!1}return r.pop(),e.pop(),!0};m.isEqual=function(n,t){return N(n,t)},m.isEmpty=function(n){return null==n||(k(n)&&(m.isArray(n)||m.isString(n)||m.isArguments(n))?0===n.length:0===m.keys(n).length)},m.isElement=function(n){return!(!n||1!==n.nodeType)},m.isArray=h||function(n){return"[object Array]"===s.call(n)},m.isObject=function(n){var t=typeof n;return"function"===t||"object"===t&&!!n},m.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(n){m["is"+n]=function(t){return s.call(t)==="[object "+n+"]"}}),m.isArguments(arguments)||(m.isArguments=function(n){return m.has(n,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(m.isFunction=function(n){return"function"==typeof n||!1}),m.isFinite=function(n){return isFinite(n)&&!isNaN(parseFloat(n))},m.isNaN=function(n){return m.isNumber(n)&&n!==+n},m.isBoolean=function(n){return n===!0||n===!1||"[object Boolean]"===s.call(n)},m.isNull=function(n){return null===n},m.isUndefined=function(n){return void 0===n},m.has=function(n,t){return null!=n&&p.call(n,t)},m.noConflict=function(){return u._=i,this},m.identity=function(n){return n},m.constant=function(n){return function(){return n}},m.noop=function(){},m.property=w,m.propertyOf=function(n){return null==n?function(){}:function(t){return n[t]}},m.matcher=m.matches=function(n){return n=m.extendOwn({},n),function(t){return m.isMatch(t,n)}},m.times=function(n,t,r){var e=Array(Math.max(0,n));t=b(t,r,1);for(var u=0;u<n;u++)e[u]=t(u);return e},m.random=function(n,t){return null==t&&(t=n,n=0),n+Math.floor(Math.random()*(t-n+1))},m.now=Date.now||function(){return(new Date).getTime()};var B={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},T=m.invert(B),R=function(n){var t=function(t){return n[t]},r="(?:"+m.keys(n).join("|")+")",e=RegExp(r),u=RegExp(r,"g");return function(n){return n=null==n?"":""+n,e.test(n)?n.replace(u,t):n}};m.escape=R(B),m.unescape=R(T),m.result=function(n,t,r){var e=null==n?void 0:n[t];return void 0===e&&(e=r),m.isFunction(e)?e.call(n):e};var q=0;m.uniqueId=function(n){var t=++q+"";return n?n+t:t},m.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var K=/(.)^/,z={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},D=/\\|'|\r|\n|\u2028|\u2029/g,L=function(n){return"\\"+z[n]};m.template=function(n,t,r){!t&&r&&(t=r),t=m.defaults({},t,m.templateSettings);var e=RegExp([(t.escape||K).source,(t.interpolate||K).source,(t.evaluate||K).source].join("|")+"|$","g"),u=0,i="__p+='";n.replace(e,function(t,r,e,o,a){return i+=n.slice(u,a).replace(D,L),u=a+t.length,r?i+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'":e?i+="'+\n((__t=("+e+"))==null?'':__t)+\n'":o&&(i+="';\n"+o+"\n__p+='"),t}),i+="';\n",t.variable||(i="with(obj||{}){\n"+i+"}\n"),i="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{var o=new Function(t.variable||"obj","_",i)}catch(a){throw a.source=i,a}var c=function(n){return o.call(this,n,m)},f=t.variable||"obj";return c.source="function("+f+"){\n"+i+"}",c},m.chain=function(n){var t=m(n);return t._chain=!0,t};var P=function(n,t){return n._chain?m(t).chain():t};m.mixin=function(n){m.each(m.functions(n),function(t){var r=m[t]=n[t];m.prototype[t]=function(){var n=[this._wrapped];return f.apply(n,arguments),P(this,r.apply(m,n))}})},m.mixin(m),m.each(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var t=o[n];m.prototype[n]=function(){var r=this._wrapped;return t.apply(r,arguments),"shift"!==n&&"splice"!==n||0!==r.length||delete r[0],P(this,r)}}),m.each(["concat","join","slice"],function(n){var t=o[n];m.prototype[n]=function(){return P(this,t.apply(this._wrapped,arguments))}}),m.prototype.value=function(){return this._wrapped},m.prototype.valueOf=m.prototype.toJSON=m.prototype.value,m.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return m})}).call(this);
//# sourceMappingURL=data:application/json;base64,
